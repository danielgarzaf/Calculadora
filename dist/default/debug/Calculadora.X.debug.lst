

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sun Nov 29 12:42:33 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    27                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    28  0000                     
    29                           ; Version 2.10
    30                           ; Generated 31/07/2019 GMT
    31                           ; 
    32                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC18F45K50 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     
    64                           	psect	idataCOMRAM
    65  007A78                     __pidataCOMRAM:
    66                           	opt callstack 0
    67                           
    68                           ;initializer for main@key_vals
    69  007A78  01                 	db	1
    70  007A79  02                 	db	2
    71  007A7A  03                 	db	3
    72  007A7B  0A                 	db	10
    73  007A7C  04                 	db	4
    74  007A7D  05                 	db	5
    75  007A7E  06                 	db	6
    76  007A7F  0B                 	db	11
    77  007A80  07                 	db	7
    78  007A81  08                 	db	8
    79  007A82  09                 	db	9
    80  007A83  0C                 	db	12
    81  007A84  0E                 	db	14
    82  007A85  00                 	db	0
    83  007A86  0F                 	db	15
    84  007A87  0D                 	db	13
    85                           
    86                           ;initializer for main@F5405
    87  007A88  31                 	db	49
    88  007A89  32                 	db	50
    89  007A8A  33                 	db	51
    90  007A8B  2A                 	db	42
    91  007A8C  34                 	db	52
    92  007A8D  35                 	db	53
    93  007A8E  36                 	db	54
    94  007A8F  00                 	db	0
    95  0000                     _ANSELD	set	3934
    96  0000                     _ANSELC	set	3933
    97  0000                     _ANSELB	set	3932
    98  0000                     _ANSELA	set	3931
    99  0000                     _LATC	set	3979
   100  0000                     _TRISCbits	set	3988
   101  0000                     _LATB	set	3978
   102  0000                     _TRISB	set	3987
   103  0000                     _LATA	set	3977
   104  0000                     _TRISA	set	3986
   105  0000                     _PORTD	set	3971
   106  0000                     _TRISD	set	3989
   107  0000                     _LATD	set	3980
   108  0000                     _PORTCbits	set	3970
   109                           
   110                           ; #config settings
   111  0000                     
   112                           	psect	cinit
   113  007AE0                     __pcinit:
   114                           	opt callstack 0
   115  007AE0                     start_initialization:
   116                           	opt callstack 0
   117  007AE0                     __initialization:
   118                           	opt callstack 0
   119                           
   120                           ; Initialize objects allocated to COMRAM (24 bytes)
   121                           ; load TBLPTR registers with __pidataCOMRAM
   122  007AE0  0E78               	movlw	low __pidataCOMRAM
   123  007AE2  6EF6               	movwf	tblptrl,c
   124  007AE4  0E7A               	movlw	high __pidataCOMRAM
   125  007AE6  6EF7               	movwf	tblptrh,c
   126  007AE8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   127  007AEA  6EF8               	movwf	tblptru,c
   128  007AEC  EE00  F024         	lfsr	0,__pdataCOMRAM
   129  007AF0  EE10 F018          	lfsr	1,24
   130  007AF4                     copy_data0:
   131  007AF4  0009               	tblrd		*+
   132  007AF6  CFF5 FFEE          	movff	tablat,postinc0
   133  007AFA  50E5               	movf	postdec1,w,c
   134  007AFC  50E1               	movf	fsr1l,w,c
   135  007AFE  E1FA               	bnz	copy_data0
   136  007B00                     end_of_initialization:
   137                           	opt callstack 0
   138  007B00                     __end_of__initialization:
   139                           	opt callstack 0
   140  007B00  0100               	movlb	0
   141  007B02  EFFC  F03E         	goto	_main	;jump to C main() function
   142                           
   143                           	psect	dataCOMRAM
   144  000024                     __pdataCOMRAM:
   145                           	opt callstack 0
   146  000024                     	ds	16
   147  000034                     main@F5405:
   148                           	opt callstack 0
   149  000034                     	ds	8
   150                           
   151                           	psect	cstackCOMRAM
   152  000001                     __pcstackCOMRAM:
   153                           	opt callstack 0
   154  000001                     ?_strlen:
   155                           	opt callstack 0
   156  000001                     ?___aldiv:
   157                           	opt callstack 0
   158  000001                     ?___almod:
   159                           	opt callstack 0
   160  000001                     LCD_rdy@busy:
   161                           	opt callstack 0
   162  000001                     strlen@s:
   163                           	opt callstack 0
   164  000001                     ___aldiv@dividend:
   165                           	opt callstack 0
   166  000001                     ___almod@dividend:
   167                           	opt callstack 0
   168                           
   169                           ; 4 bytes @ 0x0
   170  000001                     	ds	1
   171  000002                     LCD_cmd@cmd:
   172                           	opt callstack 0
   173  000002                     LCD_writeChar@data:
   174                           	opt callstack 0
   175                           
   176                           ; 1 bytes @ 0x1
   177  000002                     	ds	1
   178  000003                     LCD_entryMode@ID:
   179                           	opt callstack 0
   180  000003                     LCD_dispControl@D:
   181                           	opt callstack 0
   182  000003                     LCD_cursor@SC:
   183                           	opt callstack 0
   184  000003                     LCD_functionSet@DL:
   185                           	opt callstack 0
   186  000003                     strlen@a:
   187                           	opt callstack 0
   188                           
   189                           ; 2 bytes @ 0x2
   190  000003                     	ds	2
   191  000005                     LCD_entryMode@SH:
   192                           	opt callstack 0
   193  000005                     LCD_dispControl@C:
   194                           	opt callstack 0
   195  000005                     LCD_cursor@RL:
   196                           	opt callstack 0
   197  000005                     LCD_functionSet@N:
   198                           	opt callstack 0
   199  000005                     LCD_writeStr@data:
   200                           	opt callstack 0
   201  000005                     ___aldiv@divisor:
   202                           	opt callstack 0
   203  000005                     ___almod@divisor:
   204                           	opt callstack 0
   205                           
   206                           ; 4 bytes @ 0x4
   207  000005                     	ds	2
   208  000007                     ??_LCD_cursor:
   209  000007                     ??_LCD_writeStr:
   210  000007                     LCD_dispControl@B:
   211                           	opt callstack 0
   212  000007                     LCD_functionSet@F:
   213                           	opt callstack 0
   214                           
   215                           ; 2 bytes @ 0x6
   216  000007                     	ds	1
   217  000008                     LCD_writeStr@length:
   218                           	opt callstack 0
   219                           
   220                           ; 2 bytes @ 0x7
   221  000008                     	ds	1
   222  000009                     ??_LCD_functionSet:
   223  000009                     ??_LCD_dispControl:
   224  000009                     ___aldiv@counter:
   225                           	opt callstack 0
   226  000009                     ___almod@counter:
   227                           	opt callstack 0
   228                           
   229                           ; 1 bytes @ 0x8
   230  000009                     	ds	1
   231  00000A                     ___aldiv@sign:
   232                           	opt callstack 0
   233  00000A                     ___almod@sign:
   234                           	opt callstack 0
   235  00000A                     LCD_writeStr@i:
   236                           	opt callstack 0
   237                           
   238                           ; 2 bytes @ 0x9
   239  00000A                     	ds	1
   240  00000B                     ___aldiv@quotient:
   241                           	opt callstack 0
   242                           
   243                           ; 4 bytes @ 0xA
   244  00000B                     	ds	4
   245  00000F                     printCalcResult@result:
   246                           	opt callstack 0
   247                           
   248                           ; 4 bytes @ 0xE
   249  00000F                     	ds	4
   250  000013                     printCalcResult@modulo:
   251                           	opt callstack 0
   252                           
   253                           ; 1 bytes @ 0x12
   254  000013                     	ds	1
   255  000014                     ??_main:
   256                           
   257                           ; 1 bytes @ 0x13
   258  000014                     	ds	2
   259  000016                     main@message:
   260                           	opt callstack 0
   261                           
   262                           ; 8 bytes @ 0x15
   263  000016                     	ds	12
   264  000022                     main@i:
   265                           	opt callstack 0
   266                           
   267                           ; 2 bytes @ 0x21
   268  000022                     	ds	2
   269                           
   270 ;;
   271 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   272 ;;
   273 ;; *************** function _main *****************
   274 ;; Defined at:
   275 ;;		line 29 in file "main.c"
   276 ;; Parameters:    Size  Location     Type
   277 ;;		None
   278 ;; Auto vars:     Size  Location     Type
   279 ;;  i               2   33[COMRAM] int 
   280 ;;  result          4    0        unsigned long 
   281 ;;  message         8   21[COMRAM] unsigned char [8]
   282 ;; Return value:  Size  Location     Type
   283 ;;                  1    wreg      void 
   284 ;; Registers used:
   285 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   286 ;; Tracked objects:
   287 ;;		On entry : 0/0
   288 ;;		On exit  : 0/0
   289 ;;		Unchanged: 0/0
   290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   291 ;;      Params:         0       0       0       0       0       0       0       0       0
   292 ;;      Locals:        14       0       0       0       0       0       0       0       0
   293 ;;      Temps:          2       0       0       0       0       0       0       0       0
   294 ;;      Totals:        16       0       0       0       0       0       0       0       0
   295 ;;Total ram usage:       16 bytes
   296 ;; Hardware stack levels required when called:    4
   297 ;; This function calls:
   298 ;;		_LCD_clear
   299 ;;		_LCD_cursor
   300 ;;		_LCD_dispControl
   301 ;;		_LCD_entryMode
   302 ;;		_LCD_init
   303 ;;		_LCD_newLine
   304 ;;		_LCD_writeStr
   305 ;;		_ports_init
   306 ;;		_printCalcResult
   307 ;; This function is called by:
   308 ;;		Startup code after reset
   309 ;; This function uses a non-reentrant model
   310 ;;
   311                           
   312                           	psect	text0
   313  007DF8                     __ptext0:
   314                           	opt callstack 0
   315  007DF8                     _main:
   316                           	opt callstack 27
   317  007DF8                     
   318                           ;main.c: 30:     static char key_vals[4][4] = {{1, 2, 3, 10}, {4, 5, 6, 11}, {7, 8, 9, 1
      +                          2},;main.c: 32:     char message[] = "123*456";
   319  007DF8  EE20  F034         	lfsr	2,main@F5405
   320  007DFC  EE10  F016         	lfsr	1,main@message
   321  007E00  0E07               	movlw	7
   322  007E02                     u341:
   323  007E02  CFDB FFE3          	movff	plusw2,plusw1
   324  007E06  06E8               	decf	wreg,f,c
   325  007E08  E2FC               	bc	u341
   326  007E0A                     
   327                           ;main.c: 33:     ports_init();
   328  007E0A  ECCE  F03D         	call	_ports_init	;wreg free
   329  007E0E                     
   330                           ;main.c: 34:     LCD_init();
   331  007E0E  ECE9  F03D         	call	_LCD_init	;wreg free
   332  007E12                     l1179:
   333                           
   334                           ;main.c: 38:         LCD_writeStr(message);
   335  007E12  0E16               	movlw	low main@message
   336  007E14  6E05               	movwf	LCD_writeStr@data^0,c
   337  007E16  0E00               	movlw	high main@message
   338  007E18  6E06               	movwf	(LCD_writeStr@data+1)^0,c
   339  007E1A  EC12  F03E         	call	_LCD_writeStr	;wreg free
   340  007E1E                     
   341                           ;main.c: 39:         LCD_newLine();
   342  007E1E  EC25  F03D         	call	_LCD_newLine	;wreg free
   343  007E22                     
   344                           ;main.c: 42:         for (int i = 0; i < 15; i++) {
   345  007E22  0E00               	movlw	0
   346  007E24  6E23               	movwf	(main@i+1)^0,c
   347  007E26  0E00               	movlw	0
   348  007E28  6E22               	movwf	main@i^0,c
   349  007E2A                     l1189:
   350                           
   351                           ;main.c: 43:             LCD_cursor(0, 1);
   352  007E2A  0E00               	movlw	0
   353  007E2C  6E04               	movwf	(LCD_cursor@SC+1)^0,c
   354  007E2E  0E00               	movlw	0
   355  007E30  6E03               	movwf	LCD_cursor@SC^0,c
   356  007E32  0E00               	movlw	0
   357  007E34  6E06               	movwf	(LCD_cursor@RL+1)^0,c
   358  007E36  0E01               	movlw	1
   359  007E38  6E05               	movwf	LCD_cursor@RL^0,c
   360  007E3A  EC62  F03D         	call	_LCD_cursor	;wreg free
   361  007E3E                     
   362                           ;main.c: 44:         }
   363  007E3E  4A22               	infsnz	main@i^0,f,c
   364  007E40  2A23               	incf	(main@i+1)^0,f,c
   365  007E42  BE23               	btfsc	(main@i+1)^0,7,c
   366  007E44  EF2D  F03F         	goto	u351
   367  007E48  5023               	movf	(main@i+1)^0,w,c
   368  007E4A  E109               	bnz	u350
   369  007E4C  0E0F               	movlw	15
   370  007E4E  5C22               	subwf	main@i^0,w,c
   371  007E50  A0D8               	btfss	status,0,c
   372  007E52  EF2D  F03F         	goto	u351
   373  007E56  EF2F  F03F         	goto	u350
   374  007E5A                     u351:
   375  007E5A  EF15  F03F         	goto	l1189
   376  007E5E                     u350:
   377  007E5E                     
   378                           ;main.c: 47:         LCD_entryMode(0,0);
   379  007E5E  0E00               	movlw	0
   380  007E60  6E04               	movwf	(LCD_entryMode@ID+1)^0,c
   381  007E62  0E00               	movlw	0
   382  007E64  6E03               	movwf	LCD_entryMode@ID^0,c
   383  007E66  0E00               	movlw	0
   384  007E68  6E06               	movwf	(LCD_entryMode@SH+1)^0,c
   385  007E6A  0E00               	movlw	0
   386  007E6C  6E05               	movwf	LCD_entryMode@SH^0,c
   387  007E6E  EC29  F03D         	call	_LCD_entryMode	;wreg free
   388  007E72                     
   389                           ;main.c: 49:         printCalcResult(result);
   390  007E72  0E18               	movlw	24
   391  007E74  6E0F               	movwf	printCalcResult@result^0,c
   392  007E76  0EDB               	movlw	219
   393  007E78  6E10               	movwf	(printCalcResult@result+1)^0,c
   394  007E7A  0E00               	movlw	0
   395  007E7C  6E11               	movwf	(printCalcResult@result+2)^0,c
   396  007E7E  0E00               	movlw	0
   397  007E80  6E12               	movwf	(printCalcResult@result+3)^0,c
   398  007E82  EC45  F03E         	call	_printCalcResult	;wreg free
   399  007E86                     
   400                           ;main.c: 50:         LCD_dispControl(1,0,0);
   401  007E86  0E00               	movlw	0
   402  007E88  6E04               	movwf	(LCD_dispControl@D+1)^0,c
   403  007E8A  0E01               	movlw	1
   404  007E8C  6E03               	movwf	LCD_dispControl@D^0,c
   405  007E8E  0E00               	movlw	0
   406  007E90  6E06               	movwf	(LCD_dispControl@C+1)^0,c
   407  007E92  0E00               	movlw	0
   408  007E94  6E05               	movwf	LCD_dispControl@C^0,c
   409  007E96  0E00               	movlw	0
   410  007E98  6E08               	movwf	(LCD_dispControl@B+1)^0,c
   411  007E9A  0E00               	movlw	0
   412  007E9C  6E07               	movwf	LCD_dispControl@B^0,c
   413  007E9E  EC30  F03D         	call	_LCD_dispControl	;wreg free
   414  007EA2                     
   415                           ;main.c: 51:         LCD_entryMode(1,0);
   416  007EA2  0E00               	movlw	0
   417  007EA4  6E04               	movwf	(LCD_entryMode@ID+1)^0,c
   418  007EA6  0E01               	movlw	1
   419  007EA8  6E03               	movwf	LCD_entryMode@ID^0,c
   420  007EAA  0E00               	movlw	0
   421  007EAC  6E06               	movwf	(LCD_entryMode@SH+1)^0,c
   422  007EAE  0E00               	movlw	0
   423  007EB0  6E05               	movwf	LCD_entryMode@SH^0,c
   424  007EB2  EC29  F03D         	call	_LCD_entryMode	;wreg free
   425  007EB6                     
   426                           ;main.c: 52:         _delay((unsigned long)((2000)*(1000000/4000.0)));
   427  007EB6  0E03               	movlw	3
   428  007EB8  6E15               	movwf	(??_main+1)^0,c
   429  007EBA  0E8A               	movlw	138
   430  007EBC  6E14               	movwf	??_main^0,c
   431  007EBE  0E56               	movlw	86
   432  007EC0                     u367:
   433  007EC0  2EE8               	decfsz	wreg,f,c
   434  007EC2  D7FE               	bra	u367
   435  007EC4  2E14               	decfsz	??_main^0,f,c
   436  007EC6  D7FC               	bra	u367
   437  007EC8  2E15               	decfsz	(??_main+1)^0,f,c
   438  007ECA  D7FA               	bra	u367
   439  007ECC                     
   440                           ;main.c: 53:         LCD_dispControl(1, 1, 1);
   441  007ECC  0E00               	movlw	0
   442  007ECE  6E04               	movwf	(LCD_dispControl@D+1)^0,c
   443  007ED0  0E01               	movlw	1
   444  007ED2  6E03               	movwf	LCD_dispControl@D^0,c
   445  007ED4  0E00               	movlw	0
   446  007ED6  6E06               	movwf	(LCD_dispControl@C+1)^0,c
   447  007ED8  0E01               	movlw	1
   448  007EDA  6E05               	movwf	LCD_dispControl@C^0,c
   449  007EDC  0E00               	movlw	0
   450  007EDE  6E08               	movwf	(LCD_dispControl@B+1)^0,c
   451  007EE0  0E01               	movlw	1
   452  007EE2  6E07               	movwf	LCD_dispControl@B^0,c
   453  007EE4  EC30  F03D         	call	_LCD_dispControl	;wreg free
   454  007EE8                     
   455                           ;main.c: 54:         LCD_clear();
   456  007EE8  EC21  F03D         	call	_LCD_clear	;wreg free
   457  007EEC  EF09  F03F         	goto	l1179
   458  007EF0  EF00  F000         	goto	start
   459  007EF4                     __end_of_main:
   460                           	opt callstack 0
   461                           
   462 ;; *************** function _printCalcResult *****************
   463 ;; Defined at:
   464 ;;		line 80 in file "main.c"
   465 ;; Parameters:    Size  Location     Type
   466 ;;  result          4   14[COMRAM] long 
   467 ;; Auto vars:     Size  Location     Type
   468 ;;  modulo          1   18[COMRAM] unsigned char 
   469 ;; Return value:  Size  Location     Type
   470 ;;                  1    wreg      void 
   471 ;; Registers used:
   472 ;;		wreg, status,2, status,0, cstack
   473 ;; Tracked objects:
   474 ;;		On entry : 0/0
   475 ;;		On exit  : 0/0
   476 ;;		Unchanged: 0/0
   477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   478 ;;      Params:         4       0       0       0       0       0       0       0       0
   479 ;;      Locals:         1       0       0       0       0       0       0       0       0
   480 ;;      Temps:          0       0       0       0       0       0       0       0       0
   481 ;;      Totals:         5       0       0       0       0       0       0       0       0
   482 ;;Total ram usage:        5 bytes
   483 ;; Hardware stack levels used:    1
   484 ;; Hardware stack levels required when called:    2
   485 ;; This function calls:
   486 ;;		_LCD_writeChar
   487 ;;		___aldiv
   488 ;;		___almod
   489 ;; This function is called by:
   490 ;;		_main
   491 ;; This function uses a non-reentrant model
   492 ;;
   493                           
   494                           	psect	text1
   495  007C8A                     __ptext1:
   496                           	opt callstack 0
   497  007C8A                     _printCalcResult:
   498                           	opt callstack 28
   499  007C8A                     
   500                           ;main.c: 81:     while (result) {
   501  007C8A  EF7A  F03E         	goto	l1171
   502  007C8E                     l1163:
   503                           
   504                           ;main.c: 82:         char modulo = result % 10;
   505  007C8E  C00F  F001         	movff	printCalcResult@result,___almod@dividend
   506  007C92  C010  F002         	movff	printCalcResult@result+1,___almod@dividend+1
   507  007C96  C011  F003         	movff	printCalcResult@result+2,___almod@dividend+2
   508  007C9A  C012  F004         	movff	printCalcResult@result+3,___almod@dividend+3
   509  007C9E  0E0A               	movlw	10
   510  007CA0  6E05               	movwf	___almod@divisor^0,c
   511  007CA2  0E00               	movlw	0
   512  007CA4  6E06               	movwf	(___almod@divisor+1)^0,c
   513  007CA6  0E00               	movlw	0
   514  007CA8  6E07               	movwf	(___almod@divisor+2)^0,c
   515  007CAA  0E00               	movlw	0
   516  007CAC  6E08               	movwf	(___almod@divisor+3)^0,c
   517  007CAE  EC86  F03E         	call	___almod	;wreg free
   518  007CB2  5001               	movf	?___almod^0,w,c
   519  007CB4  6E13               	movwf	printCalcResult@modulo^0,c
   520  007CB6                     
   521                           ;main.c: 83:         modulo += 48;
   522  007CB6  0E30               	movlw	48
   523  007CB8  2613               	addwf	printCalcResult@modulo^0,f,c
   524  007CBA                     
   525                           ;main.c: 84:         LCD_writeChar(modulo);
   526  007CBA  5013               	movf	printCalcResult@modulo^0,w,c
   527  007CBC  EC55  F03D         	call	_LCD_writeChar
   528  007CC0                     
   529                           ;main.c: 85:         result /= 10;
   530  007CC0  C00F  F001         	movff	printCalcResult@result,___aldiv@dividend
   531  007CC4  C010  F002         	movff	printCalcResult@result+1,___aldiv@dividend+1
   532  007CC8  C011  F003         	movff	printCalcResult@result+2,___aldiv@dividend+2
   533  007CCC  C012  F004         	movff	printCalcResult@result+3,___aldiv@dividend+3
   534  007CD0  0E0A               	movlw	10
   535  007CD2  6E05               	movwf	___aldiv@divisor^0,c
   536  007CD4  0E00               	movlw	0
   537  007CD6  6E06               	movwf	(___aldiv@divisor+1)^0,c
   538  007CD8  0E00               	movlw	0
   539  007CDA  6E07               	movwf	(___aldiv@divisor+2)^0,c
   540  007CDC  0E00               	movlw	0
   541  007CDE  6E08               	movwf	(___aldiv@divisor+3)^0,c
   542  007CE0  EC7A  F03F         	call	___aldiv	;wreg free
   543  007CE4  C001  F00F         	movff	?___aldiv,printCalcResult@result
   544  007CE8  C002  F010         	movff	?___aldiv+1,printCalcResult@result+1
   545  007CEC  C003  F011         	movff	?___aldiv+2,printCalcResult@result+2
   546  007CF0  C004  F012         	movff	?___aldiv+3,printCalcResult@result+3
   547  007CF4                     l1171:
   548                           
   549                           ;main.c: 81:     while (result) {
   550  007CF4  500F               	movf	printCalcResult@result^0,w,c
   551  007CF6  1010               	iorwf	(printCalcResult@result+1)^0,w,c
   552  007CF8  1011               	iorwf	(printCalcResult@result+2)^0,w,c
   553  007CFA  1012               	iorwf	(printCalcResult@result+3)^0,w,c
   554  007CFC  A4D8               	btfss	status,2,c
   555  007CFE  EF83  F03E         	goto	u331
   556  007D02  EF85  F03E         	goto	u330
   557  007D06                     u331:
   558  007D06  EF47  F03E         	goto	l1163
   559  007D0A                     u330:
   560  007D0A  0012               	return		;funcret
   561  007D0C                     __end_of_printCalcResult:
   562                           	opt callstack 0
   563                           
   564 ;; *************** function ___almod *****************
   565 ;; Defined at:
   566 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\almod.c"
   567 ;; Parameters:    Size  Location     Type
   568 ;;  dividend        4    0[COMRAM] long 
   569 ;;  divisor         4    4[COMRAM] long 
   570 ;; Auto vars:     Size  Location     Type
   571 ;;  sign            1    9[COMRAM] unsigned char 
   572 ;;  counter         1    8[COMRAM] unsigned char 
   573 ;; Return value:  Size  Location     Type
   574 ;;                  4    0[COMRAM] long 
   575 ;; Registers used:
   576 ;;		wreg, status,2, status,0
   577 ;; Tracked objects:
   578 ;;		On entry : 0/0
   579 ;;		On exit  : 0/0
   580 ;;		Unchanged: 0/0
   581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   582 ;;      Params:         8       0       0       0       0       0       0       0       0
   583 ;;      Locals:         2       0       0       0       0       0       0       0       0
   584 ;;      Temps:          0       0       0       0       0       0       0       0       0
   585 ;;      Totals:        10       0       0       0       0       0       0       0       0
   586 ;;Total ram usage:       10 bytes
   587 ;; Hardware stack levels used:    1
   588 ;; This function calls:
   589 ;;		Nothing
   590 ;; This function is called by:
   591 ;;		_printCalcResult
   592 ;; This function uses a non-reentrant model
   593 ;;
   594                           
   595                           	psect	text2
   596  007D0C                     __ptext2:
   597                           	opt callstack 0
   598  007D0C                     ___almod:
   599                           	opt callstack 29
   600  007D0C  0E00               	movlw	0
   601  007D0E  6E0A               	movwf	___almod@sign^0,c
   602  007D10  BE04               	btfsc	(___almod@dividend+3)^0,7,c
   603  007D12  EF8F  F03E         	goto	u260
   604  007D16  EF8D  F03E         	goto	u261
   605  007D1A                     u261:
   606  007D1A  EF99  F03E         	goto	l1107
   607  007D1E                     u260:
   608  007D1E  1E04               	comf	(___almod@dividend+3)^0,f,c
   609  007D20  1E03               	comf	(___almod@dividend+2)^0,f,c
   610  007D22  1E02               	comf	(___almod@dividend+1)^0,f,c
   611  007D24  6C01               	negf	___almod@dividend^0,c
   612  007D26  0E00               	movlw	0
   613  007D28  2202               	addwfc	(___almod@dividend+1)^0,f,c
   614  007D2A  2203               	addwfc	(___almod@dividend+2)^0,f,c
   615  007D2C  2204               	addwfc	(___almod@dividend+3)^0,f,c
   616  007D2E  0E01               	movlw	1
   617  007D30  6E0A               	movwf	___almod@sign^0,c
   618  007D32                     l1107:
   619  007D32  BE08               	btfsc	(___almod@divisor+3)^0,7,c
   620  007D34  EFA0  F03E         	goto	u270
   621  007D38  EF9E  F03E         	goto	u271
   622  007D3C                     u271:
   623  007D3C  EFA8  F03E         	goto	l1111
   624  007D40                     u270:
   625  007D40  1E08               	comf	(___almod@divisor+3)^0,f,c
   626  007D42  1E07               	comf	(___almod@divisor+2)^0,f,c
   627  007D44  1E06               	comf	(___almod@divisor+1)^0,f,c
   628  007D46  6C05               	negf	___almod@divisor^0,c
   629  007D48  0E00               	movlw	0
   630  007D4A  2206               	addwfc	(___almod@divisor+1)^0,f,c
   631  007D4C  2207               	addwfc	(___almod@divisor+2)^0,f,c
   632  007D4E  2208               	addwfc	(___almod@divisor+3)^0,f,c
   633  007D50                     l1111:
   634  007D50  5005               	movf	___almod@divisor^0,w,c
   635  007D52  1006               	iorwf	(___almod@divisor+1)^0,w,c
   636  007D54  1007               	iorwf	(___almod@divisor+2)^0,w,c
   637  007D56  1008               	iorwf	(___almod@divisor+3)^0,w,c
   638  007D58  B4D8               	btfsc	status,2,c
   639  007D5A  EFB1  F03E         	goto	u281
   640  007D5E  EFB3  F03E         	goto	u280
   641  007D62                     u281:
   642  007D62  EFE3  F03E         	goto	l1127
   643  007D66                     u280:
   644  007D66  0E01               	movlw	1
   645  007D68  6E09               	movwf	___almod@counter^0,c
   646  007D6A  EFBD  F03E         	goto	l1117
   647  007D6E                     l1115:
   648  007D6E  90D8               	bcf	status,0,c
   649  007D70  3605               	rlcf	___almod@divisor^0,f,c
   650  007D72  3606               	rlcf	(___almod@divisor+1)^0,f,c
   651  007D74  3607               	rlcf	(___almod@divisor+2)^0,f,c
   652  007D76  3608               	rlcf	(___almod@divisor+3)^0,f,c
   653  007D78  2A09               	incf	___almod@counter^0,f,c
   654  007D7A                     l1117:
   655  007D7A  AE08               	btfss	(___almod@divisor+3)^0,7,c
   656  007D7C  EFC2  F03E         	goto	u291
   657  007D80  EFC4  F03E         	goto	u290
   658  007D84                     u291:
   659  007D84  EFB7  F03E         	goto	l1115
   660  007D88                     u290:
   661  007D88                     l1119:
   662  007D88  5005               	movf	___almod@divisor^0,w,c
   663  007D8A  5C01               	subwf	___almod@dividend^0,w,c
   664  007D8C  5006               	movf	(___almod@divisor+1)^0,w,c
   665  007D8E  5802               	subwfb	(___almod@dividend+1)^0,w,c
   666  007D90  5007               	movf	(___almod@divisor+2)^0,w,c
   667  007D92  5803               	subwfb	(___almod@dividend+2)^0,w,c
   668  007D94  5008               	movf	(___almod@divisor+3)^0,w,c
   669  007D96  5804               	subwfb	(___almod@dividend+3)^0,w,c
   670  007D98  A0D8               	btfss	status,0,c
   671  007D9A  EFD1  F03E         	goto	u301
   672  007D9E  EFD3  F03E         	goto	u300
   673  007DA2                     u301:
   674  007DA2  EFDB  F03E         	goto	l1123
   675  007DA6                     u300:
   676  007DA6  5005               	movf	___almod@divisor^0,w,c
   677  007DA8  5E01               	subwf	___almod@dividend^0,f,c
   678  007DAA  5006               	movf	(___almod@divisor+1)^0,w,c
   679  007DAC  5A02               	subwfb	(___almod@dividend+1)^0,f,c
   680  007DAE  5007               	movf	(___almod@divisor+2)^0,w,c
   681  007DB0  5A03               	subwfb	(___almod@dividend+2)^0,f,c
   682  007DB2  5008               	movf	(___almod@divisor+3)^0,w,c
   683  007DB4  5A04               	subwfb	(___almod@dividend+3)^0,f,c
   684  007DB6                     l1123:
   685  007DB6  90D8               	bcf	status,0,c
   686  007DB8  3208               	rrcf	(___almod@divisor+3)^0,f,c
   687  007DBA  3207               	rrcf	(___almod@divisor+2)^0,f,c
   688  007DBC  3206               	rrcf	(___almod@divisor+1)^0,f,c
   689  007DBE  3205               	rrcf	___almod@divisor^0,f,c
   690  007DC0  2E09               	decfsz	___almod@counter^0,f,c
   691  007DC2  EFC4  F03E         	goto	l1119
   692  007DC6                     l1127:
   693  007DC6  500A               	movf	___almod@sign^0,w,c
   694  007DC8  B4D8               	btfsc	status,2,c
   695  007DCA  EFE9  F03E         	goto	u311
   696  007DCE  EFEB  F03E         	goto	u310
   697  007DD2                     u311:
   698  007DD2  EFF3  F03E         	goto	l1131
   699  007DD6                     u310:
   700  007DD6  1E04               	comf	(___almod@dividend+3)^0,f,c
   701  007DD8  1E03               	comf	(___almod@dividend+2)^0,f,c
   702  007DDA  1E02               	comf	(___almod@dividend+1)^0,f,c
   703  007DDC  6C01               	negf	___almod@dividend^0,c
   704  007DDE  0E00               	movlw	0
   705  007DE0  2202               	addwfc	(___almod@dividend+1)^0,f,c
   706  007DE2  2203               	addwfc	(___almod@dividend+2)^0,f,c
   707  007DE4  2204               	addwfc	(___almod@dividend+3)^0,f,c
   708  007DE6                     l1131:
   709  007DE6  C001  F001         	movff	___almod@dividend,?___almod
   710  007DEA  C002  F002         	movff	___almod@dividend+1,?___almod+1
   711  007DEE  C003  F003         	movff	___almod@dividend+2,?___almod+2
   712  007DF2  C004  F004         	movff	___almod@dividend+3,?___almod+3
   713  007DF6  0012               	return		;funcret
   714  007DF8                     __end_of___almod:
   715                           	opt callstack 0
   716                           
   717 ;; *************** function ___aldiv *****************
   718 ;; Defined at:
   719 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\aldiv.c"
   720 ;; Parameters:    Size  Location     Type
   721 ;;  dividend        4    0[COMRAM] long 
   722 ;;  divisor         4    4[COMRAM] long 
   723 ;; Auto vars:     Size  Location     Type
   724 ;;  quotient        4   10[COMRAM] long 
   725 ;;  sign            1    9[COMRAM] unsigned char 
   726 ;;  counter         1    8[COMRAM] unsigned char 
   727 ;; Return value:  Size  Location     Type
   728 ;;                  4    0[COMRAM] long 
   729 ;; Registers used:
   730 ;;		wreg, status,2, status,0
   731 ;; Tracked objects:
   732 ;;		On entry : 0/0
   733 ;;		On exit  : 0/0
   734 ;;		Unchanged: 0/0
   735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   736 ;;      Params:         8       0       0       0       0       0       0       0       0
   737 ;;      Locals:         6       0       0       0       0       0       0       0       0
   738 ;;      Temps:          0       0       0       0       0       0       0       0       0
   739 ;;      Totals:        14       0       0       0       0       0       0       0       0
   740 ;;Total ram usage:       14 bytes
   741 ;; Hardware stack levels used:    1
   742 ;; This function calls:
   743 ;;		Nothing
   744 ;; This function is called by:
   745 ;;		_printCalcResult
   746 ;; This function uses a non-reentrant model
   747 ;;
   748                           
   749                           	psect	text3
   750  007EF4                     __ptext3:
   751                           	opt callstack 0
   752  007EF4                     ___aldiv:
   753                           	opt callstack 29
   754  007EF4  0E00               	movlw	0
   755  007EF6  6E0A               	movwf	___aldiv@sign^0,c
   756  007EF8  BE08               	btfsc	(___aldiv@divisor+3)^0,7,c
   757  007EFA  EF83  F03F         	goto	u200
   758  007EFE  EF81  F03F         	goto	u201
   759  007F02                     u201:
   760  007F02  EF8D  F03F         	goto	l1063
   761  007F06                     u200:
   762  007F06  1E08               	comf	(___aldiv@divisor+3)^0,f,c
   763  007F08  1E07               	comf	(___aldiv@divisor+2)^0,f,c
   764  007F0A  1E06               	comf	(___aldiv@divisor+1)^0,f,c
   765  007F0C  6C05               	negf	___aldiv@divisor^0,c
   766  007F0E  0E00               	movlw	0
   767  007F10  2206               	addwfc	(___aldiv@divisor+1)^0,f,c
   768  007F12  2207               	addwfc	(___aldiv@divisor+2)^0,f,c
   769  007F14  2208               	addwfc	(___aldiv@divisor+3)^0,f,c
   770  007F16  0E01               	movlw	1
   771  007F18  6E0A               	movwf	___aldiv@sign^0,c
   772  007F1A                     l1063:
   773  007F1A  BE04               	btfsc	(___aldiv@dividend+3)^0,7,c
   774  007F1C  EF94  F03F         	goto	u210
   775  007F20  EF92  F03F         	goto	u211
   776  007F24                     u211:
   777  007F24  EF9E  F03F         	goto	l1069
   778  007F28                     u210:
   779  007F28  1E04               	comf	(___aldiv@dividend+3)^0,f,c
   780  007F2A  1E03               	comf	(___aldiv@dividend+2)^0,f,c
   781  007F2C  1E02               	comf	(___aldiv@dividend+1)^0,f,c
   782  007F2E  6C01               	negf	___aldiv@dividend^0,c
   783  007F30  0E00               	movlw	0
   784  007F32  2202               	addwfc	(___aldiv@dividend+1)^0,f,c
   785  007F34  2203               	addwfc	(___aldiv@dividend+2)^0,f,c
   786  007F36  2204               	addwfc	(___aldiv@dividend+3)^0,f,c
   787  007F38  0E01               	movlw	1
   788  007F3A  1A0A               	xorwf	___aldiv@sign^0,f,c
   789  007F3C                     l1069:
   790  007F3C  0E00               	movlw	0
   791  007F3E  6E0B               	movwf	___aldiv@quotient^0,c
   792  007F40  0E00               	movlw	0
   793  007F42  6E0C               	movwf	(___aldiv@quotient+1)^0,c
   794  007F44  0E00               	movlw	0
   795  007F46  6E0D               	movwf	(___aldiv@quotient+2)^0,c
   796  007F48  0E00               	movlw	0
   797  007F4A  6E0E               	movwf	(___aldiv@quotient+3)^0,c
   798  007F4C  5005               	movf	___aldiv@divisor^0,w,c
   799  007F4E  1006               	iorwf	(___aldiv@divisor+1)^0,w,c
   800  007F50  1007               	iorwf	(___aldiv@divisor+2)^0,w,c
   801  007F52  1008               	iorwf	(___aldiv@divisor+3)^0,w,c
   802  007F54  B4D8               	btfsc	status,2,c
   803  007F56  EFAF  F03F         	goto	u221
   804  007F5A  EFB1  F03F         	goto	u220
   805  007F5E                     u221:
   806  007F5E  EFE7  F03F         	goto	l1091
   807  007F62                     u220:
   808  007F62  0E01               	movlw	1
   809  007F64  6E09               	movwf	___aldiv@counter^0,c
   810  007F66  EFBB  F03F         	goto	l1077
   811  007F6A                     l1075:
   812  007F6A  90D8               	bcf	status,0,c
   813  007F6C  3605               	rlcf	___aldiv@divisor^0,f,c
   814  007F6E  3606               	rlcf	(___aldiv@divisor+1)^0,f,c
   815  007F70  3607               	rlcf	(___aldiv@divisor+2)^0,f,c
   816  007F72  3608               	rlcf	(___aldiv@divisor+3)^0,f,c
   817  007F74  2A09               	incf	___aldiv@counter^0,f,c
   818  007F76                     l1077:
   819  007F76  AE08               	btfss	(___aldiv@divisor+3)^0,7,c
   820  007F78  EFC0  F03F         	goto	u231
   821  007F7C  EFC2  F03F         	goto	u230
   822  007F80                     u231:
   823  007F80  EFB5  F03F         	goto	l1075
   824  007F84                     u230:
   825  007F84                     l1079:
   826  007F84  90D8               	bcf	status,0,c
   827  007F86  360B               	rlcf	___aldiv@quotient^0,f,c
   828  007F88  360C               	rlcf	(___aldiv@quotient+1)^0,f,c
   829  007F8A  360D               	rlcf	(___aldiv@quotient+2)^0,f,c
   830  007F8C  360E               	rlcf	(___aldiv@quotient+3)^0,f,c
   831  007F8E  5005               	movf	___aldiv@divisor^0,w,c
   832  007F90  5C01               	subwf	___aldiv@dividend^0,w,c
   833  007F92  5006               	movf	(___aldiv@divisor+1)^0,w,c
   834  007F94  5802               	subwfb	(___aldiv@dividend+1)^0,w,c
   835  007F96  5007               	movf	(___aldiv@divisor+2)^0,w,c
   836  007F98  5803               	subwfb	(___aldiv@dividend+2)^0,w,c
   837  007F9A  5008               	movf	(___aldiv@divisor+3)^0,w,c
   838  007F9C  5804               	subwfb	(___aldiv@dividend+3)^0,w,c
   839  007F9E  A0D8               	btfss	status,0,c
   840  007FA0  EFD4  F03F         	goto	u241
   841  007FA4  EFD6  F03F         	goto	u240
   842  007FA8                     u241:
   843  007FA8  EFDF  F03F         	goto	l1087
   844  007FAC                     u240:
   845  007FAC  5005               	movf	___aldiv@divisor^0,w,c
   846  007FAE  5E01               	subwf	___aldiv@dividend^0,f,c
   847  007FB0  5006               	movf	(___aldiv@divisor+1)^0,w,c
   848  007FB2  5A02               	subwfb	(___aldiv@dividend+1)^0,f,c
   849  007FB4  5007               	movf	(___aldiv@divisor+2)^0,w,c
   850  007FB6  5A03               	subwfb	(___aldiv@dividend+2)^0,f,c
   851  007FB8  5008               	movf	(___aldiv@divisor+3)^0,w,c
   852  007FBA  5A04               	subwfb	(___aldiv@dividend+3)^0,f,c
   853  007FBC  800B               	bsf	___aldiv@quotient^0,0,c
   854  007FBE                     l1087:
   855  007FBE  90D8               	bcf	status,0,c
   856  007FC0  3208               	rrcf	(___aldiv@divisor+3)^0,f,c
   857  007FC2  3207               	rrcf	(___aldiv@divisor+2)^0,f,c
   858  007FC4  3206               	rrcf	(___aldiv@divisor+1)^0,f,c
   859  007FC6  3205               	rrcf	___aldiv@divisor^0,f,c
   860  007FC8  2E09               	decfsz	___aldiv@counter^0,f,c
   861  007FCA  EFC2  F03F         	goto	l1079
   862  007FCE                     l1091:
   863  007FCE  500A               	movf	___aldiv@sign^0,w,c
   864  007FD0  B4D8               	btfsc	status,2,c
   865  007FD2  EFED  F03F         	goto	u251
   866  007FD6  EFEF  F03F         	goto	u250
   867  007FDA                     u251:
   868  007FDA  EFF7  F03F         	goto	l1095
   869  007FDE                     u250:
   870  007FDE  1E0E               	comf	(___aldiv@quotient+3)^0,f,c
   871  007FE0  1E0D               	comf	(___aldiv@quotient+2)^0,f,c
   872  007FE2  1E0C               	comf	(___aldiv@quotient+1)^0,f,c
   873  007FE4  6C0B               	negf	___aldiv@quotient^0,c
   874  007FE6  0E00               	movlw	0
   875  007FE8  220C               	addwfc	(___aldiv@quotient+1)^0,f,c
   876  007FEA  220D               	addwfc	(___aldiv@quotient+2)^0,f,c
   877  007FEC  220E               	addwfc	(___aldiv@quotient+3)^0,f,c
   878  007FEE                     l1095:
   879  007FEE  C00B  F001         	movff	___aldiv@quotient,?___aldiv
   880  007FF2  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
   881  007FF6  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
   882  007FFA  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
   883  007FFE  0012               	return		;funcret
   884  008000                     __end_of___aldiv:
   885                           	opt callstack 0
   886                           
   887 ;; *************** function _LCD_writeChar *****************
   888 ;; Defined at:
   889 ;;		line 128 in file "./lcd.h"
   890 ;; Parameters:    Size  Location     Type
   891 ;;  data            1    wreg     unsigned char 
   892 ;; Auto vars:     Size  Location     Type
   893 ;;  data            1    1[COMRAM] unsigned char 
   894 ;; Return value:  Size  Location     Type
   895 ;;                  1    wreg      void 
   896 ;; Registers used:
   897 ;;		wreg, status,2, status,0, cstack
   898 ;; Tracked objects:
   899 ;;		On entry : 0/0
   900 ;;		On exit  : 0/0
   901 ;;		Unchanged: 0/0
   902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   903 ;;      Params:         0       0       0       0       0       0       0       0       0
   904 ;;      Locals:         1       0       0       0       0       0       0       0       0
   905 ;;      Temps:          0       0       0       0       0       0       0       0       0
   906 ;;      Totals:         1       0       0       0       0       0       0       0       0
   907 ;;Total ram usage:        1 bytes
   908 ;; Hardware stack levels used:    1
   909 ;; Hardware stack levels required when called:    1
   910 ;; This function calls:
   911 ;;		_LCD_rdy
   912 ;; This function is called by:
   913 ;;		_printCalcResult
   914 ;; This function uses a non-reentrant model
   915 ;;
   916                           
   917                           	psect	text4
   918  007AAA                     __ptext4:
   919                           	opt callstack 0
   920  007AAA                     _LCD_writeChar:
   921                           	opt callstack 28
   922                           
   923                           ;incstack = 0
   924                           ;LCD_writeChar@data stored from wreg
   925  007AAA  6E02               	movwf	LCD_writeChar@data^0,c
   926  007AAC                     
   927                           ;./lcd.h: 129:     LCD_rdy();
   928  007AAC  EC99  F03D         	call	_LCD_rdy	;wreg free
   929  007AB0                     
   930                           ;./lcd.h: 130:     PORTCbits.RC2 = 1;
   931  007AB0  8482               	bsf	130,2,c	;volatile
   932  007AB2                     
   933                           ;./lcd.h: 131:     PORTCbits.RC1 = 0;
   934  007AB2  9282               	bcf	130,1,c	;volatile
   935  007AB4                     
   936                           ;./lcd.h: 133:     PORTCbits.RC0 = 1;
   937  007AB4  8082               	bsf	130,0,c	;volatile
   938  007AB6                     
   939                           ;./lcd.h: 134:     __nop();
   940  007AB6  F000               	nop	
   941  007AB8                     
   942                           ;./lcd.h: 135:     LATD = data;
   943  007AB8  C002  FF8C         	movff	LCD_writeChar@data,3980	;volatile
   944  007ABC                     
   945                           ;./lcd.h: 136:     __nop();
   946  007ABC  F000               	nop	
   947  007ABE                     
   948                           ;./lcd.h: 137:     PORTCbits.RC0 = 0;
   949  007ABE  9082               	bcf	130,0,c	;volatile
   950  007AC0                     
   951                           ;./lcd.h: 138:     __nop();
   952  007AC0  F000               	nop	
   953  007AC2  0012               	return		;funcret
   954  007AC4                     __end_of_LCD_writeChar:
   955                           	opt callstack 0
   956                           
   957 ;; *************** function _ports_init *****************
   958 ;; Defined at:
   959 ;;		line 58 in file "main.c"
   960 ;; Parameters:    Size  Location     Type
   961 ;;		None
   962 ;; Auto vars:     Size  Location     Type
   963 ;;		None
   964 ;; Return value:  Size  Location     Type
   965 ;;                  1    wreg      void 
   966 ;; Registers used:
   967 ;;		wreg, status,2
   968 ;; Tracked objects:
   969 ;;		On entry : 0/0
   970 ;;		On exit  : 0/0
   971 ;;		Unchanged: 0/0
   972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   973 ;;      Params:         0       0       0       0       0       0       0       0       0
   974 ;;      Locals:         0       0       0       0       0       0       0       0       0
   975 ;;      Temps:          0       0       0       0       0       0       0       0       0
   976 ;;      Totals:         0       0       0       0       0       0       0       0       0
   977 ;;Total ram usage:        0 bytes
   978 ;; Hardware stack levels used:    1
   979 ;; This function calls:
   980 ;;		Nothing
   981 ;; This function is called by:
   982 ;;		_main
   983 ;; This function uses a non-reentrant model
   984 ;;
   985                           
   986                           	psect	text5
   987  007B9C                     __ptext5:
   988                           	opt callstack 0
   989  007B9C                     _ports_init:
   990                           	opt callstack 30
   991  007B9C                     
   992                           ;main.c: 59:     ANSELA = 0;
   993  007B9C  0E00               	movlw	0
   994  007B9E  010F               	movlb	15	; () banked
   995  007BA0  6F5B               	movwf	91,b	;volatile
   996                           
   997                           ;main.c: 60:     TRISA = 0;
   998  007BA2  0E00               	movlw	0
   999  007BA4  6E92               	movwf	146,c	;volatile
  1000                           
  1001                           ;main.c: 61:     LATA = 0;
  1002  007BA6  0E00               	movlw	0
  1003  007BA8  6E89               	movwf	137,c	;volatile
  1004                           
  1005                           ;main.c: 63:     ANSELB = 0;
  1006  007BAA  0E00               	movlw	0
  1007  007BAC  6F5C               	movwf	92,b	;volatile
  1008                           
  1009                           ;main.c: 64:     TRISB = 0b00001111;
  1010  007BAE  0E0F               	movlw	15
  1011  007BB0  6E93               	movwf	147,c	;volatile
  1012                           
  1013                           ;main.c: 65:     LATB = 0;
  1014  007BB2  0E00               	movlw	0
  1015  007BB4  6E8A               	movwf	138,c	;volatile
  1016                           
  1017                           ;main.c: 67:     ANSELC = 0;
  1018  007BB6  0E00               	movlw	0
  1019  007BB8  6F5D               	movwf	93,b	;volatile
  1020  007BBA                     
  1021                           ; BSR set to: 15
  1022                           ;main.c: 68:     TRISCbits.TRISC0=0;
  1023  007BBA  9094               	bcf	148,0,c	;volatile
  1024  007BBC                     
  1025                           ; BSR set to: 15
  1026                           ;main.c: 69:     TRISCbits.TRISC2=0;
  1027  007BBC  9494               	bcf	148,2,c	;volatile
  1028  007BBE                     
  1029                           ; BSR set to: 15
  1030                           ;main.c: 70:     TRISCbits.TRISC1=0;
  1031  007BBE  9294               	bcf	148,1,c	;volatile
  1032                           
  1033                           ;main.c: 71:     LATC = 0;
  1034  007BC0  0E00               	movlw	0
  1035  007BC2  6E8B               	movwf	139,c	;volatile
  1036                           
  1037                           ;main.c: 73:     ANSELD = 0;
  1038  007BC4  0E00               	movlw	0
  1039  007BC6  6F5E               	movwf	94,b	;volatile
  1040                           
  1041                           ;main.c: 74:     TRISD = 0;
  1042  007BC8  0E00               	movlw	0
  1043  007BCA  6E95               	movwf	149,c	;volatile
  1044                           
  1045                           ;main.c: 75:     LATD = 0;
  1046  007BCC  0E00               	movlw	0
  1047  007BCE  6E8C               	movwf	140,c	;volatile
  1048  007BD0                     
  1049                           ; BSR set to: 15
  1050  007BD0  0012               	return		;funcret
  1051  007BD2                     __end_of_ports_init:
  1052                           	opt callstack 0
  1053                           
  1054 ;; *************** function _LCD_writeStr *****************
  1055 ;; Defined at:
  1056 ;;		line 110 in file "./lcd.h"
  1057 ;; Parameters:    Size  Location     Type
  1058 ;;  data            2    4[COMRAM] PTR unsigned char 
  1059 ;;		 -> main@message(8), 
  1060 ;; Auto vars:     Size  Location     Type
  1061 ;;  i               2    9[COMRAM] int 
  1062 ;;  length          2    7[COMRAM] short 
  1063 ;; Return value:  Size  Location     Type
  1064 ;;                  1    wreg      void 
  1065 ;; Registers used:
  1066 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1067 ;; Tracked objects:
  1068 ;;		On entry : 0/0
  1069 ;;		On exit  : 0/0
  1070 ;;		Unchanged: 0/0
  1071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1072 ;;      Params:         2       0       0       0       0       0       0       0       0
  1073 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1074 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1075 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1076 ;;Total ram usage:        7 bytes
  1077 ;; Hardware stack levels used:    1
  1078 ;; Hardware stack levels required when called:    1
  1079 ;; This function calls:
  1080 ;;		_LCD_rdy
  1081 ;;		_strlen
  1082 ;; This function is called by:
  1083 ;;		_main
  1084 ;; This function uses a non-reentrant model
  1085 ;;
  1086                           
  1087                           	psect	text6
  1088  007C24                     __ptext6:
  1089                           	opt callstack 0
  1090  007C24                     _LCD_writeStr:
  1091                           	opt callstack 29
  1092  007C24                     
  1093                           ;./lcd.h: 111:     LCD_rdy();
  1094  007C24  EC99  F03D         	call	_LCD_rdy	;wreg free
  1095  007C28                     
  1096                           ;./lcd.h: 112:     PORTCbits.RC2 = 1;
  1097  007C28  8482               	bsf	130,2,c	;volatile
  1098  007C2A                     
  1099                           ;./lcd.h: 113:     PORTCbits.RC1 = 0;
  1100  007C2A  9282               	bcf	130,1,c	;volatile
  1101  007C2C                     
  1102                           ;./lcd.h: 116:     short int length = strlen(data);
  1103  007C2C  C005  F001         	movff	LCD_writeStr@data,strlen@s
  1104  007C30  C006  F002         	movff	LCD_writeStr@data+1,strlen@s+1
  1105  007C34  ECB3  F03D         	call	_strlen	;wreg free
  1106  007C38  C001  F008         	movff	?_strlen,LCD_writeStr@length
  1107  007C3C  C002  F009         	movff	?_strlen+1,LCD_writeStr@length+1
  1108  007C40                     
  1109                           ;./lcd.h: 117:     for (int i = 0; i < length; i++){
  1110  007C40  0E00               	movlw	0
  1111  007C42  6E0B               	movwf	(LCD_writeStr@i+1)^0,c
  1112  007C44  0E00               	movlw	0
  1113  007C46  6E0A               	movwf	LCD_writeStr@i^0,c
  1114  007C48  EF35  F03E         	goto	l1159
  1115  007C4C                     l87:
  1116                           
  1117                           ;./lcd.h: 118:         PORTCbits.RC0 = 1;
  1118  007C4C  8082               	bsf	130,0,c	;volatile
  1119                           
  1120                           ;./lcd.h: 119:         __nop();
  1121  007C4E  F000               	nop	
  1122  007C50                     
  1123                           ;./lcd.h: 120:         LATD = data[i];
  1124  007C50  500A               	movf	LCD_writeStr@i^0,w,c
  1125  007C52  2405               	addwf	LCD_writeStr@data^0,w,c
  1126  007C54  6ED9               	movwf	fsr2l,c
  1127  007C56  500B               	movf	(LCD_writeStr@i+1)^0,w,c
  1128  007C58  2006               	addwfc	(LCD_writeStr@data+1)^0,w,c
  1129  007C5A  6EDA               	movwf	fsr2h,c
  1130  007C5C  50DF               	movf	indf2,w,c
  1131  007C5E  6E8C               	movwf	140,c	;volatile
  1132  007C60                     
  1133                           ;./lcd.h: 121:         __nop();
  1134  007C60  F000               	nop	
  1135  007C62                     
  1136                           ;./lcd.h: 122:         PORTCbits.RC0 = 0;
  1137  007C62  9082               	bcf	130,0,c	;volatile
  1138  007C64                     
  1139                           ;./lcd.h: 123:         __nop();
  1140  007C64  F000               	nop	
  1141  007C66                     
  1142                           ;./lcd.h: 125:     }
  1143  007C66  4A0A               	infsnz	LCD_writeStr@i^0,f,c
  1144  007C68  2A0B               	incf	(LCD_writeStr@i+1)^0,f,c
  1145  007C6A                     l1159:
  1146  007C6A  5008               	movf	LCD_writeStr@length^0,w,c
  1147  007C6C  5C0A               	subwf	LCD_writeStr@i^0,w,c
  1148  007C6E  500B               	movf	(LCD_writeStr@i+1)^0,w,c
  1149  007C70  0A80               	xorlw	128
  1150  007C72  6E07               	movwf	??_LCD_writeStr^0,c
  1151  007C74  5009               	movf	(LCD_writeStr@length+1)^0,w,c
  1152  007C76  0A80               	xorlw	128
  1153  007C78  5807               	subwfb	??_LCD_writeStr^0,w,c
  1154  007C7A  A0D8               	btfss	status,0,c
  1155  007C7C  EF42  F03E         	goto	u321
  1156  007C80  EF44  F03E         	goto	u320
  1157  007C84                     u321:
  1158  007C84  EF26  F03E         	goto	l87
  1159  007C88                     u320:
  1160  007C88  0012               	return		;funcret
  1161  007C8A                     __end_of_LCD_writeStr:
  1162                           	opt callstack 0
  1163                           
  1164 ;; *************** function _strlen *****************
  1165 ;; Defined at:
  1166 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strlen.c"
  1167 ;; Parameters:    Size  Location     Type
  1168 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1169 ;;		 -> main@message(8), 
  1170 ;; Auto vars:     Size  Location     Type
  1171 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1172 ;;		 -> main@message(8), 
  1173 ;; Return value:  Size  Location     Type
  1174 ;;                  2    0[COMRAM] unsigned int 
  1175 ;; Registers used:
  1176 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1177 ;; Tracked objects:
  1178 ;;		On entry : 0/0
  1179 ;;		On exit  : 0/0
  1180 ;;		Unchanged: 0/0
  1181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1182 ;;      Params:         2       0       0       0       0       0       0       0       0
  1183 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1184 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1185 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1186 ;;Total ram usage:        4 bytes
  1187 ;; Hardware stack levels used:    1
  1188 ;; This function calls:
  1189 ;;		Nothing
  1190 ;; This function is called by:
  1191 ;;		_LCD_writeStr
  1192 ;; This function uses a non-reentrant model
  1193 ;;
  1194                           
  1195                           	psect	text7
  1196  007B66                     __ptext7:
  1197                           	opt callstack 0
  1198  007B66                     _strlen:
  1199                           	opt callstack 29
  1200  007B66  C001  F003         	movff	strlen@s,strlen@a
  1201  007B6A  C002  F004         	movff	strlen@s+1,strlen@a+1
  1202  007B6E  EFBB  F03D         	goto	l1049
  1203  007B72                     l1047:
  1204  007B72  4A01               	infsnz	strlen@s^0,f,c
  1205  007B74  2A02               	incf	(strlen@s+1)^0,f,c
  1206  007B76                     l1049:
  1207  007B76  C001  FFD9         	movff	strlen@s,fsr2l
  1208  007B7A  C002  FFDA         	movff	strlen@s+1,fsr2h
  1209  007B7E  50DF               	movf	indf2,w,c
  1210  007B80  A4D8               	btfss	status,2,c
  1211  007B82  EFC5  F03D         	goto	u191
  1212  007B86  EFC7  F03D         	goto	u190
  1213  007B8A                     u191:
  1214  007B8A  EFB9  F03D         	goto	l1047
  1215  007B8E                     u190:
  1216  007B8E  5003               	movf	strlen@a^0,w,c
  1217  007B90  5C01               	subwf	strlen@s^0,w,c
  1218  007B92  6E01               	movwf	?_strlen^0,c
  1219  007B94  5004               	movf	(strlen@a+1)^0,w,c
  1220  007B96  5802               	subwfb	(strlen@s+1)^0,w,c
  1221  007B98  6E02               	movwf	(?_strlen+1)^0,c
  1222  007B9A  0012               	return		;funcret
  1223  007B9C                     __end_of_strlen:
  1224                           	opt callstack 0
  1225                           
  1226 ;; *************** function _LCD_newLine *****************
  1227 ;; Defined at:
  1228 ;;		line 75 in file "./lcd.h"
  1229 ;; Parameters:    Size  Location     Type
  1230 ;;		None
  1231 ;; Auto vars:     Size  Location     Type
  1232 ;;		None
  1233 ;; Return value:  Size  Location     Type
  1234 ;;                  1    wreg      void 
  1235 ;; Registers used:
  1236 ;;		wreg, status,2, status,0, cstack
  1237 ;; Tracked objects:
  1238 ;;		On entry : 0/0
  1239 ;;		On exit  : 0/0
  1240 ;;		Unchanged: 0/0
  1241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1242 ;;      Params:         0       0       0       0       0       0       0       0       0
  1243 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1244 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1245 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1246 ;;Total ram usage:        0 bytes
  1247 ;; Hardware stack levels used:    1
  1248 ;; Hardware stack levels required when called:    2
  1249 ;; This function calls:
  1250 ;;		_LCD_cmd
  1251 ;; This function is called by:
  1252 ;;		_main
  1253 ;; This function uses a non-reentrant model
  1254 ;;
  1255                           
  1256                           	psect	text8
  1257  007A4A                     __ptext8:
  1258                           	opt callstack 0
  1259  007A4A                     _LCD_newLine:
  1260                           	opt callstack 28
  1261  007A4A                     
  1262                           ;./lcd.h: 76:     LCD_cmd(0xC0);
  1263  007A4A  0EC0               	movlw	192
  1264  007A4C  EC48  F03D         	call	_LCD_cmd
  1265  007A50  0012               	return		;funcret
  1266  007A52                     __end_of_LCD_newLine:
  1267                           	opt callstack 0
  1268                           
  1269 ;; *************** function _LCD_init *****************
  1270 ;; Defined at:
  1271 ;;		line 44 in file "./lcd.h"
  1272 ;; Parameters:    Size  Location     Type
  1273 ;;		None
  1274 ;; Auto vars:     Size  Location     Type
  1275 ;;		None
  1276 ;; Return value:  Size  Location     Type
  1277 ;;                  1    wreg      void 
  1278 ;; Registers used:
  1279 ;;		wreg, status,2, status,0, cstack
  1280 ;; Tracked objects:
  1281 ;;		On entry : 0/0
  1282 ;;		On exit  : 0/0
  1283 ;;		Unchanged: 0/0
  1284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1285 ;;      Params:         0       0       0       0       0       0       0       0       0
  1286 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1287 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1288 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1289 ;;Total ram usage:        0 bytes
  1290 ;; Hardware stack levels used:    1
  1291 ;; Hardware stack levels required when called:    3
  1292 ;; This function calls:
  1293 ;;		_LCD_clear
  1294 ;;		_LCD_dispControl
  1295 ;;		_LCD_entryMode
  1296 ;;		_LCD_functionSet
  1297 ;; This function is called by:
  1298 ;;		_main
  1299 ;; This function uses a non-reentrant model
  1300 ;;
  1301                           
  1302                           	psect	text9
  1303  007BD2                     __ptext9:
  1304                           	opt callstack 0
  1305  007BD2                     _LCD_init:
  1306                           	opt callstack 27
  1307  007BD2                     
  1308                           ;./lcd.h: 45:     LCD_clear();
  1309  007BD2  EC21  F03D         	call	_LCD_clear	;wreg free
  1310                           
  1311                           ;./lcd.h: 46:     LCD_functionSet(1, 1, 0);
  1312  007BD6  0E00               	movlw	0
  1313  007BD8  6E04               	movwf	(LCD_functionSet@DL+1)^0,c
  1314  007BDA  0E01               	movlw	1
  1315  007BDC  6E03               	movwf	LCD_functionSet@DL^0,c
  1316  007BDE  0E00               	movlw	0
  1317  007BE0  6E06               	movwf	(LCD_functionSet@N+1)^0,c
  1318  007BE2  0E01               	movlw	1
  1319  007BE4  6E05               	movwf	LCD_functionSet@N^0,c
  1320  007BE6  0E00               	movlw	0
  1321  007BE8  6E08               	movwf	(LCD_functionSet@F+1)^0,c
  1322  007BEA  0E00               	movlw	0
  1323  007BEC  6E07               	movwf	LCD_functionSet@F^0,c
  1324  007BEE  EC83  F03D         	call	_LCD_functionSet	;wreg free
  1325                           
  1326                           ;./lcd.h: 47:     LCD_dispControl(1, 1, 1);
  1327  007BF2  0E00               	movlw	0
  1328  007BF4  6E04               	movwf	(LCD_dispControl@D+1)^0,c
  1329  007BF6  0E01               	movlw	1
  1330  007BF8  6E03               	movwf	LCD_dispControl@D^0,c
  1331  007BFA  0E00               	movlw	0
  1332  007BFC  6E06               	movwf	(LCD_dispControl@C+1)^0,c
  1333  007BFE  0E01               	movlw	1
  1334  007C00  6E05               	movwf	LCD_dispControl@C^0,c
  1335  007C02  0E00               	movlw	0
  1336  007C04  6E08               	movwf	(LCD_dispControl@B+1)^0,c
  1337  007C06  0E01               	movlw	1
  1338  007C08  6E07               	movwf	LCD_dispControl@B^0,c
  1339  007C0A  EC30  F03D         	call	_LCD_dispControl	;wreg free
  1340                           
  1341                           ;./lcd.h: 48:     LCD_entryMode(1, 0);
  1342  007C0E  0E00               	movlw	0
  1343  007C10  6E04               	movwf	(LCD_entryMode@ID+1)^0,c
  1344  007C12  0E01               	movlw	1
  1345  007C14  6E03               	movwf	LCD_entryMode@ID^0,c
  1346  007C16  0E00               	movlw	0
  1347  007C18  6E06               	movwf	(LCD_entryMode@SH+1)^0,c
  1348  007C1A  0E00               	movlw	0
  1349  007C1C  6E05               	movwf	LCD_entryMode@SH^0,c
  1350  007C1E  EC29  F03D         	call	_LCD_entryMode	;wreg free
  1351  007C22  0012               	return		;funcret
  1352  007C24                     __end_of_LCD_init:
  1353                           	opt callstack 0
  1354                           
  1355 ;; *************** function _LCD_functionSet *****************
  1356 ;; Defined at:
  1357 ;;		line 71 in file "./lcd.h"
  1358 ;; Parameters:    Size  Location     Type
  1359 ;;  DL              2    2[COMRAM] short 
  1360 ;;  N               2    4[COMRAM] short 
  1361 ;;  F               2    6[COMRAM] short 
  1362 ;; Auto vars:     Size  Location     Type
  1363 ;;		None
  1364 ;; Return value:  Size  Location     Type
  1365 ;;                  1    wreg      void 
  1366 ;; Registers used:
  1367 ;;		wreg, status,2, status,0, cstack
  1368 ;; Tracked objects:
  1369 ;;		On entry : 0/0
  1370 ;;		On exit  : 0/0
  1371 ;;		Unchanged: 0/0
  1372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1373 ;;      Params:         6       0       0       0       0       0       0       0       0
  1374 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1375 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1376 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1377 ;;Total ram usage:        8 bytes
  1378 ;; Hardware stack levels used:    1
  1379 ;; Hardware stack levels required when called:    2
  1380 ;; This function calls:
  1381 ;;		_LCD_cmd
  1382 ;; This function is called by:
  1383 ;;		_LCD_init
  1384 ;; This function uses a non-reentrant model
  1385 ;;
  1386                           
  1387                           	psect	text10
  1388  007B06                     __ptext10:
  1389                           	opt callstack 0
  1390  007B06                     _LCD_functionSet:
  1391                           	opt callstack 27
  1392  007B06                     
  1393                           ;./lcd.h: 72:     LCD_cmd(0b00100000 | DL << 4 | N << 3 | F << 2);
  1394  007B06  C007  F009         	movff	LCD_functionSet@F,??_LCD_functionSet
  1395  007B0A  90D8               	bcf	status,0,c
  1396  007B0C  3609               	rlcf	??_LCD_functionSet^0,f,c
  1397  007B0E  90D8               	bcf	status,0,c
  1398  007B10  3609               	rlcf	??_LCD_functionSet^0,f,c
  1399  007B12  C005  F00A         	movff	LCD_functionSet@N,??_LCD_functionSet+1
  1400  007B16  90D8               	bcf	status,0,c
  1401  007B18  360A               	rlcf	(??_LCD_functionSet+1)^0,f,c
  1402  007B1A  90D8               	bcf	status,0,c
  1403  007B1C  360A               	rlcf	(??_LCD_functionSet+1)^0,f,c
  1404  007B1E  90D8               	bcf	status,0,c
  1405  007B20  360A               	rlcf	(??_LCD_functionSet+1)^0,f,c
  1406  007B22  3803               	swapf	LCD_functionSet@DL^0,w,c
  1407  007B24  0BF0               	andlw	240
  1408  007B26  100A               	iorwf	(??_LCD_functionSet+1)^0,w,c
  1409  007B28  1009               	iorwf	??_LCD_functionSet^0,w,c
  1410  007B2A  0920               	iorlw	32
  1411  007B2C  EC48  F03D         	call	_LCD_cmd
  1412  007B30  0012               	return		;funcret
  1413  007B32                     __end_of_LCD_functionSet:
  1414                           	opt callstack 0
  1415                           
  1416 ;; *************** function _LCD_entryMode *****************
  1417 ;; Defined at:
  1418 ;;		line 59 in file "./lcd.h"
  1419 ;; Parameters:    Size  Location     Type
  1420 ;;  ID              2    2[COMRAM] short 
  1421 ;;  SH              2    4[COMRAM] short 
  1422 ;; Auto vars:     Size  Location     Type
  1423 ;;		None
  1424 ;; Return value:  Size  Location     Type
  1425 ;;                  1    wreg      void 
  1426 ;; Registers used:
  1427 ;;		wreg, status,2, status,0, cstack
  1428 ;; Tracked objects:
  1429 ;;		On entry : 0/0
  1430 ;;		On exit  : 0/0
  1431 ;;		Unchanged: 0/0
  1432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1433 ;;      Params:         4       0       0       0       0       0       0       0       0
  1434 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1435 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1436 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1437 ;;Total ram usage:        4 bytes
  1438 ;; Hardware stack levels used:    1
  1439 ;; Hardware stack levels required when called:    2
  1440 ;; This function calls:
  1441 ;;		_LCD_cmd
  1442 ;; This function is called by:
  1443 ;;		_LCD_init
  1444 ;;		_main
  1445 ;; This function uses a non-reentrant model
  1446 ;;
  1447                           
  1448                           	psect	text11
  1449  007A52                     __ptext11:
  1450                           	opt callstack 0
  1451  007A52                     _LCD_entryMode:
  1452                           	opt callstack 27
  1453  007A52                     
  1454                           ;./lcd.h: 60:     LCD_cmd(0b00000100 | ID << 1 | SH);
  1455  007A52  5003               	movf	LCD_entryMode@ID^0,w,c
  1456  007A54  2403               	addwf	LCD_entryMode@ID^0,w,c
  1457  007A56  1005               	iorwf	LCD_entryMode@SH^0,w,c
  1458  007A58  0904               	iorlw	4
  1459  007A5A  EC48  F03D         	call	_LCD_cmd
  1460  007A5E  0012               	return		;funcret
  1461  007A60                     __end_of_LCD_entryMode:
  1462                           	opt callstack 0
  1463                           
  1464 ;; *************** function _LCD_dispControl *****************
  1465 ;; Defined at:
  1466 ;;		line 63 in file "./lcd.h"
  1467 ;; Parameters:    Size  Location     Type
  1468 ;;  D               2    2[COMRAM] short 
  1469 ;;  C               2    4[COMRAM] short 
  1470 ;;  B               2    6[COMRAM] short 
  1471 ;; Auto vars:     Size  Location     Type
  1472 ;;		None
  1473 ;; Return value:  Size  Location     Type
  1474 ;;                  1    wreg      void 
  1475 ;; Registers used:
  1476 ;;		wreg, status,2, status,0, cstack
  1477 ;; Tracked objects:
  1478 ;;		On entry : 0/0
  1479 ;;		On exit  : 0/0
  1480 ;;		Unchanged: 0/0
  1481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1482 ;;      Params:         6       0       0       0       0       0       0       0       0
  1483 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1484 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1485 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1486 ;;Total ram usage:        7 bytes
  1487 ;; Hardware stack levels used:    1
  1488 ;; Hardware stack levels required when called:    2
  1489 ;; This function calls:
  1490 ;;		_LCD_cmd
  1491 ;; This function is called by:
  1492 ;;		_LCD_init
  1493 ;;		_main
  1494 ;; This function uses a non-reentrant model
  1495 ;;
  1496                           
  1497                           	psect	text12
  1498  007A60                     __ptext12:
  1499                           	opt callstack 0
  1500  007A60                     _LCD_dispControl:
  1501                           	opt callstack 27
  1502  007A60                     
  1503                           ;./lcd.h: 64:     LCD_cmd(0b00001000 | D << 2 | C << 1 | B);
  1504  007A60  90D8               	bcf	status,0,c
  1505  007A62  3405               	rlcf	LCD_dispControl@C^0,w,c
  1506  007A64  6E09               	movwf	??_LCD_dispControl^0,c
  1507  007A66  4403               	rlncf	LCD_dispControl@D^0,w,c
  1508  007A68  46E8               	rlncf	wreg,f,c
  1509  007A6A  0BFC               	andlw	252
  1510  007A6C  1009               	iorwf	??_LCD_dispControl^0,w,c
  1511  007A6E  1007               	iorwf	LCD_dispControl@B^0,w,c
  1512  007A70  0908               	iorlw	8
  1513  007A72  EC48  F03D         	call	_LCD_cmd
  1514  007A76  0012               	return		;funcret
  1515  007A78                     __end_of_LCD_dispControl:
  1516                           	opt callstack 0
  1517                           
  1518 ;; *************** function _LCD_clear *****************
  1519 ;; Defined at:
  1520 ;;		line 51 in file "./lcd.h"
  1521 ;; Parameters:    Size  Location     Type
  1522 ;;		None
  1523 ;; Auto vars:     Size  Location     Type
  1524 ;;		None
  1525 ;; Return value:  Size  Location     Type
  1526 ;;                  1    wreg      void 
  1527 ;; Registers used:
  1528 ;;		wreg, status,2, status,0, cstack
  1529 ;; Tracked objects:
  1530 ;;		On entry : 0/0
  1531 ;;		On exit  : 0/0
  1532 ;;		Unchanged: 0/0
  1533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1534 ;;      Params:         0       0       0       0       0       0       0       0       0
  1535 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1536 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1537 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1538 ;;Total ram usage:        0 bytes
  1539 ;; Hardware stack levels used:    1
  1540 ;; Hardware stack levels required when called:    2
  1541 ;; This function calls:
  1542 ;;		_LCD_cmd
  1543 ;; This function is called by:
  1544 ;;		_LCD_init
  1545 ;;		_main
  1546 ;; This function uses a non-reentrant model
  1547 ;;
  1548                           
  1549                           	psect	text13
  1550  007A42                     __ptext13:
  1551                           	opt callstack 0
  1552  007A42                     _LCD_clear:
  1553                           	opt callstack 27
  1554  007A42                     
  1555                           ;./lcd.h: 52:     LCD_cmd(0b00000001);
  1556  007A42  0E01               	movlw	1
  1557  007A44  EC48  F03D         	call	_LCD_cmd
  1558  007A48  0012               	return		;funcret
  1559  007A4A                     __end_of_LCD_clear:
  1560                           	opt callstack 0
  1561                           
  1562 ;; *************** function _LCD_cursor *****************
  1563 ;; Defined at:
  1564 ;;		line 67 in file "./lcd.h"
  1565 ;; Parameters:    Size  Location     Type
  1566 ;;  SC              2    2[COMRAM] short 
  1567 ;;  RL              2    4[COMRAM] short 
  1568 ;; Auto vars:     Size  Location     Type
  1569 ;;		None
  1570 ;; Return value:  Size  Location     Type
  1571 ;;                  1    wreg      void 
  1572 ;; Registers used:
  1573 ;;		wreg, status,2, status,0, cstack
  1574 ;; Tracked objects:
  1575 ;;		On entry : 0/0
  1576 ;;		On exit  : 0/0
  1577 ;;		Unchanged: 0/0
  1578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1579 ;;      Params:         4       0       0       0       0       0       0       0       0
  1580 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1581 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1582 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1583 ;;Total ram usage:        5 bytes
  1584 ;; Hardware stack levels used:    1
  1585 ;; Hardware stack levels required when called:    2
  1586 ;; This function calls:
  1587 ;;		_LCD_cmd
  1588 ;; This function is called by:
  1589 ;;		_main
  1590 ;; This function uses a non-reentrant model
  1591 ;;
  1592                           
  1593                           	psect	text14
  1594  007AC4                     __ptext14:
  1595                           	opt callstack 0
  1596  007AC4                     _LCD_cursor:
  1597                           	opt callstack 28
  1598  007AC4                     
  1599                           ;./lcd.h: 68:     LCD_cmd(0b00010000 | SC << 3 | RL << 2);
  1600  007AC4  C005  F007         	movff	LCD_cursor@RL,??_LCD_cursor
  1601  007AC8  90D8               	bcf	status,0,c
  1602  007ACA  3607               	rlcf	??_LCD_cursor^0,f,c
  1603  007ACC  90D8               	bcf	status,0,c
  1604  007ACE  3607               	rlcf	??_LCD_cursor^0,f,c
  1605  007AD0  3803               	swapf	LCD_cursor@SC^0,w,c
  1606  007AD2  42E8               	rrncf	wreg,f,c
  1607  007AD4  0BF8               	andlw	248
  1608  007AD6  1007               	iorwf	??_LCD_cursor^0,w,c
  1609  007AD8  0910               	iorlw	16
  1610  007ADA  EC48  F03D         	call	_LCD_cmd
  1611  007ADE  0012               	return		;funcret
  1612  007AE0                     __end_of_LCD_cursor:
  1613                           	opt callstack 0
  1614                           
  1615 ;; *************** function _LCD_cmd *****************
  1616 ;; Defined at:
  1617 ;;		line 79 in file "./lcd.h"
  1618 ;; Parameters:    Size  Location     Type
  1619 ;;  cmd             1    wreg     unsigned char 
  1620 ;; Auto vars:     Size  Location     Type
  1621 ;;  cmd             1    1[COMRAM] unsigned char 
  1622 ;; Return value:  Size  Location     Type
  1623 ;;                  1    wreg      void 
  1624 ;; Registers used:
  1625 ;;		wreg, status,2, status,0, cstack
  1626 ;; Tracked objects:
  1627 ;;		On entry : 0/0
  1628 ;;		On exit  : 0/0
  1629 ;;		Unchanged: 0/0
  1630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1631 ;;      Params:         0       0       0       0       0       0       0       0       0
  1632 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1633 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1634 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1635 ;;Total ram usage:        1 bytes
  1636 ;; Hardware stack levels used:    1
  1637 ;; Hardware stack levels required when called:    1
  1638 ;; This function calls:
  1639 ;;		_LCD_rdy
  1640 ;; This function is called by:
  1641 ;;		_LCD_clear
  1642 ;;		_LCD_entryMode
  1643 ;;		_LCD_dispControl
  1644 ;;		_LCD_cursor
  1645 ;;		_LCD_functionSet
  1646 ;;		_LCD_newLine
  1647 ;;		_LCD_returnHome
  1648 ;; This function uses a non-reentrant model
  1649 ;;
  1650                           
  1651                           	psect	text15
  1652  007A90                     __ptext15:
  1653                           	opt callstack 0
  1654  007A90                     _LCD_cmd:
  1655                           	opt callstack 28
  1656                           
  1657                           ;incstack = 0
  1658                           ;LCD_cmd@cmd stored from wreg
  1659  007A90  6E02               	movwf	LCD_cmd@cmd^0,c
  1660  007A92                     
  1661                           ;./lcd.h: 80:     LCD_rdy();
  1662  007A92  EC99  F03D         	call	_LCD_rdy	;wreg free
  1663  007A96                     
  1664                           ;./lcd.h: 81:     PORTCbits.RC2=0;
  1665  007A96  9482               	bcf	130,2,c	;volatile
  1666  007A98                     
  1667                           ;./lcd.h: 82:     PORTCbits.RC1=0;
  1668  007A98  9282               	bcf	130,1,c	;volatile
  1669  007A9A                     
  1670                           ;./lcd.h: 83:     PORTCbits.RC0=1;
  1671  007A9A  8082               	bsf	130,0,c	;volatile
  1672  007A9C                     
  1673                           ;./lcd.h: 84:     __nop();
  1674  007A9C  F000               	nop	
  1675  007A9E                     
  1676                           ;./lcd.h: 85:     LATD = cmd;
  1677  007A9E  C002  FF8C         	movff	LCD_cmd@cmd,3980	;volatile
  1678  007AA2                     
  1679                           ;./lcd.h: 86:     __nop();
  1680  007AA2  F000               	nop	
  1681  007AA4                     
  1682                           ;./lcd.h: 87:     PORTCbits.RC0=0;
  1683  007AA4  9082               	bcf	130,0,c	;volatile
  1684  007AA6                     
  1685                           ;./lcd.h: 88:     __nop();
  1686  007AA6  F000               	nop	
  1687  007AA8  0012               	return		;funcret
  1688  007AAA                     __end_of_LCD_cmd:
  1689                           	opt callstack 0
  1690                           
  1691 ;; *************** function _LCD_rdy *****************
  1692 ;; Defined at:
  1693 ;;		line 91 in file "./lcd.h"
  1694 ;; Parameters:    Size  Location     Type
  1695 ;;		None
  1696 ;; Auto vars:     Size  Location     Type
  1697 ;;  busy            1    0[COMRAM] unsigned char 
  1698 ;; Return value:  Size  Location     Type
  1699 ;;                  1    wreg      void 
  1700 ;; Registers used:
  1701 ;;		wreg, status,2, status,0
  1702 ;; Tracked objects:
  1703 ;;		On entry : 0/0
  1704 ;;		On exit  : 0/0
  1705 ;;		Unchanged: 0/0
  1706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1707 ;;      Params:         0       0       0       0       0       0       0       0       0
  1708 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1709 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1710 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1711 ;;Total ram usage:        1 bytes
  1712 ;; Hardware stack levels used:    1
  1713 ;; This function calls:
  1714 ;;		Nothing
  1715 ;; This function is called by:
  1716 ;;		_LCD_cmd
  1717 ;;		_LCD_writeStr
  1718 ;;		_LCD_writeChar
  1719 ;; This function uses a non-reentrant model
  1720 ;;
  1721                           
  1722                           	psect	text16
  1723  007B32                     __ptext16:
  1724                           	opt callstack 0
  1725  007B32                     _LCD_rdy:
  1726                           	opt callstack 28
  1727  007B32                     
  1728                           ;./lcd.h: 92:     char busy = 0x80;
  1729  007B32  0E80               	movlw	128
  1730  007B34  6E01               	movwf	LCD_rdy@busy^0,c
  1731  007B36                     
  1732                           ;./lcd.h: 93:     TRISD = 0b11111111;
  1733  007B36  6895               	setf	149,c	;volatile
  1734  007B38                     
  1735                           ;./lcd.h: 94:     PORTCbits.RC2 = 0;
  1736  007B38  9482               	bcf	130,2,c	;volatile
  1737  007B3A                     
  1738                           ;./lcd.h: 95:     PORTCbits.RC1 = 1;
  1739  007B3A  8282               	bsf	130,1,c	;volatile
  1740                           
  1741                           ;./lcd.h: 98:     while (busy) {
  1742  007B3C  EFA8  F03D         	goto	l813
  1743  007B40                     l81:
  1744                           
  1745                           ;./lcd.h: 99:         PORTCbits.RC0 = 1;
  1746  007B40  8082               	bsf	130,0,c	;volatile
  1747                           
  1748                           ;./lcd.h: 100:         __nop();
  1749  007B42  F000               	nop	
  1750  007B44                     
  1751                           ;./lcd.h: 101:         busy = PORTD & 0x80;
  1752  007B44  5083               	movf	131,w,c	;volatile
  1753  007B46  0B80               	andlw	128
  1754  007B48  6E01               	movwf	LCD_rdy@busy^0,c
  1755  007B4A                     
  1756                           ;./lcd.h: 102:         __nop();
  1757  007B4A  F000               	nop	
  1758  007B4C                     
  1759                           ;./lcd.h: 103:         PORTCbits.RC0 = 0;
  1760  007B4C  9082               	bcf	130,0,c	;volatile
  1761  007B4E                     
  1762                           ;./lcd.h: 104:         __nop();
  1763  007B4E  F000               	nop	
  1764  007B50                     l813:
  1765                           
  1766                           ;./lcd.h: 98:     while (busy) {
  1767  007B50  5001               	movf	LCD_rdy@busy^0,w,c
  1768  007B52  A4D8               	btfss	status,2,c
  1769  007B54  EFAE  F03D         	goto	u11
  1770  007B58  EFB0  F03D         	goto	u10
  1771  007B5C                     u11:
  1772  007B5C  EFA0  F03D         	goto	l81
  1773  007B60                     u10:
  1774  007B60                     
  1775                           ;./lcd.h: 107:     TRISD = 0b00000000;
  1776  007B60  0E00               	movlw	0
  1777  007B62  6E95               	movwf	149,c	;volatile
  1778  007B64  0012               	return		;funcret
  1779  007B66                     __end_of_LCD_rdy:
  1780                           	opt callstack 0
  1781  0000                     
  1782                           	psect	rparam
  1783  0000                     tosu	equ	0xFFF
  1784                           tosh	equ	0xFFE
  1785                           tosl	equ	0xFFD
  1786                           stkptr	equ	0xFFC
  1787                           pclatu	equ	0xFFB
  1788                           pclath	equ	0xFFA
  1789                           pcl	equ	0xFF9
  1790                           tblptru	equ	0xFF8
  1791                           tblptrh	equ	0xFF7
  1792                           tblptrl	equ	0xFF6
  1793                           tablat	equ	0xFF5
  1794                           prodh	equ	0xFF4
  1795                           prodl	equ	0xFF3
  1796                           indf0	equ	0xFEF
  1797                           postinc0	equ	0xFEE
  1798                           postdec0	equ	0xFED
  1799                           preinc0	equ	0xFEC
  1800                           plusw0	equ	0xFEB
  1801                           fsr0h	equ	0xFEA
  1802                           fsr0l	equ	0xFE9
  1803                           wreg	equ	0xFE8
  1804                           indf1	equ	0xFE7
  1805                           postinc1	equ	0xFE6
  1806                           postdec1	equ	0xFE5
  1807                           preinc1	equ	0xFE4
  1808                           plusw1	equ	0xFE3
  1809                           fsr1h	equ	0xFE2
  1810                           fsr1l	equ	0xFE1
  1811                           bsr	equ	0xFE0
  1812                           indf2	equ	0xFDF
  1813                           postinc2	equ	0xFDE
  1814                           postdec2	equ	0xFDD
  1815                           preinc2	equ	0xFDC
  1816                           plusw2	equ	0xFDB
  1817                           fsr2h	equ	0xFDA
  1818                           fsr2l	equ	0xFD9
  1819                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        24
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     35      59
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 8
		 -> main@message(COMRAM[8]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 8
		 -> main@message(COMRAM[8]), 

    LCD_writeStr@data	PTR unsigned char  size(2) Largest target is 8
		 -> main@message(COMRAM[8]), 


Critical Paths under _main in COMRAM

    _main->_printCalcResult
    _printCalcResult->___aldiv
    _LCD_writeChar->_LCD_rdy
    _LCD_writeStr->_strlen
    _LCD_newLine->_LCD_cmd
    _LCD_init->_LCD_functionSet
    _LCD_functionSet->_LCD_cmd
    _LCD_entryMode->_LCD_cmd
    _LCD_dispControl->_LCD_cmd
    _LCD_clear->_LCD_cmd
    _LCD_cursor->_LCD_cmd
    _LCD_cmd->_LCD_rdy

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                16    16      0    4821
                                             19 COMRAM    16    16      0
                          _LCD_clear
                         _LCD_cursor
                    _LCD_dispControl
                      _LCD_entryMode
                           _LCD_init
                        _LCD_newLine
                       _LCD_writeStr
                         _ports_init
                    _printCalcResult
 ---------------------------------------------------------------------------------
 (1) _printCalcResult                                      5     1      4    1097
                                             14 COMRAM     5     1      4
                      _LCD_writeChar
                            ___aldiv
                            ___almod
 ---------------------------------------------------------------------------------
 (2) ___almod                                             10     2      8     448
                                              0 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     452
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (2) _LCD_writeChar                                        1     1      0      30
                                              1 COMRAM     1     1      0
                            _LCD_rdy
 ---------------------------------------------------------------------------------
 (1) _ports_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_writeStr                                         7     5      2     370
                                              4 COMRAM     7     5      2
                            _LCD_rdy
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _LCD_newLine                                          0     0      0      30
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             0     0      0    1664
                          _LCD_clear
                    _LCD_dispControl
                      _LCD_entryMode
                    _LCD_functionSet
 ---------------------------------------------------------------------------------
 (2) _LCD_functionSet                                      8     2      6     324
                                              2 COMRAM     8     2      6
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_entryMode                                        4     0      4     530
                                              2 COMRAM     4     0      4
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_dispControl                                      7     1      6     780
                                              2 COMRAM     7     1      6
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_clear                                            0     0      0      30
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (1) _LCD_cursor                                           5     1      4     226
                                              2 COMRAM     5     1      4
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_cmd                                              1     1      0      30
                                              1 COMRAM     1     1      0
                            _LCD_rdy
 ---------------------------------------------------------------------------------
 (3) _LCD_rdy                                              1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_clear
     _LCD_cmd
       _LCD_rdy
   _LCD_cursor
     _LCD_cmd
       _LCD_rdy
   _LCD_dispControl
     _LCD_cmd
       _LCD_rdy
   _LCD_entryMode
     _LCD_cmd
       _LCD_rdy
   _LCD_init
     _LCD_clear
       _LCD_cmd
         _LCD_rdy
     _LCD_dispControl
       _LCD_cmd
         _LCD_rdy
     _LCD_entryMode
       _LCD_cmd
         _LCD_rdy
     _LCD_functionSet
       _LCD_cmd
         _LCD_rdy
   _LCD_newLine
     _LCD_cmd
       _LCD_rdy
   _LCD_writeStr
     _LCD_rdy
     _strlen
   _ports_init
   _printCalcResult
     _LCD_writeChar
       _LCD_rdy
     ___aldiv
     ___almod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     23      3B       1       62.1%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3B       6        0.0%
DATA                 0      0      3B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sun Nov 29 12:42:33 2020

                      l53 7C22                        l62 7A5E                        l71 7B30  
                      l56 7A48                        l81 7B40                        l65 7A76  
                      l74 7A50                        l83 7B64                        l68 7ADE  
                      l92 7AC2                        l77 7AA8                        l87 7C4C  
                      l89 7C88                        u10 7B60                        u11 7B5C  
            __CFG_CP0$OFF 000000              __CFG_CP1$OFF 000000              __CFG_CP2$OFF 000000  
            __CFG_CP3$OFF 000000               __CFG_LVP$ON 000000                       l210 7DF6  
                     l115 7D0A                       l109 7BD0                       l197 7FFE  
                     l801 7B38                       l811 7B4E                       l803 7B3A  
                     l805 7B44                       l813 7B50                       l821 7A98  
                     l815 7B60                       l807 7B4A                       l831 7AA4  
                     l823 7A9A                       l809 7B4C                       l833 7AA6  
                     l825 7A9C                       l817 7A92                       l827 7A9E  
                     l819 7A96                       l835 7A42                       l829 7AA2  
                     l861 7AB6                       l853 7AAC                       l863 7AB8  
                     l855 7AB0                       l865 7ABC                       l857 7AB2  
                     l955 7A4A                       l795 7B9A                       l867 7ABE  
                     l859 7AB4                       l797 7B32                       l981 7BBA  
                     l869 7AC0                       l799 7B36                       l983 7BBC  
                     l985 7BBE                       l979 7B9C              __CFG_CPB$OFF 000000  
                     u200 7F06                       u201 7F02                       u210 7F28  
                     u211 7F24                       u220 7F62                       u300 7DA6  
                     u221 7F5E                       u301 7DA2                       u230 7F84  
                     u310 7DD6                       u231 7F80                       u311 7DD2  
                     u320 7C88                       u240 7FAC                       u321 7C84  
                     u241 7FA8                       u250 7FDE                       u330 7D0A  
                     u251 7FDA                       u331 7D06                       u260 7D1E  
                     u261 7D1A                       u341 7E02                       u190 7B8E  
                     u270 7D40                       u350 7E5E                       u191 7B8A  
                     u271 7D3C                       u351 7E5A                       u280 7D66  
                     u281 7D62                       u290 7D88              __CFG_CPD$OFF 000000  
                     u291 7D84                       u367 7EC0               ?_LCD_cursor 0003  
                     wreg 000FE8    __size_of_LCD_entryMode 000E  __size_of_LCD_dispControl 0018  
         __end_of_LCD_cmd 7AAA           __end_of_LCD_rdy 7B66                      l1101 7D10  
                    l1111 7D50                      l1103 7D1E                      l1041 7A60  
                    l1121 7DA6                      l1113 7D66                      l1105 7D2E  
                    l1201 7E86                      l1043 7A52                      l1051 7B8E  
                    l1131 7DE6                      l1123 7DB6                      l1115 7D6E  
                    l1107 7D32                      l1203 7EA2                      l1045 7B66  
                    l1141 7C28                      l1061 7F16                      l1125 7DC0  
                    l1117 7D7A                      l1109 7D40                      l1205 7EB6  
                    l1039 7B06                      l1135 7BD2                      l1047 7B72  
                    l1151 7C60                      l1143 7C2A                      l1071 7F4C  
                    l1063 7F1A                      l1055 7EF4                      l1119 7D88  
                    l1127 7DC6                      l1207 7ECC                      l1137 7AC4  
                    l1049 7B76                      l1153 7C62                      l1145 7C2C  
                    l1081 7F8E                      l1073 7F62                      l1065 7F28  
                    l1057 7EF8                      l1129 7DD6                      l1161 7C8A  
                    l1209 7EE8                      l1155 7C64                      l1147 7C40  
                    l1139 7C24                      l1083 7FAC                      l1075 7F6A  
                    l1091 7FCE                      l1067 7F38                      l1059 7F06  
                    l1163 7C8E                      l1171 7CF4                      l1157 7C66  
                    l1149 7C50                      l1093 7FDE                      l1085 7FBC  
                    l1077 7F76                      l1069 7F3C                      l1165 7CB6  
                    l1181 7E1E                      l1173 7DF8                      l1159 7C6A  
                    l1095 7FEE                      l1087 7FBE                      l1079 7F84  
                    l1167 7CBA                      l1191 7E3E                      l1183 7E22  
                    l1175 7E0A                      l1089 7FC8                      l1169 7CC0  
                    l1193 7E42                      l1177 7E0E                      l1099 7D0C  
                    l1195 7E5E                      l1179 7E12                      l1197 7E72  
                    l1189 7E2A                      l1199 7E72                      _LATA 000F89  
                    _LATB 000F8A                      _LATC 000F8B                      _LATD 000F8C  
__size_of_printCalcResult 0082               main@message 0016              ?_LCD_newLine 0001  
                    _main 7DF8                      fsr2h 000FDA                      indf2 000FDF  
                    fsr1l 000FE1                      fsr2l 000FD9             __CFG_BORV$190 000000  
                    start 0000             __CFG_IESO$OFF 000000        __size_of_LCD_clear 0008  
           __CFG_MCLRE$ON 000000              ___param_bank 000000          __end_of_LCD_init 7C24  
         __end_of___aldiv 8000           __end_of___almod 7DF8                     ?_main 0001  
                   _PORTD 000F83                     _TRISA 000F92                     _TRISB 000F93  
                   _TRISD 000F95              main@key_vals 0024             __CFG_WRT0$OFF 000000  
           __CFG_WRT1$OFF 000000             __CFG_WRT2$OFF 000000             __CFG_WRT3$OFF 000000  
          __CFG_EBTR0$OFF 000000            __CFG_FCMEN$OFF 000000            __CFG_EBTR1$OFF 000000  
          __CFG_EBTR2$OFF 000000            __CFG_EBTR3$OFF 000000             __CFG_WRTB$OFF 000000  
           __CFG_WRTC$OFF 000000             __CFG_WRTD$OFF 000000    __size_of_LCD_writeChar 001A  
          __CFG_EBTRB$OFF 000000                     main@i 0022                     tablat 000FF5  
                   plusw1 000FE3                     plusw2 000FDB                     status 000FD8  
          __CFG_T3CMX$RC0 000000            __CFG_ICPRT$OFF 000000            __CFG_PBADEN$ON 000000  
     __size_of_LCD_cursor 001C             ?_LCD_writeStr 0005             _LCD_entryMode 7A52  
         __initialization 7AE0              __end_of_main 7EF4               LCD_rdy@busy 0001  
          __CFG_PCLKEN$ON 000000           LCD_entryMode@ID 0003           LCD_entryMode@SH 0005  
                  ??_main 0014             __activetblptr 000000                 ??_LCD_cmd 0002  
               ??_LCD_rdy 0001         __end_of_LCD_clear 7A4A            __CFG_SDOMX$RB3 000000  
         __CFG_CCP2MX$RC1 000000  __size_of_LCD_functionSet 002C                    _ANSELA 000F5B  
                  _ANSELB 000F5C                    _ANSELC 000F5D                    _ANSELD 000F5E  
          __CFG_WDTEN$OFF 000000         ??_LCD_dispControl 0009         ??_printCalcResult 0013  
          ??_LCD_writeStr 0007            ?_LCD_entryMode 0003            __CFG_XINST$OFF 000000  
           _LCD_writeChar 7AAA                 ??___aldiv 0009                 ??___almod 0009  
          __CFG_STVREN$ON 000000                    _strlen 7B66              __pdataCOMRAM 0024  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
    __CFG_LS48MHZ$SYS24X4 000000                __accesstop 0060   __end_of__initialization 7B00  
               ?_LCD_init 0001             ___rparam_used 000001      __size_of_LCD_newLine 0008  
          ?_LCD_writeChar 0001            __pcstackCOMRAM 0001          __CFG_nPWRTEN$OFF 000000  
            LCD_cursor@SC 0003              LCD_cursor@RL 0005              ??_LCD_cursor 0007  
       ??_LCD_functionSet 0009                ??_LCD_init 000B           ??_LCD_entryMode 0007  
      __end_of_LCD_cursor 7AE0         __CFG_PLLSEL$PLL4X 000000                   ?_strlen 0001  
                 _LCD_cmd 7A90                   _LCD_rdy 7B32      __end_of_LCD_writeStr 7C8A  
         ??_LCD_writeChar 0002                   __Hparam 0000                   __Lparam 0000  
                 ___aldiv 7EF4                   ___almod 7D0C          LCD_functionSet@F 0007  
        LCD_functionSet@N 0005                   __pcinit 7AE0          LCD_writeStr@data 0005  
                 __ramtop 0800                   __ptext0 7DF8                   __ptext1 7C8A  
                 __ptext2 7D0C                   __ptext3 7EF4                   __ptext4 7AAA  
                 __ptext5 7B9C                   __ptext6 7C24                   __ptext7 7B66  
                 __ptext8 7A4A                   __ptext9 7BD2           __size_of_strlen 0036  
        ___aldiv@dividend 0001           _LCD_dispControl 7A60           _printCalcResult 7C8A  
               _LCD_clear 7A42      end_of_initialization 7B00     printCalcResult@modulo 0013  
   printCalcResult@result 000F          ___aldiv@quotient 000B                   postdec1 000FE5  
                 postinc0 000FEE                   strlen@a 0003                   strlen@s 0001  
               _PORTCbits 000F82                 _TRISCbits 000F94                _ports_init 7B9C  
              ?_LCD_clear 0001         __size_of_LCD_init 0052   __end_of_LCD_dispControl 7A78  
           __pidataCOMRAM 7A78     __size_of_LCD_writeStr 0066                LCD_cmd@cmd 0002  
 __end_of_printCalcResult 7D0C            __end_of_strlen 7B9C       start_initialization 7AE0  
         _LCD_functionSet 7B06             ??_LCD_newLine 0003           __CFG_nLPBOR$OFF 000000  
            _LCD_writeStr 7C24                  ??_strlen 0003                  ?_LCD_cmd 0001  
                ?_LCD_rdy 0001               ?_ports_init 0001               ??_LCD_clear 0003  
   __end_of_LCD_entryMode 7A60       __end_of_LCD_newLine 7A52        LCD_writeStr@length 0008  
                ?___aldiv 0001                  ?___almod 0001             LCD_writeStr@i 000A  
 __end_of_LCD_functionSet 7B32          ?_LCD_dispControl 0003          ___almod@dividend 0001  
        ?_printCalcResult 000F           ___aldiv@divisor 0005           ___aldiv@counter 0009  
                _LCD_init 7BD2     __end_of_LCD_writeChar 7AC4          __CFG_WDTPS$32768 000000  
               main@F5405 0034         LCD_writeChar@data 0002       __size_of_ports_init 0036  
       __CFG_CFGPLLEN$OFF 000000          __size_of_LCD_cmd 001A          __size_of_LCD_rdy 0034  
               copy_data0 7AF4               _LCD_newLine 7A4A                  __Hrparam 0000  
                __Lrparam 0000        __CFG_BOREN$SBORDIS 000000          __size_of___aldiv 010C  
        __size_of___almod 00EC          ?_LCD_functionSet 0003         LCD_functionSet@DL 0003  
                __ptext10 7B06                  __ptext11 7A52                  __ptext12 7A60  
                __ptext13 7A42                  __ptext14 7AC4                  __ptext15 7A90  
                __ptext16 7B32           ___almod@divisor 0005           ___almod@counter 0009  
           __size_of_main 00FC          LCD_dispControl@B 0007          LCD_dispControl@C 0005  
        LCD_dispControl@D 0003                _LCD_cursor 7AC4              ??_ports_init 0001  
    __CFG_CPUDIV$NOCLKDIV 000000        __end_of_ports_init 7BD2              ___aldiv@sign 000A  
      __CFG_FOSC$INTOSCIO 000000              ___almod@sign 000A  
