

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sun Nov 29 22:50:16 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    23                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    24  0000                     
    25                           ; Version 2.10
    26                           ; Generated 31/07/2019 GMT
    27                           ; 
    28                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC18F45K50 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     
    60                           	psect	idataCOMRAM
    61  000AF6                     __pidataCOMRAM:
    62                           	opt callstack 0
    63                           
    64                           ;initializer for main@key_vals
    65  000AF6  31                 	db	49
    66  000AF7  32                 	db	50
    67  000AF8  33                 	db	51
    68  000AF9  2B                 	db	43
    69  000AFA  34                 	db	52
    70  000AFB  35                 	db	53
    71  000AFC  36                 	db	54
    72  000AFD  2D                 	db	45
    73  000AFE  37                 	db	55
    74  000AFF  38                 	db	56
    75  000B00  39                 	db	57
    76  000B01  2A                 	db	42
    77  000B02  52                 	db	82
    78  000B03  30                 	db	48
    79  000B04  23                 	db	35
    80  000B05  2F                 	db	47
    81  0000                     _ANSELD	set	3934
    82  0000                     _ANSELC	set	3933
    83  0000                     _ANSELB	set	3932
    84  0000                     _ANSELA	set	3931
    85  0000                     _PORTB	set	3969
    86  0000                     _LATC	set	3979
    87  0000                     _TRISCbits	set	3988
    88  0000                     _WPUB	set	3973
    89  0000                     _INTCON2	set	4081
    90  0000                     _LATB	set	3978
    91  0000                     _TRISB	set	3987
    92  0000                     _LATA	set	3977
    93  0000                     _TRISA	set	3986
    94  0000                     _PORTD	set	3971
    95  0000                     _TRISD	set	3989
    96  0000                     _LATD	set	3980
    97  0000                     _PORTCbits	set	3970
    98                           
    99                           	psect	smallconst
   100  000800                     __psmallconst:
   101                           	opt callstack 0
   102  000800  00                 	db	0
   103  000801                     STR_1:
   104  000801  49                 	db	73	;'I'
   105  000802  73                 	db	115	;'s'
   106  000803  20                 	db	32
   107  000804  74                 	db	116	;'t'
   108  000805  68                 	db	104	;'h'
   109  000806  69                 	db	105	;'i'
   110  000807  73                 	db	115	;'s'
   111  000808  20                 	db	32
   112  000809  77                 	db	119	;'w'
   113  00080A  6F                 	db	111	;'o'
   114  00080B  72                 	db	114	;'r'
   115  00080C  6B                 	db	107	;'k'
   116  00080D  69                 	db	105	;'i'
   117  00080E  6E                 	db	110	;'n'
   118  00080F  67                 	db	103	;'g'
   119  000810  3F                 	db	63	;'?'
   120  000811  00                 	db	0
   121                           
   122                           ; #config settings
   123  000812  00                 	db	0	; dummy byte at the end
   124  0000                     
   125                           	psect	cinit
   126  000A9A                     __pcinit:
   127                           	opt callstack 0
   128  000A9A                     start_initialization:
   129                           	opt callstack 0
   130  000A9A                     __initialization:
   131                           	opt callstack 0
   132                           
   133                           ; Initialize objects allocated to COMRAM (16 bytes)
   134                           ; load TBLPTR registers with __pidataCOMRAM
   135  000A9A  0EF6               	movlw	low __pidataCOMRAM
   136  000A9C  6EF6               	movwf	tblptrl,c
   137  000A9E  0E0A               	movlw	high __pidataCOMRAM
   138  000AA0  6EF7               	movwf	tblptrh,c
   139  000AA2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   140  000AA4  6EF8               	movwf	tblptru,c
   141  000AA6  EE00  F001         	lfsr	0,__pdataCOMRAM
   142  000AAA  EE10 F010          	lfsr	1,16
   143  000AAE                     copy_data0:
   144  000AAE  0009               	tblrd		*+
   145  000AB0  CFF5 FFEE          	movff	tablat,postinc0
   146  000AB4  50E5               	movf	postdec1,w,c
   147  000AB6  50E1               	movf	fsr1l,w,c
   148  000AB8  E1FA               	bnz	copy_data0
   149  000ABA                     end_of_initialization:
   150                           	opt callstack 0
   151  000ABA                     __end_of__initialization:
   152                           	opt callstack 0
   153  000ABA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   154  000ABC  6EF8               	movwf	tblptru,c
   155  000ABE  0100               	movlb	0
   156  000AC0  EF03  F005         	goto	_main	;jump to C main() function
   157                           
   158                           	psect	dataCOMRAM
   159  000001                     __pdataCOMRAM:
   160                           	opt callstack 0
   161  000001                     main@key_vals:
   162                           	opt callstack 0
   163  000001                     	ds	16
   164                           
   165                           	psect	cstackCOMRAM
   166  000011                     __pcstackCOMRAM:
   167                           	opt callstack 0
   168  000011                     ?_strlen:
   169                           	opt callstack 0
   170  000011                     LCD_rdy@busy:
   171                           	opt callstack 0
   172  000011                     getKey@key_vals:
   173                           	opt callstack 0
   174  000011                     strlen@s:
   175                           	opt callstack 0
   176                           
   177                           ; 2 bytes @ 0x0
   178  000011                     	ds	1
   179  000012                     LCD_cmd@cmd:
   180                           	opt callstack 0
   181                           
   182                           ; 1 bytes @ 0x1
   183  000012                     	ds	1
   184  000013                     ??_getKey:
   185  000013                     LCD_entryMode@ID:
   186                           	opt callstack 0
   187  000013                     LCD_dispControl@D:
   188                           	opt callstack 0
   189  000013                     LCD_functionSet@DL:
   190                           	opt callstack 0
   191  000013                     strlen@a:
   192                           	opt callstack 0
   193                           
   194                           ; 2 bytes @ 0x2
   195  000013                     	ds	1
   196  000014                     getKey@value:
   197                           	opt callstack 0
   198                           
   199                           ; 1 bytes @ 0x3
   200  000014                     	ds	1
   201  000015                     getKey@cols:
   202                           	opt callstack 0
   203  000015                     LCD_entryMode@SH:
   204                           	opt callstack 0
   205  000015                     LCD_dispControl@C:
   206                           	opt callstack 0
   207  000015                     LCD_functionSet@N:
   208                           	opt callstack 0
   209  000015                     LCD_writeStr@data:
   210                           	opt callstack 0
   211                           
   212                           ; 2 bytes @ 0x4
   213  000015                     	ds	1
   214  000016                     getKey@i:
   215                           	opt callstack 0
   216                           
   217                           ; 2 bytes @ 0x5
   218  000016                     	ds	1
   219  000017                     ??_LCD_writeStr:
   220  000017                     LCD_dispControl@B:
   221                           	opt callstack 0
   222  000017                     LCD_functionSet@F:
   223                           	opt callstack 0
   224                           
   225                           ; 2 bytes @ 0x6
   226  000017                     	ds	1
   227  000018                     getKey@j:
   228                           	opt callstack 0
   229                           
   230                           ; 2 bytes @ 0x7
   231  000018                     	ds	1
   232  000019                     ??_LCD_functionSet:
   233  000019                     ??_LCD_dispControl:
   234  000019                     LCD_writeStr@length:
   235                           	opt callstack 0
   236                           
   237                           ; 2 bytes @ 0x8
   238  000019                     	ds	1
   239  00001A                     getKey@rows:
   240                           	opt callstack 0
   241                           
   242                           ; 1 bytes @ 0x9
   243  00001A                     	ds	1
   244  00001B                     getKey@bit_rows:
   245                           	opt callstack 0
   246  00001B                     LCD_writeStr@i:
   247                           	opt callstack 0
   248                           
   249                           ; 2 bytes @ 0xA
   250  00001B                     	ds	1
   251  00001C                     getKey@bit_cols:
   252                           	opt callstack 0
   253                           
   254                           ; 1 bytes @ 0xB
   255  00001C                     	ds	1
   256  00001D                     
   257                           ; 1 bytes @ 0xC
   258  00001D                     	ds	1
   259  00001E                     main@opIdx2:
   260                           	opt callstack 0
   261                           
   262                           ; 1 bytes @ 0xD
   263  00001E                     	ds	1
   264                           
   265 ;;
   266 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   267 ;;
   268 ;; *************** function _main *****************
   269 ;; Defined at:
   270 ;;		line 33 in file "main.c"
   271 ;; Parameters:    Size  Location     Type
   272 ;;		None
   273 ;; Auto vars:     Size  Location     Type
   274 ;;  operators      14    0        unsigned char [14]
   275 ;;  opIdx2          1   13[COMRAM] unsigned char 
   276 ;;  operation       1    0        unsigned char 
   277 ;;  opIdx1          1    0        unsigned char 
   278 ;; Return value:  Size  Location     Type
   279 ;;                  1    wreg      void 
   280 ;; Registers used:
   281 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   282 ;; Tracked objects:
   283 ;;		On entry : 0/0
   284 ;;		On exit  : 0/0
   285 ;;		Unchanged: 0/0
   286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   287 ;;      Params:         0       0       0       0       0       0       0       0       0
   288 ;;      Locals:         2       0       0       0       0       0       0       0       0
   289 ;;      Temps:          0       0       0       0       0       0       0       0       0
   290 ;;      Totals:         2       0       0       0       0       0       0       0       0
   291 ;;Total ram usage:        2 bytes
   292 ;; Hardware stack levels required when called:    4
   293 ;; This function calls:
   294 ;;		_LCD_clear
   295 ;;		_LCD_init
   296 ;;		_LCD_writeStr
   297 ;;		_getKey
   298 ;;		_ports_init
   299 ;; This function is called by:
   300 ;;		Startup code after reset
   301 ;; This function uses a non-reentrant model
   302 ;;
   303                           
   304                           	psect	text0
   305  000A06                     __ptext0:
   306                           	opt callstack 0
   307  000A06                     _main:
   308                           	opt callstack 27
   309  000A06                     
   310                           ;main.c: 39:     char opIdx1, opIdx2 = 0;
   311  000A06  0E00               	movlw	0
   312  000A08  6E1E               	movwf	main@opIdx2^0,c
   313  000A0A                     
   314                           ;main.c: 40:     char operators[14];;main.c: 41:     ports_init();
   315  000A0A  ECC7  F004         	call	_ports_init	;wreg free
   316  000A0E                     
   317                           ;main.c: 42:     LCD_init();
   318  000A0E  EC9E  F004         	call	_LCD_init	;wreg free
   319  000A12                     l1134:
   320                           
   321                           ;main.c: 46:         LCD_writeStr("Is this working?");
   322  000A12  0E01               	movlw	low STR_1
   323  000A14  6E15               	movwf	LCD_writeStr@data^0,c
   324  000A16  0E08               	movlw	high STR_1
   325  000A18  6E16               	movwf	(LCD_writeStr@data+1)^0,c
   326  000A1A  EC5E  F004         	call	_LCD_writeStr	;wreg free
   327  000A1E                     
   328                           ;main.c: 47:         LCD_clear();
   329  000A1E  EC8A  F005         	call	_LCD_clear	;wreg free
   330  000A22                     
   331                           ;main.c: 48:         getKey(key_vals);
   332  000A22  0E01               	movlw	low main@key_vals
   333  000A24  6E11               	movwf	getKey@key_vals^0,c
   334  000A26  0E00               	movlw	high main@key_vals
   335  000A28  6E12               	movwf	(getKey@key_vals+1)^0,c
   336  000A2A  EC0A  F004         	call	_getKey	;wreg free
   337  000A2E                     
   338                           ;main.c: 49:         LCD_clear();
   339  000A2E  EC8A  F005         	call	_LCD_clear	;wreg free
   340  000A32  EF09  F005         	goto	l1134
   341  000A36  EF00  F000         	goto	start
   342  000A3A                     __end_of_main:
   343                           	opt callstack 0
   344                           
   345 ;; *************** function _ports_init *****************
   346 ;; Defined at:
   347 ;;		line 72 in file "main.c"
   348 ;; Parameters:    Size  Location     Type
   349 ;;		None
   350 ;; Auto vars:     Size  Location     Type
   351 ;;		None
   352 ;; Return value:  Size  Location     Type
   353 ;;                  1    wreg      void 
   354 ;; Registers used:
   355 ;;		wreg, status,2
   356 ;; Tracked objects:
   357 ;;		On entry : 0/0
   358 ;;		On exit  : 0/0
   359 ;;		Unchanged: 0/0
   360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   361 ;;      Params:         0       0       0       0       0       0       0       0       0
   362 ;;      Locals:         0       0       0       0       0       0       0       0       0
   363 ;;      Temps:          0       0       0       0       0       0       0       0       0
   364 ;;      Totals:         0       0       0       0       0       0       0       0       0
   365 ;;Total ram usage:        0 bytes
   366 ;; Hardware stack levels used:    1
   367 ;; This function calls:
   368 ;;		Nothing
   369 ;; This function is called by:
   370 ;;		_main
   371 ;; This function uses a non-reentrant model
   372 ;;
   373                           
   374                           	psect	text1
   375  00098E                     __ptext1:
   376                           	opt callstack 0
   377  00098E                     _ports_init:
   378                           	opt callstack 30
   379  00098E                     
   380                           ;main.c: 74:     ANSELA = 0;
   381  00098E  0E00               	movlw	0
   382  000990  010F               	movlb	15	; () banked
   383  000992  6F5B               	movwf	91,b	;volatile
   384                           
   385                           ;main.c: 75:     TRISA = 0;
   386  000994  0E00               	movlw	0
   387  000996  6E92               	movwf	146,c	;volatile
   388                           
   389                           ;main.c: 76:     LATA = 0;
   390  000998  0E00               	movlw	0
   391  00099A  6E89               	movwf	137,c	;volatile
   392                           
   393                           ;main.c: 78:     ANSELB = 0;
   394  00099C  0E00               	movlw	0
   395  00099E  6F5C               	movwf	92,b	;volatile
   396                           
   397                           ;main.c: 79:     TRISB = 0b00001111;
   398  0009A0  0E0F               	movlw	15
   399  0009A2  6E93               	movwf	147,c	;volatile
   400                           
   401                           ;main.c: 80:     LATB = 0;
   402  0009A4  0E00               	movlw	0
   403  0009A6  6E8A               	movwf	138,c	;volatile
   404                           
   405                           ;main.c: 81:     INTCON2 = 0b00000000;
   406  0009A8  0E00               	movlw	0
   407  0009AA  6EF1               	movwf	241,c	;volatile
   408                           
   409                           ;main.c: 82:     WPUB = 0b00001111;;
   410  0009AC  0E0F               	movlw	15
   411  0009AE  6E85               	movwf	133,c	;volatile
   412                           
   413                           ;main.c: 85:     ANSELC = 0;
   414  0009B0  0E00               	movlw	0
   415  0009B2  6F5D               	movwf	93,b	;volatile
   416  0009B4                     
   417                           ; BSR set to: 15
   418                           ;main.c: 86:     TRISCbits.TRISC0=0;
   419  0009B4  9094               	bcf	148,0,c	;volatile
   420  0009B6                     
   421                           ; BSR set to: 15
   422                           ;main.c: 87:     TRISCbits.TRISC2=0;
   423  0009B6  9494               	bcf	148,2,c	;volatile
   424  0009B8                     
   425                           ; BSR set to: 15
   426                           ;main.c: 88:     TRISCbits.TRISC1=0;
   427  0009B8  9294               	bcf	148,1,c	;volatile
   428                           
   429                           ;main.c: 89:     LATC = 0;
   430  0009BA  0E00               	movlw	0
   431  0009BC  6E8B               	movwf	139,c	;volatile
   432                           
   433                           ;main.c: 91:     ANSELD = 0;
   434  0009BE  0E00               	movlw	0
   435  0009C0  6F5E               	movwf	94,b	;volatile
   436                           
   437                           ;main.c: 92:     TRISD = 0;
   438  0009C2  0E00               	movlw	0
   439  0009C4  6E95               	movwf	149,c	;volatile
   440                           
   441                           ;main.c: 93:     LATD = 0;
   442  0009C6  0E00               	movlw	0
   443  0009C8  6E8C               	movwf	140,c	;volatile
   444  0009CA                     
   445                           ; BSR set to: 15
   446  0009CA  0012               	return		;funcret
   447  0009CC                     __end_of_ports_init:
   448                           	opt callstack 0
   449                           
   450 ;; *************** function _getKey *****************
   451 ;; Defined at:
   452 ;;		line 118 in file "main.c"
   453 ;; Parameters:    Size  Location     Type
   454 ;;  key_vals        2    0[COMRAM] PTR unsigned char [4]
   455 ;;		 -> main@key_vals(16), 
   456 ;; Auto vars:     Size  Location     Type
   457 ;;  cols            1    4[COMRAM] unsigned char 
   458 ;;  j               2    7[COMRAM] int 
   459 ;;  bit_cols        1   11[COMRAM] unsigned char 
   460 ;;  rows            1    9[COMRAM] unsigned char 
   461 ;;  i               2    5[COMRAM] int 
   462 ;;  bit_rows        1   10[COMRAM] unsigned char 
   463 ;;  value           1    3[COMRAM] unsigned char 
   464 ;; Return value:  Size  Location     Type
   465 ;;                  1    wreg      unsigned char 
   466 ;; Registers used:
   467 ;;		wreg, status,2, status,0
   468 ;; Tracked objects:
   469 ;;		On entry : 0/0
   470 ;;		On exit  : 0/0
   471 ;;		Unchanged: 0/0
   472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   473 ;;      Params:         2       0       0       0       0       0       0       0       0
   474 ;;      Locals:         9       0       0       0       0       0       0       0       0
   475 ;;      Temps:          1       0       0       0       0       0       0       0       0
   476 ;;      Totals:        12       0       0       0       0       0       0       0       0
   477 ;;Total ram usage:       12 bytes
   478 ;; Hardware stack levels used:    1
   479 ;; This function calls:
   480 ;;		Nothing
   481 ;; This function is called by:
   482 ;;		_main
   483 ;; This function uses a non-reentrant model
   484 ;;
   485                           
   486                           	psect	text2
   487  000814                     __ptext2:
   488                           	opt callstack 0
   489  000814                     _getKey:
   490                           	opt callstack 30
   491  000814                     l122:
   492  000814                     
   493                           ;main.c: 121:         char bit_rows = 0b10000000;
   494  000814  0E80               	movlw	128
   495  000816  6E1B               	movwf	getKey@bit_rows^0,c
   496                           
   497                           ;main.c: 122:         char value;;main.c: 123:         for (int i = 0; i < 4; i++) {
   498  000818  0E00               	movlw	0
   499  00081A  6E17               	movwf	(getKey@i+1)^0,c
   500  00081C  0E00               	movlw	0
   501  00081E  6E16               	movwf	getKey@i^0,c
   502  000820                     l1102:
   503                           
   504                           ;main.c: 124:             char rows = ~bit_rows & 0b11110000;
   505  000820  501B               	movf	getKey@bit_rows^0,w,c
   506  000822  0AFF               	xorlw	255
   507  000824  0BF0               	andlw	240
   508  000826  6E1A               	movwf	getKey@rows^0,c
   509  000828                     
   510                           ;main.c: 125:             char bit_cols = 0b00001000;
   511  000828  0E08               	movlw	8
   512  00082A  6E1C               	movwf	getKey@bit_cols^0,c
   513  00082C                     
   514                           ;main.c: 126:             LATB = rows | 0b00001111;
   515  00082C  501A               	movf	getKey@rows^0,w,c
   516  00082E  090F               	iorlw	15
   517  000830  6E8A               	movwf	138,c	;volatile
   518                           
   519                           ;main.c: 127:             for (int j = 0; j < 4; j++) {
   520  000832  0E00               	movlw	0
   521  000834  6E19               	movwf	(getKey@j+1)^0,c
   522  000836  0E00               	movlw	0
   523  000838  6E18               	movwf	getKey@j^0,c
   524  00083A                     l1112:
   525                           
   526                           ;main.c: 128:                 char cols = ~bit_cols & 0b00001111;
   527  00083A  501C               	movf	getKey@bit_cols^0,w,c
   528  00083C  0AFF               	xorlw	255
   529  00083E  0B0F               	andlw	15
   530  000840  6E15               	movwf	getKey@cols^0,c
   531                           
   532                           ;main.c: 129:                 value = rows | cols;
   533  000842  501A               	movf	getKey@rows^0,w,c
   534  000844  1015               	iorwf	getKey@cols^0,w,c
   535  000846  6E14               	movwf	getKey@value^0,c
   536                           
   537                           ;main.c: 130:                 if (PORTB == value)
   538  000848  5014               	movf	getKey@value^0,w,c
   539  00084A  1881               	xorwf	129,w,c	;volatile
   540  00084C  A4D8               	btfss	status,2,c
   541  00084E  EF2B  F004         	goto	u131
   542  000852  EF2D  F004         	goto	u130
   543  000856                     u131:
   544  000856  EF2E  F004         	goto	l1116
   545  00085A                     u130:
   546  00085A                     
   547                           ;main.c: 131:                     __nop();
   548  00085A  F000               	nop	
   549  00085C                     l1116:
   550                           
   551                           ;main.c: 132:                 LATA = (PORTB & 0b00001111) << 4;
   552  00085C  CF81 F013          	movff	3969,??_getKey	;volatile
   553  000860  0E0F               	movlw	15
   554  000862  1613               	andwf	??_getKey^0,f,c
   555  000864  3813               	swapf	??_getKey^0,w,c
   556  000866  0BF0               	andlw	240
   557  000868  6E89               	movwf	137,c	;volatile
   558                           
   559                           ;main.c: 133:                 bit_cols = bit_cols >> 1;
   560  00086A  90D8               	bcf	status,0,c
   561  00086C  301C               	rrcf	getKey@bit_cols^0,w,c
   562  00086E  6E1C               	movwf	getKey@bit_cols^0,c
   563  000870                     
   564                           ;main.c: 134:             }
   565  000870  4A18               	infsnz	getKey@j^0,f,c
   566  000872  2A19               	incf	(getKey@j+1)^0,f,c
   567  000874  BE19               	btfsc	(getKey@j+1)^0,7,c
   568  000876  EF46  F004         	goto	u141
   569  00087A  5019               	movf	(getKey@j+1)^0,w,c
   570  00087C  E109               	bnz	u140
   571  00087E  0E04               	movlw	4
   572  000880  5C18               	subwf	getKey@j^0,w,c
   573  000882  A0D8               	btfss	status,0,c
   574  000884  EF46  F004         	goto	u141
   575  000888  EF48  F004         	goto	u140
   576  00088C                     u141:
   577  00088C  EF1D  F004         	goto	l1112
   578  000890                     u140:
   579  000890                     
   580                           ;main.c: 136:             bit_rows = bit_rows >> 1;
   581  000890  90D8               	bcf	status,0,c
   582  000892  301B               	rrcf	getKey@bit_rows^0,w,c
   583  000894  6E1B               	movwf	getKey@bit_rows^0,c
   584  000896                     
   585                           ;main.c: 137:         }
   586  000896  4A16               	infsnz	getKey@i^0,f,c
   587  000898  2A17               	incf	(getKey@i+1)^0,f,c
   588  00089A  BE17               	btfsc	(getKey@i+1)^0,7,c
   589  00089C  EF59  F004         	goto	u151
   590  0008A0  5017               	movf	(getKey@i+1)^0,w,c
   591  0008A2  E109               	bnz	u150
   592  0008A4  0E04               	movlw	4
   593  0008A6  5C16               	subwf	getKey@i^0,w,c
   594  0008A8  A0D8               	btfss	status,0,c
   595  0008AA  EF59  F004         	goto	u151
   596  0008AE  EF5B  F004         	goto	u150
   597  0008B2                     u151:
   598  0008B2  EF10  F004         	goto	l1102
   599  0008B6                     u150:
   600  0008B6  EF0A  F004         	goto	l122
   601  0008BA  0012               	return		;funcret
   602  0008BC                     __end_of_getKey:
   603                           	opt callstack 0
   604                           
   605 ;; *************** function _LCD_writeStr *****************
   606 ;; Defined at:
   607 ;;		line 110 in file "./lcd.h"
   608 ;; Parameters:    Size  Location     Type
   609 ;;  data            2    4[COMRAM] PTR unsigned char 
   610 ;;		 -> STR_1(17), 
   611 ;; Auto vars:     Size  Location     Type
   612 ;;  i               2   10[COMRAM] int 
   613 ;;  length          2    8[COMRAM] short 
   614 ;; Return value:  Size  Location     Type
   615 ;;                  1    wreg      void 
   616 ;; Registers used:
   617 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   618 ;; Tracked objects:
   619 ;;		On entry : 0/0
   620 ;;		On exit  : 0/0
   621 ;;		Unchanged: 0/0
   622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   623 ;;      Params:         2       0       0       0       0       0       0       0       0
   624 ;;      Locals:         4       0       0       0       0       0       0       0       0
   625 ;;      Temps:          2       0       0       0       0       0       0       0       0
   626 ;;      Totals:         8       0       0       0       0       0       0       0       0
   627 ;;Total ram usage:        8 bytes
   628 ;; Hardware stack levels used:    1
   629 ;; Hardware stack levels required when called:    1
   630 ;; This function calls:
   631 ;;		_LCD_rdy
   632 ;;		_strlen
   633 ;; This function is called by:
   634 ;;		_main
   635 ;; This function uses a non-reentrant model
   636 ;;
   637                           
   638                           	psect	text3
   639  0008BC                     __ptext3:
   640                           	opt callstack 0
   641  0008BC                     _LCD_writeStr:
   642                           	opt callstack 29
   643  0008BC                     
   644                           ;./lcd.h: 111:     LCD_rdy();
   645  0008BC  EC1D  F005         	call	_LCD_rdy	;wreg free
   646  0008C0                     
   647                           ;./lcd.h: 112:     PORTCbits.RC2 = 1;
   648  0008C0  8482               	bsf	130,2,c	;volatile
   649  0008C2                     
   650                           ;./lcd.h: 113:     PORTCbits.RC1 = 0;
   651  0008C2  9282               	bcf	130,1,c	;volatile
   652  0008C4                     
   653                           ;./lcd.h: 116:     short int length = strlen(data);
   654  0008C4  C015  F011         	movff	LCD_writeStr@data,strlen@s
   655  0008C8  C016  F012         	movff	LCD_writeStr@data+1,strlen@s+1
   656  0008CC  ECE6  F004         	call	_strlen	;wreg free
   657  0008D0  C011  F019         	movff	?_strlen,LCD_writeStr@length
   658  0008D4  C012  F01A         	movff	?_strlen+1,LCD_writeStr@length+1
   659  0008D8                     
   660                           ;./lcd.h: 117:     for (int i = 0; i < length; i++){
   661  0008D8  0E00               	movlw	0
   662  0008DA  6E1C               	movwf	(LCD_writeStr@i+1)^0,c
   663  0008DC  0E00               	movlw	0
   664  0008DE  6E1B               	movwf	LCD_writeStr@i^0,c
   665  0008E0  EF8E  F004         	goto	l1094
   666  0008E4                     l93:
   667                           
   668                           ;./lcd.h: 118:         PORTCbits.RC0 = 1;
   669  0008E4  8082               	bsf	130,0,c	;volatile
   670                           
   671                           ;./lcd.h: 119:         __nop();
   672  0008E6  F000               	nop	
   673  0008E8                     
   674                           ;./lcd.h: 120:         LATD = data[i];
   675  0008E8  501B               	movf	LCD_writeStr@i^0,w,c
   676  0008EA  2415               	addwf	LCD_writeStr@data^0,w,c
   677  0008EC  6E17               	movwf	??_LCD_writeStr^0,c
   678  0008EE  501C               	movf	(LCD_writeStr@i+1)^0,w,c
   679  0008F0  2016               	addwfc	(LCD_writeStr@data+1)^0,w,c
   680  0008F2  6E18               	movwf	(??_LCD_writeStr+1)^0,c
   681  0008F4  C017  FFF6         	movff	??_LCD_writeStr,tblptrl
   682  0008F8  C018  FFF7         	movff	??_LCD_writeStr+1,tblptrh
   683  0008FC                     	if	0	;tblptru may be non-zero
   684  0008FC                     	endif
   685  0008FC                     	if	0	;tblptru may be non-zero
   686  0008FC                     	endif
   687  0008FC  0008               	tblrd		*
   688  0008FE  CFF5 FF8C          	movff	tablat,3980	;volatile
   689  000902                     
   690                           ;./lcd.h: 121:         __nop();
   691  000902  F000               	nop	
   692  000904                     
   693                           ;./lcd.h: 122:         PORTCbits.RC0 = 0;
   694  000904  9082               	bcf	130,0,c	;volatile
   695  000906                     
   696                           ;./lcd.h: 123:         __nop();
   697  000906  F000               	nop	
   698  000908                     
   699                           ;./lcd.h: 124:         _delay((unsigned long)((100)*(1000000/4000.0)));
   700  000908  0E21               	movlw	33
   701  00090A  6E17               	movwf	??_LCD_writeStr^0,c
   702  00090C  0E76               	movlw	118
   703  00090E                     u187:
   704  00090E  2EE8               	decfsz	wreg,f,c
   705  000910  D7FE               	bra	u187
   706  000912  2E17               	decfsz	??_LCD_writeStr^0,f,c
   707  000914  D7FC               	bra	u187
   708  000916  D000               	nop2	
   709  000918                     
   710                           ;./lcd.h: 125:     }
   711  000918  4A1B               	infsnz	LCD_writeStr@i^0,f,c
   712  00091A  2A1C               	incf	(LCD_writeStr@i+1)^0,f,c
   713  00091C                     l1094:
   714  00091C  5019               	movf	LCD_writeStr@length^0,w,c
   715  00091E  5C1B               	subwf	LCD_writeStr@i^0,w,c
   716  000920  501C               	movf	(LCD_writeStr@i+1)^0,w,c
   717  000922  0A80               	xorlw	128
   718  000924  6E17               	movwf	??_LCD_writeStr^0,c
   719  000926  501A               	movf	(LCD_writeStr@length+1)^0,w,c
   720  000928  0A80               	xorlw	128
   721  00092A  5817               	subwfb	??_LCD_writeStr^0,w,c
   722  00092C  A0D8               	btfss	status,0,c
   723  00092E  EF9B  F004         	goto	u121
   724  000932  EF9D  F004         	goto	u120
   725  000936                     u121:
   726  000936  EF72  F004         	goto	l93
   727  00093A                     u120:
   728  00093A  0012               	return		;funcret
   729  00093C                     __end_of_LCD_writeStr:
   730                           	opt callstack 0
   731                           
   732 ;; *************** function _strlen *****************
   733 ;; Defined at:
   734 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strlen.c"
   735 ;; Parameters:    Size  Location     Type
   736 ;;  s               2    0[COMRAM] PTR const unsigned char 
   737 ;;		 -> STR_1(17), 
   738 ;; Auto vars:     Size  Location     Type
   739 ;;  a               2    2[COMRAM] PTR const unsigned char 
   740 ;;		 -> STR_1(17), 
   741 ;; Return value:  Size  Location     Type
   742 ;;                  2    0[COMRAM] unsigned int 
   743 ;; Registers used:
   744 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
   745 ;; Tracked objects:
   746 ;;		On entry : 0/0
   747 ;;		On exit  : 0/0
   748 ;;		Unchanged: 0/0
   749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   750 ;;      Params:         2       0       0       0       0       0       0       0       0
   751 ;;      Locals:         2       0       0       0       0       0       0       0       0
   752 ;;      Temps:          0       0       0       0       0       0       0       0       0
   753 ;;      Totals:         4       0       0       0       0       0       0       0       0
   754 ;;Total ram usage:        4 bytes
   755 ;; Hardware stack levels used:    1
   756 ;; This function calls:
   757 ;;		Nothing
   758 ;; This function is called by:
   759 ;;		_LCD_writeStr
   760 ;; This function uses a non-reentrant model
   761 ;;
   762                           
   763                           	psect	text4
   764  0009CC                     __ptext4:
   765                           	opt callstack 0
   766  0009CC                     _strlen:
   767                           	opt callstack 29
   768  0009CC  C011  F013         	movff	strlen@s,strlen@a
   769  0009D0  C012  F014         	movff	strlen@s+1,strlen@a+1
   770  0009D4  EFEE  F004         	goto	l1064
   771  0009D8                     l1062:
   772  0009D8  4A11               	infsnz	strlen@s^0,f,c
   773  0009DA  2A12               	incf	(strlen@s+1)^0,f,c
   774  0009DC                     l1064:
   775  0009DC  C011  FFF6         	movff	strlen@s,tblptrl
   776  0009E0  C012  FFF7         	movff	strlen@s+1,tblptrh
   777  0009E4                     	if	0	;tblptru may be non-zero
   778  0009E4                     	endif
   779  0009E4                     	if	0	;tblptru may be non-zero
   780  0009E4                     	endif
   781  0009E4  0008               	tblrd		*
   782  0009E6  50F5               	movf	tablat,w,c
   783  0009E8  0900               	iorlw	0
   784  0009EA  A4D8               	btfss	status,2,c
   785  0009EC  EFFA  F004         	goto	u111
   786  0009F0  EFFC  F004         	goto	u110
   787  0009F4                     u111:
   788  0009F4  EFEC  F004         	goto	l1062
   789  0009F8                     u110:
   790  0009F8  5013               	movf	strlen@a^0,w,c
   791  0009FA  5C11               	subwf	strlen@s^0,w,c
   792  0009FC  6E11               	movwf	?_strlen^0,c
   793  0009FE  5014               	movf	(strlen@a+1)^0,w,c
   794  000A00  5812               	subwfb	(strlen@s+1)^0,w,c
   795  000A02  6E12               	movwf	(?_strlen+1)^0,c
   796  000A04  0012               	return		;funcret
   797  000A06                     __end_of_strlen:
   798                           	opt callstack 0
   799                           
   800 ;; *************** function _LCD_init *****************
   801 ;; Defined at:
   802 ;;		line 44 in file "./lcd.h"
   803 ;; Parameters:    Size  Location     Type
   804 ;;		None
   805 ;; Auto vars:     Size  Location     Type
   806 ;;		None
   807 ;; Return value:  Size  Location     Type
   808 ;;                  1    wreg      void 
   809 ;; Registers used:
   810 ;;		wreg, status,2, status,0, cstack
   811 ;; Tracked objects:
   812 ;;		On entry : 0/0
   813 ;;		On exit  : 0/0
   814 ;;		Unchanged: 0/0
   815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   816 ;;      Params:         0       0       0       0       0       0       0       0       0
   817 ;;      Locals:         0       0       0       0       0       0       0       0       0
   818 ;;      Temps:          0       0       0       0       0       0       0       0       0
   819 ;;      Totals:         0       0       0       0       0       0       0       0       0
   820 ;;Total ram usage:        0 bytes
   821 ;; Hardware stack levels used:    1
   822 ;; Hardware stack levels required when called:    3
   823 ;; This function calls:
   824 ;;		_LCD_clear
   825 ;;		_LCD_dispControl
   826 ;;		_LCD_entryMode
   827 ;;		_LCD_functionSet
   828 ;; This function is called by:
   829 ;;		_main
   830 ;; This function uses a non-reentrant model
   831 ;;
   832                           
   833                           	psect	text5
   834  00093C                     __ptext5:
   835                           	opt callstack 0
   836  00093C                     _LCD_init:
   837                           	opt callstack 27
   838  00093C                     
   839                           ;./lcd.h: 45:     LCD_clear();
   840  00093C  EC8A  F005         	call	_LCD_clear	;wreg free
   841                           
   842                           ;./lcd.h: 46:     LCD_functionSet(1, 1, 0);
   843  000940  0E00               	movlw	0
   844  000942  6E14               	movwf	(LCD_functionSet@DL+1)^0,c
   845  000944  0E01               	movlw	1
   846  000946  6E13               	movwf	LCD_functionSet@DL^0,c
   847  000948  0E00               	movlw	0
   848  00094A  6E16               	movwf	(LCD_functionSet@N+1)^0,c
   849  00094C  0E01               	movlw	1
   850  00094E  6E15               	movwf	LCD_functionSet@N^0,c
   851  000950  0E00               	movlw	0
   852  000952  6E18               	movwf	(LCD_functionSet@F+1)^0,c
   853  000954  0E00               	movlw	0
   854  000956  6E17               	movwf	LCD_functionSet@F^0,c
   855  000958  EC37  F005         	call	_LCD_functionSet	;wreg free
   856                           
   857                           ;./lcd.h: 47:     LCD_dispControl(1, 1, 1);
   858  00095C  0E00               	movlw	0
   859  00095E  6E14               	movwf	(LCD_dispControl@D+1)^0,c
   860  000960  0E01               	movlw	1
   861  000962  6E13               	movwf	LCD_dispControl@D^0,c
   862  000964  0E00               	movlw	0
   863  000966  6E16               	movwf	(LCD_dispControl@C+1)^0,c
   864  000968  0E01               	movlw	1
   865  00096A  6E15               	movwf	LCD_dispControl@C^0,c
   866  00096C  0E00               	movlw	0
   867  00096E  6E18               	movwf	(LCD_dispControl@B+1)^0,c
   868  000970  0E01               	movlw	1
   869  000972  6E17               	movwf	LCD_dispControl@B^0,c
   870  000974  EC6F  F005         	call	_LCD_dispControl	;wreg free
   871                           
   872                           ;./lcd.h: 48:     LCD_entryMode(1, 0);
   873  000978  0E00               	movlw	0
   874  00097A  6E14               	movwf	(LCD_entryMode@ID+1)^0,c
   875  00097C  0E01               	movlw	1
   876  00097E  6E13               	movwf	LCD_entryMode@ID^0,c
   877  000980  0E00               	movlw	0
   878  000982  6E16               	movwf	(LCD_entryMode@SH+1)^0,c
   879  000984  0E00               	movlw	0
   880  000986  6E15               	movwf	LCD_entryMode@SH^0,c
   881  000988  EC83  F005         	call	_LCD_entryMode	;wreg free
   882  00098C  0012               	return		;funcret
   883  00098E                     __end_of_LCD_init:
   884                           	opt callstack 0
   885                           
   886 ;; *************** function _LCD_functionSet *****************
   887 ;; Defined at:
   888 ;;		line 71 in file "./lcd.h"
   889 ;; Parameters:    Size  Location     Type
   890 ;;  DL              2    2[COMRAM] short 
   891 ;;  N               2    4[COMRAM] short 
   892 ;;  F               2    6[COMRAM] short 
   893 ;; Auto vars:     Size  Location     Type
   894 ;;		None
   895 ;; Return value:  Size  Location     Type
   896 ;;                  1    wreg      void 
   897 ;; Registers used:
   898 ;;		wreg, status,2, status,0, cstack
   899 ;; Tracked objects:
   900 ;;		On entry : 0/0
   901 ;;		On exit  : 0/0
   902 ;;		Unchanged: 0/0
   903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   904 ;;      Params:         6       0       0       0       0       0       0       0       0
   905 ;;      Locals:         0       0       0       0       0       0       0       0       0
   906 ;;      Temps:          2       0       0       0       0       0       0       0       0
   907 ;;      Totals:         8       0       0       0       0       0       0       0       0
   908 ;;Total ram usage:        8 bytes
   909 ;; Hardware stack levels used:    1
   910 ;; Hardware stack levels required when called:    2
   911 ;; This function calls:
   912 ;;		_LCD_cmd
   913 ;; This function is called by:
   914 ;;		_LCD_init
   915 ;; This function uses a non-reentrant model
   916 ;;
   917                           
   918                           	psect	text6
   919  000A6E                     __ptext6:
   920                           	opt callstack 0
   921  000A6E                     _LCD_functionSet:
   922                           	opt callstack 27
   923  000A6E                     
   924                           ;./lcd.h: 72:     LCD_cmd(0b00100000 | DL << 4 | N << 3 | F << 2);
   925  000A6E  C017  F019         	movff	LCD_functionSet@F,??_LCD_functionSet
   926  000A72  90D8               	bcf	status,0,c
   927  000A74  3619               	rlcf	??_LCD_functionSet^0,f,c
   928  000A76  90D8               	bcf	status,0,c
   929  000A78  3619               	rlcf	??_LCD_functionSet^0,f,c
   930  000A7A  C015  F01A         	movff	LCD_functionSet@N,??_LCD_functionSet+1
   931  000A7E  90D8               	bcf	status,0,c
   932  000A80  361A               	rlcf	(??_LCD_functionSet+1)^0,f,c
   933  000A82  90D8               	bcf	status,0,c
   934  000A84  361A               	rlcf	(??_LCD_functionSet+1)^0,f,c
   935  000A86  90D8               	bcf	status,0,c
   936  000A88  361A               	rlcf	(??_LCD_functionSet+1)^0,f,c
   937  000A8A  3813               	swapf	LCD_functionSet@DL^0,w,c
   938  000A8C  0BF0               	andlw	240
   939  000A8E  101A               	iorwf	(??_LCD_functionSet+1)^0,w,c
   940  000A90  1019               	iorwf	??_LCD_functionSet^0,w,c
   941  000A92  0920               	iorlw	32
   942  000A94  EC62  F005         	call	_LCD_cmd
   943  000A98  0012               	return		;funcret
   944  000A9A                     __end_of_LCD_functionSet:
   945                           	opt callstack 0
   946                           
   947 ;; *************** function _LCD_entryMode *****************
   948 ;; Defined at:
   949 ;;		line 59 in file "./lcd.h"
   950 ;; Parameters:    Size  Location     Type
   951 ;;  ID              2    2[COMRAM] short 
   952 ;;  SH              2    4[COMRAM] short 
   953 ;; Auto vars:     Size  Location     Type
   954 ;;		None
   955 ;; Return value:  Size  Location     Type
   956 ;;                  1    wreg      void 
   957 ;; Registers used:
   958 ;;		wreg, status,2, status,0, cstack
   959 ;; Tracked objects:
   960 ;;		On entry : 0/0
   961 ;;		On exit  : 0/0
   962 ;;		Unchanged: 0/0
   963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   964 ;;      Params:         4       0       0       0       0       0       0       0       0
   965 ;;      Locals:         0       0       0       0       0       0       0       0       0
   966 ;;      Temps:          0       0       0       0       0       0       0       0       0
   967 ;;      Totals:         4       0       0       0       0       0       0       0       0
   968 ;;Total ram usage:        4 bytes
   969 ;; Hardware stack levels used:    1
   970 ;; Hardware stack levels required when called:    2
   971 ;; This function calls:
   972 ;;		_LCD_cmd
   973 ;; This function is called by:
   974 ;;		_LCD_init
   975 ;;		_printCalcResult
   976 ;; This function uses a non-reentrant model
   977 ;;
   978                           
   979                           	psect	text7
   980  000B06                     __ptext7:
   981                           	opt callstack 0
   982  000B06                     _LCD_entryMode:
   983                           	opt callstack 27
   984  000B06                     
   985                           ;./lcd.h: 60:     LCD_cmd(0b00000100 | ID << 1 | SH);
   986  000B06  5013               	movf	LCD_entryMode@ID^0,w,c
   987  000B08  2413               	addwf	LCD_entryMode@ID^0,w,c
   988  000B0A  1015               	iorwf	LCD_entryMode@SH^0,w,c
   989  000B0C  0904               	iorlw	4
   990  000B0E  EC62  F005         	call	_LCD_cmd
   991  000B12  0012               	return		;funcret
   992  000B14                     __end_of_LCD_entryMode:
   993                           	opt callstack 0
   994                           
   995 ;; *************** function _LCD_dispControl *****************
   996 ;; Defined at:
   997 ;;		line 63 in file "./lcd.h"
   998 ;; Parameters:    Size  Location     Type
   999 ;;  D               2    2[COMRAM] short 
  1000 ;;  C               2    4[COMRAM] short 
  1001 ;;  B               2    6[COMRAM] short 
  1002 ;; Auto vars:     Size  Location     Type
  1003 ;;		None
  1004 ;; Return value:  Size  Location     Type
  1005 ;;                  1    wreg      void 
  1006 ;; Registers used:
  1007 ;;		wreg, status,2, status,0, cstack
  1008 ;; Tracked objects:
  1009 ;;		On entry : 0/0
  1010 ;;		On exit  : 0/0
  1011 ;;		Unchanged: 0/0
  1012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1013 ;;      Params:         6       0       0       0       0       0       0       0       0
  1014 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1015 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1016 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1017 ;;Total ram usage:        7 bytes
  1018 ;; Hardware stack levels used:    1
  1019 ;; Hardware stack levels required when called:    2
  1020 ;; This function calls:
  1021 ;;		_LCD_cmd
  1022 ;; This function is called by:
  1023 ;;		_LCD_init
  1024 ;;		_printCalcResult
  1025 ;; This function uses a non-reentrant model
  1026 ;;
  1027                           
  1028                           	psect	text8
  1029  000ADE                     __ptext8:
  1030                           	opt callstack 0
  1031  000ADE                     _LCD_dispControl:
  1032                           	opt callstack 27
  1033  000ADE                     
  1034                           ;./lcd.h: 64:     LCD_cmd(0b00001000 | D << 2 | C << 1 | B);
  1035  000ADE  90D8               	bcf	status,0,c
  1036  000AE0  3415               	rlcf	LCD_dispControl@C^0,w,c
  1037  000AE2  6E19               	movwf	??_LCD_dispControl^0,c
  1038  000AE4  4413               	rlncf	LCD_dispControl@D^0,w,c
  1039  000AE6  46E8               	rlncf	wreg,f,c
  1040  000AE8  0BFC               	andlw	252
  1041  000AEA  1019               	iorwf	??_LCD_dispControl^0,w,c
  1042  000AEC  1017               	iorwf	LCD_dispControl@B^0,w,c
  1043  000AEE  0908               	iorlw	8
  1044  000AF0  EC62  F005         	call	_LCD_cmd
  1045  000AF4  0012               	return		;funcret
  1046  000AF6                     __end_of_LCD_dispControl:
  1047                           	opt callstack 0
  1048                           
  1049 ;; *************** function _LCD_clear *****************
  1050 ;; Defined at:
  1051 ;;		line 51 in file "./lcd.h"
  1052 ;; Parameters:    Size  Location     Type
  1053 ;;		None
  1054 ;; Auto vars:     Size  Location     Type
  1055 ;;		None
  1056 ;; Return value:  Size  Location     Type
  1057 ;;                  1    wreg      void 
  1058 ;; Registers used:
  1059 ;;		wreg, status,2, status,0, cstack
  1060 ;; Tracked objects:
  1061 ;;		On entry : 0/0
  1062 ;;		On exit  : 0/0
  1063 ;;		Unchanged: 0/0
  1064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1065 ;;      Params:         0       0       0       0       0       0       0       0       0
  1066 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1067 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1068 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1069 ;;Total ram usage:        0 bytes
  1070 ;; Hardware stack levels used:    1
  1071 ;; Hardware stack levels required when called:    2
  1072 ;; This function calls:
  1073 ;;		_LCD_cmd
  1074 ;; This function is called by:
  1075 ;;		_LCD_init
  1076 ;;		_main
  1077 ;; This function uses a non-reentrant model
  1078 ;;
  1079                           
  1080                           	psect	text9
  1081  000B14                     __ptext9:
  1082                           	opt callstack 0
  1083  000B14                     _LCD_clear:
  1084                           	opt callstack 27
  1085  000B14                     
  1086                           ;./lcd.h: 52:     LCD_cmd(0b00000001);
  1087  000B14  0E01               	movlw	1
  1088  000B16  EC62  F005         	call	_LCD_cmd
  1089  000B1A  0012               	return		;funcret
  1090  000B1C                     __end_of_LCD_clear:
  1091                           	opt callstack 0
  1092                           
  1093 ;; *************** function _LCD_cmd *****************
  1094 ;; Defined at:
  1095 ;;		line 79 in file "./lcd.h"
  1096 ;; Parameters:    Size  Location     Type
  1097 ;;  cmd             1    wreg     unsigned char 
  1098 ;; Auto vars:     Size  Location     Type
  1099 ;;  cmd             1    1[COMRAM] unsigned char 
  1100 ;; Return value:  Size  Location     Type
  1101 ;;                  1    wreg      void 
  1102 ;; Registers used:
  1103 ;;		wreg, status,2, status,0, cstack
  1104 ;; Tracked objects:
  1105 ;;		On entry : 0/0
  1106 ;;		On exit  : 0/0
  1107 ;;		Unchanged: 0/0
  1108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1109 ;;      Params:         0       0       0       0       0       0       0       0       0
  1110 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1111 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1112 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1113 ;;Total ram usage:        1 bytes
  1114 ;; Hardware stack levels used:    1
  1115 ;; Hardware stack levels required when called:    1
  1116 ;; This function calls:
  1117 ;;		_LCD_rdy
  1118 ;; This function is called by:
  1119 ;;		_LCD_clear
  1120 ;;		_LCD_entryMode
  1121 ;;		_LCD_dispControl
  1122 ;;		_LCD_functionSet
  1123 ;;		_LCD_returnHome
  1124 ;;		_LCD_cursor
  1125 ;;		_LCD_newLine
  1126 ;; This function uses a non-reentrant model
  1127 ;;
  1128                           
  1129                           	psect	text10
  1130  000AC4                     __ptext10:
  1131                           	opt callstack 0
  1132  000AC4                     _LCD_cmd:
  1133                           	opt callstack 27
  1134                           
  1135                           ;incstack = 0
  1136                           ;LCD_cmd@cmd stored from wreg
  1137  000AC4  6E12               	movwf	LCD_cmd@cmd^0,c
  1138  000AC6                     
  1139                           ;./lcd.h: 80:     LCD_rdy();
  1140  000AC6  EC1D  F005         	call	_LCD_rdy	;wreg free
  1141  000ACA                     
  1142                           ;./lcd.h: 81:     PORTCbits.RC2=0;
  1143  000ACA  9482               	bcf	130,2,c	;volatile
  1144  000ACC                     
  1145                           ;./lcd.h: 82:     PORTCbits.RC1=0;
  1146  000ACC  9282               	bcf	130,1,c	;volatile
  1147  000ACE                     
  1148                           ;./lcd.h: 83:     PORTCbits.RC0=1;
  1149  000ACE  8082               	bsf	130,0,c	;volatile
  1150  000AD0                     
  1151                           ;./lcd.h: 84:     __nop();
  1152  000AD0  F000               	nop	
  1153  000AD2                     
  1154                           ;./lcd.h: 85:     LATD = cmd;
  1155  000AD2  C012  FF8C         	movff	LCD_cmd@cmd,3980	;volatile
  1156  000AD6                     
  1157                           ;./lcd.h: 86:     __nop();
  1158  000AD6  F000               	nop	
  1159  000AD8                     
  1160                           ;./lcd.h: 87:     PORTCbits.RC0=0;
  1161  000AD8  9082               	bcf	130,0,c	;volatile
  1162  000ADA                     
  1163                           ;./lcd.h: 88:     __nop();
  1164  000ADA  F000               	nop	
  1165  000ADC  0012               	return		;funcret
  1166  000ADE                     __end_of_LCD_cmd:
  1167                           	opt callstack 0
  1168                           
  1169 ;; *************** function _LCD_rdy *****************
  1170 ;; Defined at:
  1171 ;;		line 91 in file "./lcd.h"
  1172 ;; Parameters:    Size  Location     Type
  1173 ;;		None
  1174 ;; Auto vars:     Size  Location     Type
  1175 ;;  busy            1    0[COMRAM] unsigned char 
  1176 ;; Return value:  Size  Location     Type
  1177 ;;                  1    wreg      void 
  1178 ;; Registers used:
  1179 ;;		wreg, status,2, status,0
  1180 ;; Tracked objects:
  1181 ;;		On entry : 0/0
  1182 ;;		On exit  : 0/0
  1183 ;;		Unchanged: 0/0
  1184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1185 ;;      Params:         0       0       0       0       0       0       0       0       0
  1186 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1187 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1188 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1189 ;;Total ram usage:        1 bytes
  1190 ;; Hardware stack levels used:    1
  1191 ;; This function calls:
  1192 ;;		Nothing
  1193 ;; This function is called by:
  1194 ;;		_LCD_cmd
  1195 ;;		_LCD_writeStr
  1196 ;;		_LCD_writeChar
  1197 ;; This function uses a non-reentrant model
  1198 ;;
  1199                           
  1200                           	psect	text11
  1201  000A3A                     __ptext11:
  1202                           	opt callstack 0
  1203  000A3A                     _LCD_rdy:
  1204                           	opt callstack 29
  1205  000A3A                     
  1206                           ;./lcd.h: 92:     char busy = 0x80;
  1207  000A3A  0E80               	movlw	128
  1208  000A3C  6E11               	movwf	LCD_rdy@busy^0,c
  1209  000A3E                     
  1210                           ;./lcd.h: 93:     TRISD = 0b11111111;
  1211  000A3E  6895               	setf	149,c	;volatile
  1212  000A40                     
  1213                           ;./lcd.h: 94:     PORTCbits.RC2 = 0;
  1214  000A40  9482               	bcf	130,2,c	;volatile
  1215  000A42                     
  1216                           ;./lcd.h: 95:     PORTCbits.RC1 = 1;
  1217  000A42  8282               	bsf	130,1,c	;volatile
  1218                           
  1219                           ;./lcd.h: 98:     while (busy) {
  1220  000A44  EF2C  F005         	goto	l846
  1221  000A48                     l87:
  1222                           
  1223                           ;./lcd.h: 99:         PORTCbits.RC0 = 1;
  1224  000A48  8082               	bsf	130,0,c	;volatile
  1225                           
  1226                           ;./lcd.h: 100:         __nop();
  1227  000A4A  F000               	nop	
  1228  000A4C                     
  1229                           ;./lcd.h: 101:         busy = PORTD & 0x80;
  1230  000A4C  5083               	movf	131,w,c	;volatile
  1231  000A4E  0B80               	andlw	128
  1232  000A50  6E11               	movwf	LCD_rdy@busy^0,c
  1233  000A52                     
  1234                           ;./lcd.h: 102:         __nop();
  1235  000A52  F000               	nop	
  1236  000A54                     
  1237                           ;./lcd.h: 103:         PORTCbits.RC0 = 0;
  1238  000A54  9082               	bcf	130,0,c	;volatile
  1239  000A56                     
  1240                           ;./lcd.h: 104:         __nop();
  1241  000A56  F000               	nop	
  1242  000A58                     l846:
  1243                           
  1244                           ;./lcd.h: 98:     while (busy) {
  1245  000A58  5011               	movf	LCD_rdy@busy^0,w,c
  1246  000A5A  A4D8               	btfss	status,2,c
  1247  000A5C  EF32  F005         	goto	u11
  1248  000A60  EF34  F005         	goto	u10
  1249  000A64                     u11:
  1250  000A64  EF24  F005         	goto	l87
  1251  000A68                     u10:
  1252  000A68                     
  1253                           ;./lcd.h: 107:     TRISD = 0b00000000;
  1254  000A68  0E00               	movlw	0
  1255  000A6A  6E95               	movwf	149,c	;volatile
  1256  000A6C  0012               	return		;funcret
  1257  000A6E                     __end_of_LCD_rdy:
  1258                           	opt callstack 0
  1259                           
  1260                           	psect	rparam
  1261  0000                     tosu	equ	0xFFF
  1262                           tosh	equ	0xFFE
  1263                           tosl	equ	0xFFD
  1264                           stkptr	equ	0xFFC
  1265                           pclatu	equ	0xFFB
  1266                           pclath	equ	0xFFA
  1267                           pcl	equ	0xFF9
  1268                           tblptru	equ	0xFF8
  1269                           tblptrh	equ	0xFF7
  1270                           tblptrl	equ	0xFF6
  1271                           tablat	equ	0xFF5
  1272                           prodh	equ	0xFF4
  1273                           prodl	equ	0xFF3
  1274                           indf0	equ	0xFEF
  1275                           postinc0	equ	0xFEE
  1276                           postdec0	equ	0xFED
  1277                           preinc0	equ	0xFEC
  1278                           plusw0	equ	0xFEB
  1279                           fsr0h	equ	0xFEA
  1280                           fsr0l	equ	0xFE9
  1281                           wreg	equ	0xFE8
  1282                           indf1	equ	0xFE7
  1283                           postinc1	equ	0xFE6
  1284                           postdec1	equ	0xFE5
  1285                           preinc1	equ	0xFE4
  1286                           plusw1	equ	0xFE3
  1287                           fsr1h	equ	0xFE2
  1288                           fsr1l	equ	0xFE1
  1289                           bsr	equ	0xFE0
  1290                           indf2	equ	0xFDF
  1291                           postinc2	equ	0xFDE
  1292                           postdec2	equ	0xFDD
  1293                           preinc2	equ	0xFDC
  1294                           plusw2	equ	0xFDB
  1295                           fsr2h	equ	0xFDA
  1296                           fsr2l	equ	0xFD9
  1297                           status	equ	0xFD8


Data Sizes:
    Strings     17
    Constant    0
    Data        16
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     14      30
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    getKey@key_vals	PTR unsigned char [4] size(2) Largest target is 16
		 -> main@key_vals(COMRAM[16]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_1(CODE[17]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_1(CODE[17]), 

    LCD_writeStr@data	PTR unsigned char  size(2) Largest target is 17
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_LCD_writeStr
    _main->_getKey
    _LCD_writeStr->_strlen
    _LCD_init->_LCD_functionSet
    _LCD_functionSet->_LCD_cmd
    _LCD_entryMode->_LCD_cmd
    _LCD_dispControl->_LCD_cmd
    _LCD_clear->_LCD_cmd
    _LCD_cmd->_LCD_rdy

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0    2037
                                             12 COMRAM     2     2      0
                          _LCD_clear
                           _LCD_init
                       _LCD_writeStr
                             _getKey
                         _ports_init
 ---------------------------------------------------------------------------------
 (1) _ports_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getKey                                              12    10      2     351
                                              0 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (1) _LCD_writeStr                                         8     6      2     370
                                              4 COMRAM     8     6      2
                            _LCD_rdy
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             0     0      0    1284
                          _LCD_clear
                    _LCD_dispControl
                      _LCD_entryMode
                    _LCD_functionSet
 ---------------------------------------------------------------------------------
 (2) _LCD_functionSet                                      8     2      6     324
                                              2 COMRAM     8     2      6
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_entryMode                                        4     0      4     378
                                              2 COMRAM     4     0      4
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_dispControl                                      7     1      6     552
                                              2 COMRAM     7     1      6
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_clear                                            0     0      0      30
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (3) _LCD_cmd                                              1     1      0      30
                                              1 COMRAM     1     1      0
                            _LCD_rdy
 ---------------------------------------------------------------------------------
 (2) _LCD_rdy                                              1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_clear
     _LCD_cmd
       _LCD_rdy
   _LCD_init
     _LCD_clear
       _LCD_cmd
         _LCD_rdy
     _LCD_dispControl
       _LCD_cmd
         _LCD_rdy
     _LCD_entryMode
       _LCD_cmd
         _LCD_rdy
     _LCD_functionSet
       _LCD_cmd
         _LCD_rdy
   _LCD_writeStr
     _LCD_rdy
     _strlen
   _getKey
   _ports_init

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      E      1E       1       31.6%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1E       6        0.0%
DATA                 0      0      1E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sun Nov 29 22:50:16 2020

                      l62 0B1A                        l71 0AF4                        l83 0ADC  
                      l59 098C                        l68 0B12                        l77 0A98  
                      l93 08E4                        l87 0A48                        l95 093A  
                      l89 0A6C                        u10 0A68                        u11 0A64  
            __CFG_CP0$OFF 000000              __CFG_CP1$OFF 000000              __CFG_CP2$OFF 000000  
            __CFG_CP3$OFF 000000               __CFG_LVP$ON 000000                       l111 09CA  
                     l122 0814                       l830 0A3A                       l840 0A52  
                     l832 0A3E                       l842 0A54                       l834 0A40  
                     l850 0AC6                       l844 0A56                       l836 0A42  
                     l860 0AD2                       l852 0ACA                       l828 0A04  
                     l940 09B8                       l838 0A4C                       l846 0A58  
                     l862 0AD6                       l854 0ACC                       l934 098E  
                     l848 0A68                       l864 0AD8                       l856 0ACE  
                     l936 09B4                       l866 0ADA                       l858 0AD0  
                     l938 09B6                       l868 0B14              __CFG_CPB$OFF 000000  
                     u110 09F8                       u111 09F4                       u120 093A  
                     u121 0936                       u130 085A                       u131 0856  
                     u140 0890                       u141 088C                       u150 08B6  
                     u151 08B2              __CFG_CPD$OFF 000000                       u187 090E  
                     wreg 000FE8    __size_of_LCD_entryMode 000E  __size_of_LCD_dispControl 0018  
         __end_of_LCD_cmd 0ADE           __end_of_LCD_rdy 0A6E                      l1102 0820  
                    l1120 0874                      l1112 083A                      l1104 0828  
                    l1122 0890                      l1114 085A                      l1106 082C  
                    l1130 0A0A                      l1060 09CC                      l1124 0896  
                    l1116 085C                      l1140 0A2E                      l1132 0A0E  
                    l1054 0A6E                      l1070 093C                      l1062 09D8  
                    l1126 089A                      l1118 0870                      l1134 0A12  
                    l1056 0ADE                      l1064 09DC                      l1080 08D8  
                    l1072 08BC                      l1136 0A1E                      l1128 0A06  
                    l1058 0B06                      l1066 09F8                      l1090 0908  
                    l1082 08E8                      l1074 08C0                      l1138 0A22  
                    l1092 0918                      l1084 0902                      l1076 08C2  
                    l1086 0904                      l1094 091C                      l1078 08C4  
                    l1088 0906                      l1096 0814                      STR_1 0801  
                    _LATA 000F89                      _LATB 000F8A                      _LATC 000F8B  
                    _LATD 000F8C                      _WPUB 000F85                      _main 0A06  
                    fsr1l 000FE1             __CFG_BORV$190 000000                      start 0000  
           __CFG_IESO$OFF 000000        __size_of_LCD_clear 0008             __CFG_MCLRE$ON 000000  
            ___param_bank 000000          __end_of_LCD_init 098E                     ?_main 0011  
                   _PORTB 000F81                     _PORTD 000F83                     _TRISA 000F92  
                   _TRISB 000F93                     _TRISD 000F95              main@key_vals 0001  
           __CFG_WRT0$OFF 000000             __CFG_WRT1$OFF 000000             __CFG_WRT2$OFF 000000  
           __CFG_WRT3$OFF 000000            __CFG_EBTR0$OFF 000000            __CFG_FCMEN$OFF 000000  
          __CFG_EBTR1$OFF 000000            __CFG_EBTR2$OFF 000000            __CFG_EBTR3$OFF 000000  
           __CFG_WRTB$OFF 000000             __CFG_WRTC$OFF 000000             __CFG_WRTD$OFF 000000  
          __CFG_EBTRB$OFF 000000                     tablat 000FF5                     status 000FD8  
          __CFG_T3CMX$RC0 000000            __CFG_ICPRT$OFF 000000            __CFG_PBADEN$ON 000000  
           ?_LCD_writeStr 0015             _LCD_entryMode 0B06           __initialization 0A9A  
            __end_of_main 0A3A               LCD_rdy@busy 0011            __CFG_PCLKEN$ON 000000  
         LCD_entryMode@ID 0013           LCD_entryMode@SH 0015                    ??_main 001D  
           __activetblptr 000002                 ??_LCD_cmd 0012                 ??_LCD_rdy 0011  
       __end_of_LCD_clear 0B1C            __CFG_SDOMX$RB3 000000           __CFG_CCP2MX$RC1 000000  
__size_of_LCD_functionSet 002C                    _ANSELA 000F5B                    _ANSELB 000F5C  
                  _ANSELC 000F5D                    _ANSELD 000F5E            __CFG_WDTEN$OFF 000000  
       ??_LCD_dispControl 0019            ??_LCD_writeStr 0017            ?_LCD_entryMode 0013  
          __CFG_XINST$OFF 000000            __CFG_STVREN$ON 000000                    _getKey 0814  
                  _strlen 09CC              __pdataCOMRAM 0001              __mediumconst 0000  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
    __CFG_LS48MHZ$SYS24X4 000000                __accesstop 0060   __end_of__initialization 0ABA  
               ?_LCD_init 0011             ___rparam_used 000001            __pcstackCOMRAM 0011  
        __CFG_nPWRTEN$OFF 000000         ??_LCD_functionSet 0019                ??_LCD_init 001B  
         ??_LCD_entryMode 0017         __CFG_PLLSEL$PLL4X 000000                   ?_getKey 0011  
                 ?_strlen 0011                   _INTCON2 000FF1                   _LCD_cmd 0AC4  
                 _LCD_rdy 0A3A      __end_of_LCD_writeStr 093C                   __Hparam 0000  
                 __Lparam 0000            getKey@bit_cols 001C            getKey@bit_rows 001B  
         __size_of_getKey 00A8              __psmallconst 0800          LCD_functionSet@F 0017  
        LCD_functionSet@N 0015                   __pcinit 0A9A          LCD_writeStr@data 0015  
                 __ramtop 0800                   __ptext0 0A06                   __ptext1 098E  
                 __ptext2 0814                   __ptext3 08BC                   __ptext4 09CC  
                 __ptext5 093C                   __ptext6 0A6E                   __ptext7 0B06  
                 __ptext8 0ADE                   __ptext9 0B14           __size_of_strlen 003A  
          getKey@key_vals 0011           _LCD_dispControl 0ADE                   getKey@i 0016  
                 getKey@j 0018                 _LCD_clear 0B14      end_of_initialization 0ABA  
           __Lmediumconst 0000                getKey@cols 0015                getKey@rows 001A  
                 postdec1 000FE5                   postinc0 000FEE                   strlen@a 0013  
                 strlen@s 0011                 _PORTCbits 000F82                 _TRISCbits 000F94  
              _ports_init 098E                ?_LCD_clear 0011                main@opIdx2 001E  
       __size_of_LCD_init 0052   __end_of_LCD_dispControl 0AF6             __pidataCOMRAM 0AF6  
          __end_of_getKey 08BC     __size_of_LCD_writeStr 0080                LCD_cmd@cmd 0012  
          __end_of_strlen 0A06       start_initialization 0A9A           _LCD_functionSet 0A6E  
         __CFG_nLPBOR$OFF 000000              _LCD_writeStr 08BC                  ??_getKey 0013  
                ??_strlen 0013                  ?_LCD_cmd 0011                  ?_LCD_rdy 0011  
             ?_ports_init 0011               ??_LCD_clear 0013     __end_of_LCD_entryMode 0B14  
      LCD_writeStr@length 0019             LCD_writeStr@i 001B   __end_of_LCD_functionSet 0A9A  
        ?_LCD_dispControl 0013               __smallconst 0800                  _LCD_init 093C  
        __CFG_WDTPS$32768 000000       __size_of_ports_init 003E         __CFG_CFGPLLEN$OFF 000000  
        __size_of_LCD_cmd 001A          __size_of_LCD_rdy 0034                 copy_data0 0AAE  
                __Hrparam 0000                  __Lrparam 0000        __CFG_BOREN$SBORDIS 000000  
        ?_LCD_functionSet 0013         LCD_functionSet@DL 0013                  __ptext10 0AC4  
                __ptext11 0A3A             __size_of_main 0034          LCD_dispControl@B 0017  
        LCD_dispControl@C 0015          LCD_dispControl@D 0013              ??_ports_init 0011  
             getKey@value 0014      __CFG_CPUDIV$NOCLKDIV 000000        __end_of_ports_init 09CC  
      __CFG_FOSC$INTOSCIO 000000  
