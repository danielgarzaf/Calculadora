

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sun Jan 10 03:21:13 2021

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    33                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    34  0000                     
    35                           ; Version 2.10
    36                           ; Generated 31/07/2019 GMT
    37                           ; 
    38                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC18F45K50 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     
    70                           	psect	idataCOMRAM
    71  001306                     __pidataCOMRAM:
    72                           	opt callstack 0
    73                           
    74                           ;initializer for main@key_vals
    75  001306  31                 	db	49
    76  001307  32                 	db	50
    77  001308  33                 	db	51
    78  001309  2B                 	db	43
    79  00130A  34                 	db	52
    80  00130B  35                 	db	53
    81  00130C  36                 	db	54
    82  00130D  2D                 	db	45
    83  00130E  37                 	db	55
    84  00130F  38                 	db	56
    85  001310  39                 	db	57
    86  001311  2A                 	db	42
    87  001312  52                 	db	82
    88  001313  30                 	db	48
    89  001314  23                 	db	35
    90  001315  2F                 	db	47
    91  0000                     _ANSELD	set	3934
    92  0000                     _ANSELC	set	3933
    93  0000                     _ANSELB	set	3932
    94  0000                     _ANSELA	set	3931
    95  0000                     _PORTD	set	3971
    96  0000                     _PORTCbits	set	3970
    97  0000                     _PORTB	set	3969
    98  0000                     _LATD	set	3980
    99  0000                     _TRISD	set	3989
   100  0000                     _LATC	set	3979
   101  0000                     _TRISCbits	set	3988
   102  0000                     _WPUB	set	3973
   103  0000                     _INTCON2	set	4081
   104  0000                     _LATB	set	3978
   105  0000                     _TRISB	set	3987
   106  0000                     _LATA	set	3977
   107  0000                     _TRISA	set	3986
   108                           
   109                           	psect	smallconst
   110  000800                     __psmallconst:
   111                           	opt callstack 0
   112  000800  00                 	db	0
   113  000801                     STR_2:
   114  000801  4F                 	db	79	;'O'
   115  000802  70                 	db	112	;'p'
   116  000803  73                 	db	115	;'s'
   117  000804  3A                 	db	58	;':'
   118  000805  20                 	db	32
   119  000806  2B                 	db	43
   120  000807  2C                 	db	44
   121  000808  20                 	db	32
   122  000809  2D                 	db	45
   123  00080A  2C                 	db	44
   124  00080B  20                 	db	32
   125  00080C  2A                 	db	42
   126  00080D  2C                 	db	44
   127  00080E  20                 	db	32
   128  00080F  2F                 	db	47
   129  000810  00                 	db	0
   130  000811                     STR_1:
   131  000811  42                 	db	66	;'B'
   132  000812  61                 	db	97	;'a'
   133  000813  73                 	db	115	;'s'
   134  000814  69                 	db	105	;'i'
   135  000815  63                 	db	99	;'c'
   136  000816  20                 	db	32
   137  000817  43                 	db	67	;'C'
   138  000818  61                 	db	97	;'a'
   139  000819  6C                 	db	108	;'l'
   140  00081A  63                 	db	99	;'c'
   141  00081B  2E                 	db	46
   142  00081C  00                 	db	0
   143                           
   144                           ; #config settings
   145  00081D  00                 	db	0	; dummy byte at the end
   146  0000                     
   147                           	psect	cinit
   148  001274                     __pcinit:
   149                           	opt callstack 0
   150  001274                     start_initialization:
   151                           	opt callstack 0
   152  001274                     __initialization:
   153                           	opt callstack 0
   154                           
   155                           ; Initialize objects allocated to COMRAM (16 bytes)
   156                           ; load TBLPTR registers with __pidataCOMRAM
   157  001274  0E06               	movlw	low __pidataCOMRAM
   158  001276  6EF6               	movwf	tblptrl,c
   159  001278  0E13               	movlw	high __pidataCOMRAM
   160  00127A  6EF7               	movwf	tblptrh,c
   161  00127C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   162  00127E  6EF8               	movwf	tblptru,c
   163  001280  EE00  F038         	lfsr	0,__pdataCOMRAM
   164  001284  EE10 F010          	lfsr	1,16
   165  001288                     copy_data0:
   166  001288  0009               	tblrd		*+
   167  00128A  CFF5 FFEE          	movff	tablat,postinc0
   168  00128E  50E5               	movf	postdec1,w,c
   169  001290  50E1               	movf	fsr1l,w,c
   170  001292  E1FA               	bnz	copy_data0
   171  001294                     end_of_initialization:
   172                           	opt callstack 0
   173  001294                     __end_of__initialization:
   174                           	opt callstack 0
   175  001294  0E00               	movlw	low (__Lmediumconst shr (0+16))
   176  001296  6EF8               	movwf	tblptru,c
   177  001298  0100               	movlb	0
   178  00129A  EF08  F005         	goto	_main	;jump to C main() function
   179                           
   180                           	psect	dataCOMRAM
   181  000038                     __pdataCOMRAM:
   182                           	opt callstack 0
   183  000038                     main@key_vals:
   184                           	opt callstack 0
   185  000038                     	ds	16
   186                           
   187                           	psect	cstackCOMRAM
   188  000001                     __pcstackCOMRAM:
   189                           	opt callstack 0
   190  000001                     ?_strlen:
   191                           	opt callstack 0
   192  000001                     ?___lmul:
   193                           	opt callstack 0
   194  000001                     ?___lldiv:
   195                           	opt callstack 0
   196  000001                     ?___aldiv:
   197                           	opt callstack 0
   198  000001                     ?___almod:
   199                           	opt callstack 0
   200  000001                     getVal@key:
   201                           	opt callstack 0
   202  000001                     LCD_rdy@busy:
   203                           	opt callstack 0
   204  000001                     getKey@key_vals:
   205                           	opt callstack 0
   206  000001                     strlen@s:
   207                           	opt callstack 0
   208  000001                     ___lmul@multiplier:
   209                           	opt callstack 0
   210  000001                     ___lldiv@dividend:
   211                           	opt callstack 0
   212  000001                     ___aldiv@dividend:
   213                           	opt callstack 0
   214  000001                     ___almod@dividend:
   215                           	opt callstack 0
   216                           
   217                           ; 4 bytes @ 0x0
   218  000001                     	ds	1
   219  000002                     LCD_cmd@cmd:
   220                           	opt callstack 0
   221  000002                     LCD_writeChar@data:
   222                           	opt callstack 0
   223                           
   224                           ; 1 bytes @ 0x1
   225  000002                     	ds	1
   226  000003                     ??_getKey:
   227  000003                     LCD_entryMode@ID:
   228                           	opt callstack 0
   229  000003                     LCD_dispControl@D:
   230                           	opt callstack 0
   231  000003                     LCD_cursor@SC:
   232                           	opt callstack 0
   233  000003                     LCD_functionSet@DL:
   234                           	opt callstack 0
   235  000003                     strlen@a:
   236                           	opt callstack 0
   237                           
   238                           ; 2 bytes @ 0x2
   239  000003                     	ds	2
   240  000005                     LCD_entryMode@SH:
   241                           	opt callstack 0
   242  000005                     LCD_dispControl@C:
   243                           	opt callstack 0
   244  000005                     LCD_cursor@RL:
   245                           	opt callstack 0
   246  000005                     LCD_functionSet@N:
   247                           	opt callstack 0
   248  000005                     LCD_writeStr@data:
   249                           	opt callstack 0
   250  000005                     ___lmul@multiplicand:
   251                           	opt callstack 0
   252  000005                     ___lldiv@divisor:
   253                           	opt callstack 0
   254  000005                     ___aldiv@divisor:
   255                           	opt callstack 0
   256  000005                     ___almod@divisor:
   257                           	opt callstack 0
   258                           
   259                           ; 4 bytes @ 0x4
   260  000005                     	ds	2
   261  000007                     ??_LCD_writeStr:
   262  000007                     ??_LCD_cursor:
   263  000007                     getKey@value:
   264                           	opt callstack 0
   265  000007                     LCD_dispControl@B:
   266                           	opt callstack 0
   267  000007                     LCD_functionSet@F:
   268                           	opt callstack 0
   269                           
   270                           ; 2 bytes @ 0x6
   271  000007                     	ds	1
   272  000008                     getKey@cols:
   273                           	opt callstack 0
   274                           
   275                           ; 1 bytes @ 0x7
   276  000008                     	ds	1
   277  000009                     ??_LCD_dispControl:
   278  000009                     ??_LCD_functionSet:
   279  000009                     getKey@rows:
   280                           	opt callstack 0
   281  000009                     ___aldiv@counter:
   282                           	opt callstack 0
   283  000009                     ___almod@counter:
   284                           	opt callstack 0
   285  000009                     LCD_writeStr@length:
   286                           	opt callstack 0
   287  000009                     ___lmul@product:
   288                           	opt callstack 0
   289  000009                     ___lldiv@quotient:
   290                           	opt callstack 0
   291                           
   292                           ; 4 bytes @ 0x8
   293  000009                     	ds	1
   294  00000A                     getKey@bit_rows:
   295                           	opt callstack 0
   296  00000A                     ___aldiv@sign:
   297                           	opt callstack 0
   298  00000A                     ___almod@sign:
   299                           	opt callstack 0
   300                           
   301                           ; 1 bytes @ 0x9
   302  00000A                     	ds	1
   303  00000B                     getKey@bit_cols:
   304                           	opt callstack 0
   305  00000B                     LCD_writeStr@i:
   306                           	opt callstack 0
   307  00000B                     ___aldiv@quotient:
   308                           	opt callstack 0
   309                           
   310                           ; 4 bytes @ 0xA
   311  00000B                     	ds	1
   312  00000C                     getKey@i:
   313                           	opt callstack 0
   314                           
   315                           ; 2 bytes @ 0xB
   316  00000C                     	ds	1
   317  00000D                     ___lldiv@counter:
   318                           	opt callstack 0
   319                           
   320                           ; 1 bytes @ 0xC
   321  00000D                     	ds	1
   322  00000E                     ?_calculate:
   323                           	opt callstack 0
   324  00000E                     calculate@opIdx1:
   325                           	opt callstack 0
   326  00000E                     getKey@j:
   327                           	opt callstack 0
   328                           
   329                           ; 2 bytes @ 0xD
   330  00000E                     	ds	1
   331  00000F                     calculate@opIdx2:
   332                           	opt callstack 0
   333  00000F                     printCalcResult@result:
   334                           	opt callstack 0
   335                           
   336                           ; 4 bytes @ 0xE
   337  00000F                     	ds	1
   338  000010                     calculate@operators:
   339                           	opt callstack 0
   340                           
   341                           ; 2 bytes @ 0xF
   342  000010                     	ds	2
   343  000012                     ??_calculate:
   344                           
   345                           ; 1 bytes @ 0x11
   346  000012                     	ds	1
   347  000013                     printCalcResult@negativeFlag:
   348                           	opt callstack 0
   349                           
   350                           ; 1 bytes @ 0x12
   351  000013                     	ds	1
   352  000014                     printCalcResult@modulo:
   353                           	opt callstack 0
   354  000014                     calculate@operation:
   355                           	opt callstack 0
   356                           
   357                           ; 1 bytes @ 0x13
   358  000014                     	ds	1
   359  000015                     calculate@i:
   360                           	opt callstack 0
   361  000015                     printCalcResult@i:
   362                           	opt callstack 0
   363                           
   364                           ; 2 bytes @ 0x14
   365  000015                     	ds	1
   366  000016                     calculate@i_200:
   367                           	opt callstack 0
   368                           
   369                           ; 1 bytes @ 0x15
   370  000016                     	ds	1
   371  000017                     calculate@operator1:
   372                           	opt callstack 0
   373                           
   374                           ; 4 bytes @ 0x16
   375  000017                     	ds	4
   376  00001B                     calculate@operator2:
   377                           	opt callstack 0
   378                           
   379                           ; 4 bytes @ 0x1A
   380  00001B                     	ds	4
   381  00001F                     ??_main:
   382                           
   383                           ; 1 bytes @ 0x1E
   384  00001F                     	ds	2
   385  000021                     main@operators:
   386                           	opt callstack 0
   387                           
   388                           ; 14 bytes @ 0x20
   389  000021                     	ds	14
   390  00002F                     main@result:
   391                           	opt callstack 0
   392                           
   393                           ; 4 bytes @ 0x2E
   394  00002F                     	ds	4
   395  000033                     main@val:
   396                           	opt callstack 0
   397                           
   398                           ; 1 bytes @ 0x32
   399  000033                     	ds	1
   400  000034                     main@operation:
   401                           	opt callstack 0
   402                           
   403                           ; 1 bytes @ 0x33
   404  000034                     	ds	1
   405  000035                     main@opIdx2:
   406                           	opt callstack 0
   407                           
   408                           ; 1 bytes @ 0x34
   409  000035                     	ds	1
   410  000036                     main@opIdx1:
   411                           	opt callstack 0
   412                           
   413                           ; 1 bytes @ 0x35
   414  000036                     	ds	1
   415  000037                     main@key:
   416                           	opt callstack 0
   417                           
   418                           ; 1 bytes @ 0x36
   419  000037                     	ds	1
   420                           
   421 ;;
   422 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   423 ;;
   424 ;; *************** function _main *****************
   425 ;; Defined at:
   426 ;;		line 35 in file "main.c"
   427 ;; Parameters:    Size  Location     Type
   428 ;;		None
   429 ;; Auto vars:     Size  Location     Type
   430 ;;  result          4   46[COMRAM] long 
   431 ;;  key             1   54[COMRAM] unsigned char 
   432 ;;  val             1   50[COMRAM] unsigned char 
   433 ;;  operators      14   32[COMRAM] unsigned char [14]
   434 ;;  opIdx1          1   53[COMRAM] unsigned char 
   435 ;;  opIdx2          1   52[COMRAM] unsigned char 
   436 ;;  operation       1   51[COMRAM] unsigned char 
   437 ;; Return value:  Size  Location     Type
   438 ;;                  1    wreg      void 
   439 ;; Registers used:
   440 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   441 ;; Tracked objects:
   442 ;;		On entry : 0/0
   443 ;;		On exit  : 0/0
   444 ;;		Unchanged: 0/0
   445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   446 ;;      Params:         0       0       0       0       0       0       0       0       0
   447 ;;      Locals:        23       0       0       0       0       0       0       0       0
   448 ;;      Temps:          2       0       0       0       0       0       0       0       0
   449 ;;      Totals:        25       0       0       0       0       0       0       0       0
   450 ;;Total ram usage:       25 bytes
   451 ;; Hardware stack levels required when called:    4
   452 ;; This function calls:
   453 ;;		_LCD_clear
   454 ;;		_LCD_init
   455 ;;		_LCD_newLine
   456 ;;		_LCD_writeChar
   457 ;;		_LCD_writeStr
   458 ;;		_calculate
   459 ;;		_getKey
   460 ;;		_getVal
   461 ;;		_ports_init
   462 ;;		_printCalcResult
   463 ;; This function is called by:
   464 ;;		Startup code after reset
   465 ;; This function uses a non-reentrant model
   466 ;;
   467                           
   468                           	psect	text0
   469  000A10                     __ptext0:
   470                           	opt callstack 0
   471  000A10                     _main:
   472                           	opt callstack 27
   473  000A10                     
   474                           ;main.c: 38:     static char key_vals[4][4] = {{'1', '2', '3', '+'}, {'4', '5', '6', '-'
      +                          }, {'7', '8', '9', '*'},;main.c: 40:     char operation = 0;
   475  000A10  0E00               	movlw	0
   476  000A12  6E34               	movwf	main@operation^0,c
   477                           
   478                           ;main.c: 41:     char opIdx1 = 0, opIdx2 = 0;
   479  000A14  0E00               	movlw	0
   480  000A16  6E36               	movwf	main@opIdx1^0,c
   481  000A18  0E00               	movlw	0
   482  000A1A  6E35               	movwf	main@opIdx2^0,c
   483  000A1C                     
   484                           ;main.c: 42:     char operators[14];;main.c: 43:     ports_init();
   485  000A1C  ECCE  F008         	call	_ports_init	;wreg free
   486  000A20                     
   487                           ;main.c: 44:     LCD_init();
   488  000A20  ECA5  F008         	call	_LCD_init	;wreg free
   489  000A24                     
   490                           ;main.c: 47:     LCD_writeStr("Basic Calc.");
   491  000A24  0E11               	movlw	low STR_1
   492  000A26  6E05               	movwf	LCD_writeStr@data^0,c
   493  000A28  0E08               	movlw	high STR_1
   494  000A2A  6E06               	movwf	(LCD_writeStr@data+1)^0,c
   495  000A2C  EC30  F008         	call	_LCD_writeStr	;wreg free
   496  000A30                     
   497                           ;main.c: 48:     LCD_newLine();
   498  000A30  EC92  F009         	call	_LCD_newLine	;wreg free
   499  000A34                     
   500                           ;main.c: 49:     LCD_writeStr("Ops: +, -, *, /");
   501  000A34  0E01               	movlw	low STR_2
   502  000A36  6E05               	movwf	LCD_writeStr@data^0,c
   503  000A38  0E08               	movlw	high STR_2
   504  000A3A  6E06               	movwf	(LCD_writeStr@data+1)^0,c
   505  000A3C  EC30  F008         	call	_LCD_writeStr	;wreg free
   506  000A40                     
   507                           ;main.c: 50:     _delay((unsigned long)((5000)*(1000000/4000.0)));
   508  000A40  0E07               	movlw	7
   509  000A42  6E20               	movwf	(??_main+1)^0,c
   510  000A44  0E58               	movlw	88
   511  000A46  6E1F               	movwf	??_main^0,c
   512  000A48  0E5A               	movlw	90
   513  000A4A                     u727:
   514  000A4A  2EE8               	decfsz	wreg,f,c
   515  000A4C  D7FE               	bra	u727
   516  000A4E  2E1F               	decfsz	??_main^0,f,c
   517  000A50  D7FC               	bra	u727
   518  000A52  2E20               	decfsz	(??_main+1)^0,f,c
   519  000A54  D7FA               	bra	u727
   520  000A56                     
   521                           ;main.c: 51:     LCD_clear();
   522  000A56  EC9A  F009         	call	_LCD_clear	;wreg free
   523  000A5A                     l1596:
   524                           
   525                           ;main.c: 57:         char key = getKey(key_vals);
   526  000A5A  0E38               	movlw	low main@key_vals
   527  000A5C  6E01               	movwf	getKey@key_vals^0,c
   528  000A5E  0E00               	movlw	high main@key_vals
   529  000A60  6E02               	movwf	(getKey@key_vals+1)^0,c
   530  000A62  EC70  F007         	call	_getKey	;wreg free
   531  000A66  6E37               	movwf	main@key^0,c
   532  000A68                     
   533                           ;main.c: 58:         char val = getVal(key);
   534  000A68  5037               	movf	main@key^0,w,c
   535  000A6A  EC96  F009         	call	_getVal
   536  000A6E  6E33               	movwf	main@val^0,c
   537  000A70                     
   538                           ;main.c: 60:         if (key == '+' || key == '-' || key == '*' || key == '/') {
   539  000A70  0E2B               	movlw	43
   540  000A72  1837               	xorwf	main@key^0,w,c
   541  000A74  B4D8               	btfsc	status,2,c
   542  000A76  EF3F  F005         	goto	u651
   543  000A7A  EF41  F005         	goto	u650
   544  000A7E                     u651:
   545  000A7E  EF5C  F005         	goto	l1608
   546  000A82                     u650:
   547  000A82  0E2D               	movlw	45
   548  000A84  1837               	xorwf	main@key^0,w,c
   549  000A86  B4D8               	btfsc	status,2,c
   550  000A88  EF48  F005         	goto	u661
   551  000A8C  EF4A  F005         	goto	u660
   552  000A90                     u661:
   553  000A90  EF5C  F005         	goto	l1608
   554  000A94                     u660:
   555  000A94  0E2A               	movlw	42
   556  000A96  1837               	xorwf	main@key^0,w,c
   557  000A98  B4D8               	btfsc	status,2,c
   558  000A9A  EF51  F005         	goto	u671
   559  000A9E  EF53  F005         	goto	u670
   560  000AA2                     u671:
   561  000AA2  EF5C  F005         	goto	l1608
   562  000AA6                     u670:
   563  000AA6  0E2F               	movlw	47
   564  000AA8  1837               	xorwf	main@key^0,w,c
   565  000AAA  A4D8               	btfss	status,2,c
   566  000AAC  EF5A  F005         	goto	u681
   567  000AB0  EF5C  F005         	goto	u680
   568  000AB4                     u681:
   569  000AB4  EF65  F005         	goto	l1614
   570  000AB8                     u680:
   571  000AB8                     l1608:
   572                           
   573                           ;main.c: 61:             LCD_writeChar(key);
   574  000AB8  5037               	movf	main@key^0,w,c
   575  000ABA  EC5D  F009         	call	_LCD_writeChar
   576  000ABE                     
   577                           ;main.c: 62:             operation = key;
   578  000ABE  C037  F034         	movff	main@key,main@operation
   579  000AC2                     
   580                           ;main.c: 63:             opIdx2 = opIdx1;
   581  000AC2  C036  F035         	movff	main@opIdx1,main@opIdx2
   582                           
   583                           ;main.c: 64:         }
   584  000AC6  EFBF  F005         	goto	l1642
   585  000ACA                     l1614:
   586  000ACA  0E23               	movlw	35
   587  000ACC  1837               	xorwf	main@key^0,w,c
   588  000ACE  A4D8               	btfss	status,2,c
   589  000AD0  EF6C  F005         	goto	u691
   590  000AD4  EF6E  F005         	goto	u690
   591  000AD8                     u691:
   592  000AD8  EF8D  F005         	goto	l1620
   593  000ADC                     u690:
   594  000ADC                     
   595                           ;main.c: 66:             int32_t result = calculate(operation, opIdx1, opIdx2, operators
      +                          );
   596  000ADC  C036  F00E         	movff	main@opIdx1,calculate@opIdx1
   597  000AE0  C035  F00F         	movff	main@opIdx2,calculate@opIdx2
   598  000AE4  0E21               	movlw	low main@operators
   599  000AE6  6E10               	movwf	calculate@operators^0,c
   600  000AE8  0E00               	movlw	high main@operators
   601  000AEA  6E11               	movwf	(calculate@operators+1)^0,c
   602  000AEC  5034               	movf	main@operation^0,w,c
   603  000AEE  EC0F  F004         	call	_calculate
   604  000AF2  C00E  F02F         	movff	?_calculate,main@result
   605  000AF6  C00F  F030         	movff	?_calculate+1,main@result+1
   606  000AFA  C010  F031         	movff	?_calculate+2,main@result+2
   607  000AFE  C011  F032         	movff	?_calculate+3,main@result+3
   608  000B02                     
   609                           ;main.c: 67:             printCalcResult(result);
   610  000B02  C02F  F00F         	movff	main@result,printCalcResult@result
   611  000B06  C030  F010         	movff	main@result+1,printCalcResult@result+1
   612  000B0A  C031  F011         	movff	main@result+2,printCalcResult@result+2
   613  000B0E  C032  F012         	movff	main@result+3,printCalcResult@result+3
   614  000B12  ECCB  F005         	call	_printCalcResult	;wreg free
   615                           
   616                           ;main.c: 68:         }
   617  000B16  EFBF  F005         	goto	l1642
   618  000B1A                     l1620:
   619  000B1A  0E52               	movlw	82
   620  000B1C  1837               	xorwf	main@key^0,w,c
   621  000B1E  A4D8               	btfss	status,2,c
   622  000B20  EF94  F005         	goto	u701
   623  000B24  EF96  F005         	goto	u700
   624  000B28                     u701:
   625  000B28  EFA0  F005         	goto	l1630
   626  000B2C                     u700:
   627  000B2C                     
   628                           ;main.c: 70:            LCD_init();
   629  000B2C  ECA5  F008         	call	_LCD_init	;wreg free
   630  000B30                     
   631                           ;main.c: 71:            operation = 0, opIdx1 = 0, opIdx2 = 0;
   632  000B30  0E00               	movlw	0
   633  000B32  6E34               	movwf	main@operation^0,c
   634  000B34  0E00               	movlw	0
   635  000B36  6E36               	movwf	main@opIdx1^0,c
   636  000B38  0E00               	movlw	0
   637  000B3A  6E35               	movwf	main@opIdx2^0,c
   638                           
   639                           ;main.c: 72:         }
   640  000B3C  EFBF  F005         	goto	l1642
   641  000B40                     l1630:
   642                           
   643                           ;main.c: 74:             LCD_writeChar(key);
   644  000B40  5037               	movf	main@key^0,w,c
   645  000B42  EC5D  F009         	call	_LCD_writeChar
   646  000B46                     
   647                           ;main.c: 75:             if (operation) operators[opIdx2++] = val;
   648  000B46  5034               	movf	main@operation^0,w,c
   649  000B48  B4D8               	btfsc	status,2,c
   650  000B4A  EFA9  F005         	goto	u711
   651  000B4E  EFAB  F005         	goto	u710
   652  000B52                     u711:
   653  000B52  EFB6  F005         	goto	l1638
   654  000B56                     u710:
   655  000B56  0E21               	movlw	low main@operators
   656  000B58  2435               	addwf	main@opIdx2^0,w,c
   657  000B5A  6ED9               	movwf	fsr2l,c
   658  000B5C  6ADA               	clrf	fsr2h,c
   659  000B5E  0E00               	movlw	high main@operators
   660  000B60  22DA               	addwfc	fsr2h,f,c
   661  000B62  C033  FFDF         	movff	main@val,indf2
   662  000B66  2A35               	incf	main@opIdx2^0,f,c
   663  000B68  EFBF  F005         	goto	l1642
   664  000B6C                     l1638:
   665  000B6C  0E21               	movlw	low main@operators
   666  000B6E  2436               	addwf	main@opIdx1^0,w,c
   667  000B70  6ED9               	movwf	fsr2l,c
   668  000B72  6ADA               	clrf	fsr2h,c
   669  000B74  0E00               	movlw	high main@operators
   670  000B76  22DA               	addwfc	fsr2h,f,c
   671  000B78  C033  FFDF         	movff	main@val,indf2
   672  000B7C  2A36               	incf	main@opIdx1^0,f,c
   673  000B7E                     l1642:
   674                           
   675                           ;main.c: 78:         _delay((unsigned long)((200)*(1000000/4000.0)));
   676  000B7E  0E41               	movlw	65
   677  000B80  6E1F               	movwf	??_main^0,c
   678  000B82  0EEE               	movlw	238
   679  000B84                     u737:
   680  000B84  2EE8               	decfsz	wreg,f,c
   681  000B86  D7FE               	bra	u737
   682  000B88  2E1F               	decfsz	??_main^0,f,c
   683  000B8A  D7FC               	bra	u737
   684  000B8C  D000               	nop2	
   685  000B8E  EF2D  F005         	goto	l1596
   686  000B92  EF00  F000         	goto	start
   687  000B96                     __end_of_main:
   688                           	opt callstack 0
   689                           
   690 ;; *************** function _printCalcResult *****************
   691 ;; Defined at:
   692 ;;		line 108 in file "main.c"
   693 ;; Parameters:    Size  Location     Type
   694 ;;  result          4   14[COMRAM] long 
   695 ;; Auto vars:     Size  Location     Type
   696 ;;  modulo          1   19[COMRAM] unsigned char 
   697 ;;  i               2   20[COMRAM] int 
   698 ;;  negativeFlag    1   18[COMRAM] unsigned char 
   699 ;; Return value:  Size  Location     Type
   700 ;;                  1    wreg      void 
   701 ;; Registers used:
   702 ;;		wreg, status,2, status,0, cstack
   703 ;; Tracked objects:
   704 ;;		On entry : 0/0
   705 ;;		On exit  : 0/0
   706 ;;		Unchanged: 0/0
   707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   708 ;;      Params:         4       0       0       0       0       0       0       0       0
   709 ;;      Locals:         4       0       0       0       0       0       0       0       0
   710 ;;      Temps:          0       0       0       0       0       0       0       0       0
   711 ;;      Totals:         8       0       0       0       0       0       0       0       0
   712 ;;Total ram usage:        8 bytes
   713 ;; Hardware stack levels used:    1
   714 ;; Hardware stack levels required when called:    3
   715 ;; This function calls:
   716 ;;		_LCD_cursor
   717 ;;		_LCD_dispControl
   718 ;;		_LCD_entryMode
   719 ;;		_LCD_newLine
   720 ;;		_LCD_writeChar
   721 ;;		___aldiv
   722 ;;		___almod
   723 ;;		___lmul
   724 ;; This function is called by:
   725 ;;		_main
   726 ;; This function uses a non-reentrant model
   727 ;;
   728                           
   729                           	psect	text1
   730  000B96                     __ptext1:
   731                           	opt callstack 0
   732  000B96                     _printCalcResult:
   733                           	opt callstack 27
   734  000B96                     
   735                           ;main.c: 108: void printCalcResult(int32_t result);main.c: 109: {;main.c: 110:     LCD_n
      +                          ewLine();
   736  000B96  EC92  F009         	call	_LCD_newLine	;wreg free
   737  000B9A                     
   738                           ;main.c: 113:     for (int i = 0; i < 15; i++) {
   739  000B9A  0E00               	movlw	0
   740  000B9C  6E16               	movwf	(printCalcResult@i+1)^0,c
   741  000B9E  0E00               	movlw	0
   742  000BA0  6E15               	movwf	printCalcResult@i^0,c
   743  000BA2                     l1550:
   744                           
   745                           ;main.c: 114:         LCD_cursor(0, 1);
   746  000BA2  0E00               	movlw	0
   747  000BA4  6E04               	movwf	(LCD_cursor@SC+1)^0,c
   748  000BA6  0E00               	movlw	0
   749  000BA8  6E03               	movwf	LCD_cursor@SC^0,c
   750  000BAA  0E00               	movlw	0
   751  000BAC  6E06               	movwf	(LCD_cursor@RL+1)^0,c
   752  000BAE  0E01               	movlw	1
   753  000BB0  6E05               	movwf	LCD_cursor@RL^0,c
   754  000BB2  EC4F  F009         	call	_LCD_cursor	;wreg free
   755  000BB6                     
   756                           ;main.c: 115:     }
   757  000BB6  4A15               	infsnz	printCalcResult@i^0,f,c
   758  000BB8  2A16               	incf	(printCalcResult@i+1)^0,f,c
   759  000BBA  BE16               	btfsc	(printCalcResult@i+1)^0,7,c
   760  000BBC  EFE9  F005         	goto	u611
   761  000BC0  5016               	movf	(printCalcResult@i+1)^0,w,c
   762  000BC2  E109               	bnz	u610
   763  000BC4  0E0F               	movlw	15
   764  000BC6  5C15               	subwf	printCalcResult@i^0,w,c
   765  000BC8  A0D8               	btfss	status,0,c
   766  000BCA  EFE9  F005         	goto	u611
   767  000BCE  EFEB  F005         	goto	u610
   768  000BD2                     u611:
   769  000BD2  EFD1  F005         	goto	l1550
   770  000BD6                     u610:
   771  000BD6                     
   772                           ;main.c: 117:     LCD_entryMode(0,0);
   773  000BD6  0E00               	movlw	0
   774  000BD8  6E04               	movwf	(LCD_entryMode@ID+1)^0,c
   775  000BDA  0E00               	movlw	0
   776  000BDC  6E03               	movwf	LCD_entryMode@ID^0,c
   777  000BDE  0E00               	movlw	0
   778  000BE0  6E06               	movwf	(LCD_entryMode@SH+1)^0,c
   779  000BE2  0E00               	movlw	0
   780  000BE4  6E05               	movwf	LCD_entryMode@SH^0,c
   781  000BE6  EC8B  F009         	call	_LCD_entryMode	;wreg free
   782  000BEA                     
   783                           ;main.c: 119:     char negativeFlag = 0;
   784  000BEA  0E00               	movlw	0
   785  000BEC  6E13               	movwf	printCalcResult@negativeFlag^0,c
   786  000BEE                     
   787                           ;main.c: 120:     if (result < 0)
   788  000BEE  BE12               	btfsc	(printCalcResult@result+3)^0,7,c
   789  000BF0  EFFE  F005         	goto	u620
   790  000BF4  EFFC  F005         	goto	u621
   791  000BF8                     u621:
   792  000BF8  EF4F  F006         	goto	l1574
   793  000BFC                     u620:
   794  000BFC                     
   795                           ;main.c: 121:     {;main.c: 122:         result *= -1;
   796  000BFC  C00F  F001         	movff	printCalcResult@result,___lmul@multiplier
   797  000C00  C010  F002         	movff	printCalcResult@result+1,___lmul@multiplier+1
   798  000C04  C011  F003         	movff	printCalcResult@result+2,___lmul@multiplier+2
   799  000C08  C012  F004         	movff	printCalcResult@result+3,___lmul@multiplier+3
   800  000C0C  0EFF               	movlw	255
   801  000C0E  6E05               	movwf	___lmul@multiplicand^0,c
   802  000C10  0EFF               	movlw	255
   803  000C12  6E06               	movwf	(___lmul@multiplicand+1)^0,c
   804  000C14  0EFF               	movlw	255
   805  000C16  6E07               	movwf	(___lmul@multiplicand+2)^0,c
   806  000C18  0EFF               	movlw	255
   807  000C1A  6E08               	movwf	(___lmul@multiplicand+3)^0,c
   808  000C1C  EC70  F008         	call	___lmul	;wreg free
   809  000C20  C001  F00F         	movff	?___lmul,printCalcResult@result
   810  000C24  C002  F010         	movff	?___lmul+1,printCalcResult@result+1
   811  000C28  C003  F011         	movff	?___lmul+2,printCalcResult@result+2
   812  000C2C  C004  F012         	movff	?___lmul+3,printCalcResult@result+3
   813  000C30                     
   814                           ;main.c: 123:         negativeFlag = 1;
   815  000C30  0E01               	movlw	1
   816  000C32  6E13               	movwf	printCalcResult@negativeFlag^0,c
   817  000C34  EF4F  F006         	goto	l1574
   818  000C38                     l1566:
   819                           
   820                           ;main.c: 126:         char modulo = result % 10;
   821  000C38  C00F  F001         	movff	printCalcResult@result,___almod@dividend
   822  000C3C  C010  F002         	movff	printCalcResult@result+1,___almod@dividend+1
   823  000C40  C011  F003         	movff	printCalcResult@result+2,___almod@dividend+2
   824  000C44  C012  F004         	movff	printCalcResult@result+3,___almod@dividend+3
   825  000C48  0E0A               	movlw	10
   826  000C4A  6E05               	movwf	___almod@divisor^0,c
   827  000C4C  0E00               	movlw	0
   828  000C4E  6E06               	movwf	(___almod@divisor+1)^0,c
   829  000C50  0E00               	movlw	0
   830  000C52  6E07               	movwf	(___almod@divisor+2)^0,c
   831  000C54  0E00               	movlw	0
   832  000C56  6E08               	movwf	(___almod@divisor+3)^0,c
   833  000C58  ECFA  F006         	call	___almod	;wreg free
   834  000C5C  5001               	movf	?___almod^0,w,c
   835  000C5E  6E14               	movwf	printCalcResult@modulo^0,c
   836  000C60                     
   837                           ;main.c: 127:         modulo += 48;
   838  000C60  0E30               	movlw	48
   839  000C62  2614               	addwf	printCalcResult@modulo^0,f,c
   840  000C64                     
   841                           ;main.c: 128:         LCD_writeChar(modulo);
   842  000C64  5014               	movf	printCalcResult@modulo^0,w,c
   843  000C66  EC5D  F009         	call	_LCD_writeChar
   844  000C6A                     
   845                           ;main.c: 129:         result /= 10;
   846  000C6A  C00F  F001         	movff	printCalcResult@result,___aldiv@dividend
   847  000C6E  C010  F002         	movff	printCalcResult@result+1,___aldiv@dividend+1
   848  000C72  C011  F003         	movff	printCalcResult@result+2,___aldiv@dividend+2
   849  000C76  C012  F004         	movff	printCalcResult@result+3,___aldiv@dividend+3
   850  000C7A  0E0A               	movlw	10
   851  000C7C  6E05               	movwf	___aldiv@divisor^0,c
   852  000C7E  0E00               	movlw	0
   853  000C80  6E06               	movwf	(___aldiv@divisor+1)^0,c
   854  000C82  0E00               	movlw	0
   855  000C84  6E07               	movwf	(___aldiv@divisor+2)^0,c
   856  000C86  0E00               	movlw	0
   857  000C88  6E08               	movwf	(___aldiv@divisor+3)^0,c
   858  000C8A  EC74  F006         	call	___aldiv	;wreg free
   859  000C8E  C001  F00F         	movff	?___aldiv,printCalcResult@result
   860  000C92  C002  F010         	movff	?___aldiv+1,printCalcResult@result+1
   861  000C96  C003  F011         	movff	?___aldiv+2,printCalcResult@result+2
   862  000C9A  C004  F012         	movff	?___aldiv+3,printCalcResult@result+3
   863  000C9E                     l1574:
   864                           
   865                           ;main.c: 125:     while (result) {
   866  000C9E  500F               	movf	printCalcResult@result^0,w,c
   867  000CA0  1010               	iorwf	(printCalcResult@result+1)^0,w,c
   868  000CA2  1011               	iorwf	(printCalcResult@result+2)^0,w,c
   869  000CA4  1012               	iorwf	(printCalcResult@result+3)^0,w,c
   870  000CA6  A4D8               	btfss	status,2,c
   871  000CA8  EF58  F006         	goto	u631
   872  000CAC  EF5A  F006         	goto	u630
   873  000CB0                     u631:
   874  000CB0  EF1C  F006         	goto	l1566
   875  000CB4                     u630:
   876  000CB4                     
   877                           ;main.c: 131:     if (negativeFlag) LCD_writeChar('-');
   878  000CB4  5013               	movf	printCalcResult@negativeFlag^0,w,c
   879  000CB6  B4D8               	btfsc	status,2,c
   880  000CB8  EF60  F006         	goto	u641
   881  000CBC  EF62  F006         	goto	u640
   882  000CC0                     u641:
   883  000CC0  EF65  F006         	goto	l90
   884  000CC4                     u640:
   885  000CC4  0E2D               	movlw	45
   886  000CC6  EC5D  F009         	call	_LCD_writeChar
   887  000CCA                     l90:
   888                           
   889                           ;main.c: 133:     LCD_dispControl(1,0,0);
   890  000CCA  0E00               	movlw	0
   891  000CCC  6E04               	movwf	(LCD_dispControl@D+1)^0,c
   892  000CCE  0E01               	movlw	1
   893  000CD0  6E03               	movwf	LCD_dispControl@D^0,c
   894  000CD2  0E00               	movlw	0
   895  000CD4  6E06               	movwf	(LCD_dispControl@C+1)^0,c
   896  000CD6  0E00               	movlw	0
   897  000CD8  6E05               	movwf	LCD_dispControl@C^0,c
   898  000CDA  0E00               	movlw	0
   899  000CDC  6E08               	movwf	(LCD_dispControl@B+1)^0,c
   900  000CDE  0E00               	movlw	0
   901  000CE0  6E07               	movwf	LCD_dispControl@B^0,c
   902  000CE2  EC77  F009         	call	_LCD_dispControl	;wreg free
   903  000CE6  0012               	return		;funcret
   904  000CE8                     __end_of_printCalcResult:
   905                           	opt callstack 0
   906                           
   907 ;; *************** function ___almod *****************
   908 ;; Defined at:
   909 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\almod.c"
   910 ;; Parameters:    Size  Location     Type
   911 ;;  dividend        4    0[COMRAM] long 
   912 ;;  divisor         4    4[COMRAM] long 
   913 ;; Auto vars:     Size  Location     Type
   914 ;;  sign            1    9[COMRAM] unsigned char 
   915 ;;  counter         1    8[COMRAM] unsigned char 
   916 ;; Return value:  Size  Location     Type
   917 ;;                  4    0[COMRAM] long 
   918 ;; Registers used:
   919 ;;		wreg, status,2, status,0
   920 ;; Tracked objects:
   921 ;;		On entry : 0/0
   922 ;;		On exit  : 0/0
   923 ;;		Unchanged: 0/0
   924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   925 ;;      Params:         8       0       0       0       0       0       0       0       0
   926 ;;      Locals:         2       0       0       0       0       0       0       0       0
   927 ;;      Temps:          0       0       0       0       0       0       0       0       0
   928 ;;      Totals:        10       0       0       0       0       0       0       0       0
   929 ;;Total ram usage:       10 bytes
   930 ;; Hardware stack levels used:    1
   931 ;; This function calls:
   932 ;;		Nothing
   933 ;; This function is called by:
   934 ;;		_printCalcResult
   935 ;; This function uses a non-reentrant model
   936 ;;
   937                           
   938                           	psect	text2
   939  000DF4                     __ptext2:
   940                           	opt callstack 0
   941  000DF4                     ___almod:
   942                           	opt callstack 29
   943  000DF4  0E00               	movlw	0
   944  000DF6  6E0A               	movwf	___almod@sign^0,c
   945  000DF8  BE04               	btfsc	(___almod@dividend+3)^0,7,c
   946  000DFA  EF03  F007         	goto	u490
   947  000DFE  EF01  F007         	goto	u491
   948  000E02                     u491:
   949  000E02  EF0D  F007         	goto	l1406
   950  000E06                     u490:
   951  000E06  1E04               	comf	(___almod@dividend+3)^0,f,c
   952  000E08  1E03               	comf	(___almod@dividend+2)^0,f,c
   953  000E0A  1E02               	comf	(___almod@dividend+1)^0,f,c
   954  000E0C  6C01               	negf	___almod@dividend^0,c
   955  000E0E  0E00               	movlw	0
   956  000E10  2202               	addwfc	(___almod@dividend+1)^0,f,c
   957  000E12  2203               	addwfc	(___almod@dividend+2)^0,f,c
   958  000E14  2204               	addwfc	(___almod@dividend+3)^0,f,c
   959  000E16  0E01               	movlw	1
   960  000E18  6E0A               	movwf	___almod@sign^0,c
   961  000E1A                     l1406:
   962  000E1A  BE08               	btfsc	(___almod@divisor+3)^0,7,c
   963  000E1C  EF14  F007         	goto	u500
   964  000E20  EF12  F007         	goto	u501
   965  000E24                     u501:
   966  000E24  EF1C  F007         	goto	l1410
   967  000E28                     u500:
   968  000E28  1E08               	comf	(___almod@divisor+3)^0,f,c
   969  000E2A  1E07               	comf	(___almod@divisor+2)^0,f,c
   970  000E2C  1E06               	comf	(___almod@divisor+1)^0,f,c
   971  000E2E  6C05               	negf	___almod@divisor^0,c
   972  000E30  0E00               	movlw	0
   973  000E32  2206               	addwfc	(___almod@divisor+1)^0,f,c
   974  000E34  2207               	addwfc	(___almod@divisor+2)^0,f,c
   975  000E36  2208               	addwfc	(___almod@divisor+3)^0,f,c
   976  000E38                     l1410:
   977  000E38  5005               	movf	___almod@divisor^0,w,c
   978  000E3A  1006               	iorwf	(___almod@divisor+1)^0,w,c
   979  000E3C  1007               	iorwf	(___almod@divisor+2)^0,w,c
   980  000E3E  1008               	iorwf	(___almod@divisor+3)^0,w,c
   981  000E40  B4D8               	btfsc	status,2,c
   982  000E42  EF25  F007         	goto	u511
   983  000E46  EF27  F007         	goto	u510
   984  000E4A                     u511:
   985  000E4A  EF57  F007         	goto	l1426
   986  000E4E                     u510:
   987  000E4E  0E01               	movlw	1
   988  000E50  6E09               	movwf	___almod@counter^0,c
   989  000E52  EF31  F007         	goto	l1416
   990  000E56                     l1414:
   991  000E56  90D8               	bcf	status,0,c
   992  000E58  3605               	rlcf	___almod@divisor^0,f,c
   993  000E5A  3606               	rlcf	(___almod@divisor+1)^0,f,c
   994  000E5C  3607               	rlcf	(___almod@divisor+2)^0,f,c
   995  000E5E  3608               	rlcf	(___almod@divisor+3)^0,f,c
   996  000E60  2A09               	incf	___almod@counter^0,f,c
   997  000E62                     l1416:
   998  000E62  AE08               	btfss	(___almod@divisor+3)^0,7,c
   999  000E64  EF36  F007         	goto	u521
  1000  000E68  EF38  F007         	goto	u520
  1001  000E6C                     u521:
  1002  000E6C  EF2B  F007         	goto	l1414
  1003  000E70                     u520:
  1004  000E70                     l1418:
  1005  000E70  5005               	movf	___almod@divisor^0,w,c
  1006  000E72  5C01               	subwf	___almod@dividend^0,w,c
  1007  000E74  5006               	movf	(___almod@divisor+1)^0,w,c
  1008  000E76  5802               	subwfb	(___almod@dividend+1)^0,w,c
  1009  000E78  5007               	movf	(___almod@divisor+2)^0,w,c
  1010  000E7A  5803               	subwfb	(___almod@dividend+2)^0,w,c
  1011  000E7C  5008               	movf	(___almod@divisor+3)^0,w,c
  1012  000E7E  5804               	subwfb	(___almod@dividend+3)^0,w,c
  1013  000E80  A0D8               	btfss	status,0,c
  1014  000E82  EF45  F007         	goto	u531
  1015  000E86  EF47  F007         	goto	u530
  1016  000E8A                     u531:
  1017  000E8A  EF4F  F007         	goto	l1422
  1018  000E8E                     u530:
  1019  000E8E  5005               	movf	___almod@divisor^0,w,c
  1020  000E90  5E01               	subwf	___almod@dividend^0,f,c
  1021  000E92  5006               	movf	(___almod@divisor+1)^0,w,c
  1022  000E94  5A02               	subwfb	(___almod@dividend+1)^0,f,c
  1023  000E96  5007               	movf	(___almod@divisor+2)^0,w,c
  1024  000E98  5A03               	subwfb	(___almod@dividend+2)^0,f,c
  1025  000E9A  5008               	movf	(___almod@divisor+3)^0,w,c
  1026  000E9C  5A04               	subwfb	(___almod@dividend+3)^0,f,c
  1027  000E9E                     l1422:
  1028  000E9E  90D8               	bcf	status,0,c
  1029  000EA0  3208               	rrcf	(___almod@divisor+3)^0,f,c
  1030  000EA2  3207               	rrcf	(___almod@divisor+2)^0,f,c
  1031  000EA4  3206               	rrcf	(___almod@divisor+1)^0,f,c
  1032  000EA6  3205               	rrcf	___almod@divisor^0,f,c
  1033  000EA8  2E09               	decfsz	___almod@counter^0,f,c
  1034  000EAA  EF38  F007         	goto	l1418
  1035  000EAE                     l1426:
  1036  000EAE  500A               	movf	___almod@sign^0,w,c
  1037  000EB0  B4D8               	btfsc	status,2,c
  1038  000EB2  EF5D  F007         	goto	u541
  1039  000EB6  EF5F  F007         	goto	u540
  1040  000EBA                     u541:
  1041  000EBA  EF67  F007         	goto	l1430
  1042  000EBE                     u540:
  1043  000EBE  1E04               	comf	(___almod@dividend+3)^0,f,c
  1044  000EC0  1E03               	comf	(___almod@dividend+2)^0,f,c
  1045  000EC2  1E02               	comf	(___almod@dividend+1)^0,f,c
  1046  000EC4  6C01               	negf	___almod@dividend^0,c
  1047  000EC6  0E00               	movlw	0
  1048  000EC8  2202               	addwfc	(___almod@dividend+1)^0,f,c
  1049  000ECA  2203               	addwfc	(___almod@dividend+2)^0,f,c
  1050  000ECC  2204               	addwfc	(___almod@dividend+3)^0,f,c
  1051  000ECE                     l1430:
  1052  000ECE  C001  F001         	movff	___almod@dividend,?___almod
  1053  000ED2  C002  F002         	movff	___almod@dividend+1,?___almod+1
  1054  000ED6  C003  F003         	movff	___almod@dividend+2,?___almod+2
  1055  000EDA  C004  F004         	movff	___almod@dividend+3,?___almod+3
  1056  000EDE  0012               	return		;funcret
  1057  000EE0                     __end_of___almod:
  1058                           	opt callstack 0
  1059                           
  1060 ;; *************** function ___aldiv *****************
  1061 ;; Defined at:
  1062 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\aldiv.c"
  1063 ;; Parameters:    Size  Location     Type
  1064 ;;  dividend        4    0[COMRAM] long 
  1065 ;;  divisor         4    4[COMRAM] long 
  1066 ;; Auto vars:     Size  Location     Type
  1067 ;;  quotient        4   10[COMRAM] long 
  1068 ;;  sign            1    9[COMRAM] unsigned char 
  1069 ;;  counter         1    8[COMRAM] unsigned char 
  1070 ;; Return value:  Size  Location     Type
  1071 ;;                  4    0[COMRAM] long 
  1072 ;; Registers used:
  1073 ;;		wreg, status,2, status,0
  1074 ;; Tracked objects:
  1075 ;;		On entry : 0/0
  1076 ;;		On exit  : 0/0
  1077 ;;		Unchanged: 0/0
  1078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1079 ;;      Params:         8       0       0       0       0       0       0       0       0
  1080 ;;      Locals:         6       0       0       0       0       0       0       0       0
  1081 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1082 ;;      Totals:        14       0       0       0       0       0       0       0       0
  1083 ;;Total ram usage:       14 bytes
  1084 ;; Hardware stack levels used:    1
  1085 ;; This function calls:
  1086 ;;		Nothing
  1087 ;; This function is called by:
  1088 ;;		_printCalcResult
  1089 ;; This function uses a non-reentrant model
  1090 ;;
  1091                           
  1092                           	psect	text3
  1093  000CE8                     __ptext3:
  1094                           	opt callstack 0
  1095  000CE8                     ___aldiv:
  1096                           	opt callstack 29
  1097  000CE8  0E00               	movlw	0
  1098  000CEA  6E0A               	movwf	___aldiv@sign^0,c
  1099  000CEC  BE08               	btfsc	(___aldiv@divisor+3)^0,7,c
  1100  000CEE  EF7D  F006         	goto	u430
  1101  000CF2  EF7B  F006         	goto	u431
  1102  000CF6                     u431:
  1103  000CF6  EF87  F006         	goto	l1362
  1104  000CFA                     u430:
  1105  000CFA  1E08               	comf	(___aldiv@divisor+3)^0,f,c
  1106  000CFC  1E07               	comf	(___aldiv@divisor+2)^0,f,c
  1107  000CFE  1E06               	comf	(___aldiv@divisor+1)^0,f,c
  1108  000D00  6C05               	negf	___aldiv@divisor^0,c
  1109  000D02  0E00               	movlw	0
  1110  000D04  2206               	addwfc	(___aldiv@divisor+1)^0,f,c
  1111  000D06  2207               	addwfc	(___aldiv@divisor+2)^0,f,c
  1112  000D08  2208               	addwfc	(___aldiv@divisor+3)^0,f,c
  1113  000D0A  0E01               	movlw	1
  1114  000D0C  6E0A               	movwf	___aldiv@sign^0,c
  1115  000D0E                     l1362:
  1116  000D0E  BE04               	btfsc	(___aldiv@dividend+3)^0,7,c
  1117  000D10  EF8E  F006         	goto	u440
  1118  000D14  EF8C  F006         	goto	u441
  1119  000D18                     u441:
  1120  000D18  EF98  F006         	goto	l1368
  1121  000D1C                     u440:
  1122  000D1C  1E04               	comf	(___aldiv@dividend+3)^0,f,c
  1123  000D1E  1E03               	comf	(___aldiv@dividend+2)^0,f,c
  1124  000D20  1E02               	comf	(___aldiv@dividend+1)^0,f,c
  1125  000D22  6C01               	negf	___aldiv@dividend^0,c
  1126  000D24  0E00               	movlw	0
  1127  000D26  2202               	addwfc	(___aldiv@dividend+1)^0,f,c
  1128  000D28  2203               	addwfc	(___aldiv@dividend+2)^0,f,c
  1129  000D2A  2204               	addwfc	(___aldiv@dividend+3)^0,f,c
  1130  000D2C  0E01               	movlw	1
  1131  000D2E  1A0A               	xorwf	___aldiv@sign^0,f,c
  1132  000D30                     l1368:
  1133  000D30  0E00               	movlw	0
  1134  000D32  6E0B               	movwf	___aldiv@quotient^0,c
  1135  000D34  0E00               	movlw	0
  1136  000D36  6E0C               	movwf	(___aldiv@quotient+1)^0,c
  1137  000D38  0E00               	movlw	0
  1138  000D3A  6E0D               	movwf	(___aldiv@quotient+2)^0,c
  1139  000D3C  0E00               	movlw	0
  1140  000D3E  6E0E               	movwf	(___aldiv@quotient+3)^0,c
  1141  000D40  5005               	movf	___aldiv@divisor^0,w,c
  1142  000D42  1006               	iorwf	(___aldiv@divisor+1)^0,w,c
  1143  000D44  1007               	iorwf	(___aldiv@divisor+2)^0,w,c
  1144  000D46  1008               	iorwf	(___aldiv@divisor+3)^0,w,c
  1145  000D48  B4D8               	btfsc	status,2,c
  1146  000D4A  EFA9  F006         	goto	u451
  1147  000D4E  EFAB  F006         	goto	u450
  1148  000D52                     u451:
  1149  000D52  EFE1  F006         	goto	l1390
  1150  000D56                     u450:
  1151  000D56  0E01               	movlw	1
  1152  000D58  6E09               	movwf	___aldiv@counter^0,c
  1153  000D5A  EFB5  F006         	goto	l1376
  1154  000D5E                     l1374:
  1155  000D5E  90D8               	bcf	status,0,c
  1156  000D60  3605               	rlcf	___aldiv@divisor^0,f,c
  1157  000D62  3606               	rlcf	(___aldiv@divisor+1)^0,f,c
  1158  000D64  3607               	rlcf	(___aldiv@divisor+2)^0,f,c
  1159  000D66  3608               	rlcf	(___aldiv@divisor+3)^0,f,c
  1160  000D68  2A09               	incf	___aldiv@counter^0,f,c
  1161  000D6A                     l1376:
  1162  000D6A  AE08               	btfss	(___aldiv@divisor+3)^0,7,c
  1163  000D6C  EFBA  F006         	goto	u461
  1164  000D70  EFBC  F006         	goto	u460
  1165  000D74                     u461:
  1166  000D74  EFAF  F006         	goto	l1374
  1167  000D78                     u460:
  1168  000D78                     l1378:
  1169  000D78  90D8               	bcf	status,0,c
  1170  000D7A  360B               	rlcf	___aldiv@quotient^0,f,c
  1171  000D7C  360C               	rlcf	(___aldiv@quotient+1)^0,f,c
  1172  000D7E  360D               	rlcf	(___aldiv@quotient+2)^0,f,c
  1173  000D80  360E               	rlcf	(___aldiv@quotient+3)^0,f,c
  1174  000D82  5005               	movf	___aldiv@divisor^0,w,c
  1175  000D84  5C01               	subwf	___aldiv@dividend^0,w,c
  1176  000D86  5006               	movf	(___aldiv@divisor+1)^0,w,c
  1177  000D88  5802               	subwfb	(___aldiv@dividend+1)^0,w,c
  1178  000D8A  5007               	movf	(___aldiv@divisor+2)^0,w,c
  1179  000D8C  5803               	subwfb	(___aldiv@dividend+2)^0,w,c
  1180  000D8E  5008               	movf	(___aldiv@divisor+3)^0,w,c
  1181  000D90  5804               	subwfb	(___aldiv@dividend+3)^0,w,c
  1182  000D92  A0D8               	btfss	status,0,c
  1183  000D94  EFCE  F006         	goto	u471
  1184  000D98  EFD0  F006         	goto	u470
  1185  000D9C                     u471:
  1186  000D9C  EFD9  F006         	goto	l1386
  1187  000DA0                     u470:
  1188  000DA0  5005               	movf	___aldiv@divisor^0,w,c
  1189  000DA2  5E01               	subwf	___aldiv@dividend^0,f,c
  1190  000DA4  5006               	movf	(___aldiv@divisor+1)^0,w,c
  1191  000DA6  5A02               	subwfb	(___aldiv@dividend+1)^0,f,c
  1192  000DA8  5007               	movf	(___aldiv@divisor+2)^0,w,c
  1193  000DAA  5A03               	subwfb	(___aldiv@dividend+2)^0,f,c
  1194  000DAC  5008               	movf	(___aldiv@divisor+3)^0,w,c
  1195  000DAE  5A04               	subwfb	(___aldiv@dividend+3)^0,f,c
  1196  000DB0  800B               	bsf	___aldiv@quotient^0,0,c
  1197  000DB2                     l1386:
  1198  000DB2  90D8               	bcf	status,0,c
  1199  000DB4  3208               	rrcf	(___aldiv@divisor+3)^0,f,c
  1200  000DB6  3207               	rrcf	(___aldiv@divisor+2)^0,f,c
  1201  000DB8  3206               	rrcf	(___aldiv@divisor+1)^0,f,c
  1202  000DBA  3205               	rrcf	___aldiv@divisor^0,f,c
  1203  000DBC  2E09               	decfsz	___aldiv@counter^0,f,c
  1204  000DBE  EFBC  F006         	goto	l1378
  1205  000DC2                     l1390:
  1206  000DC2  500A               	movf	___aldiv@sign^0,w,c
  1207  000DC4  B4D8               	btfsc	status,2,c
  1208  000DC6  EFE7  F006         	goto	u481
  1209  000DCA  EFE9  F006         	goto	u480
  1210  000DCE                     u481:
  1211  000DCE  EFF1  F006         	goto	l1394
  1212  000DD2                     u480:
  1213  000DD2  1E0E               	comf	(___aldiv@quotient+3)^0,f,c
  1214  000DD4  1E0D               	comf	(___aldiv@quotient+2)^0,f,c
  1215  000DD6  1E0C               	comf	(___aldiv@quotient+1)^0,f,c
  1216  000DD8  6C0B               	negf	___aldiv@quotient^0,c
  1217  000DDA  0E00               	movlw	0
  1218  000DDC  220C               	addwfc	(___aldiv@quotient+1)^0,f,c
  1219  000DDE  220D               	addwfc	(___aldiv@quotient+2)^0,f,c
  1220  000DE0  220E               	addwfc	(___aldiv@quotient+3)^0,f,c
  1221  000DE2                     l1394:
  1222  000DE2  C00B  F001         	movff	___aldiv@quotient,?___aldiv
  1223  000DE6  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
  1224  000DEA  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
  1225  000DEE  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
  1226  000DF2  0012               	return		;funcret
  1227  000DF4                     __end_of___aldiv:
  1228                           	opt callstack 0
  1229                           
  1230 ;; *************** function _LCD_writeChar *****************
  1231 ;; Defined at:
  1232 ;;		line 94 in file "lcd.c"
  1233 ;; Parameters:    Size  Location     Type
  1234 ;;  data            1    wreg     unsigned char 
  1235 ;; Auto vars:     Size  Location     Type
  1236 ;;  data            1    1[COMRAM] unsigned char 
  1237 ;; Return value:  Size  Location     Type
  1238 ;;                  1    wreg      void 
  1239 ;; Registers used:
  1240 ;;		wreg, status,2, status,0, cstack
  1241 ;; Tracked objects:
  1242 ;;		On entry : 0/0
  1243 ;;		On exit  : 0/0
  1244 ;;		Unchanged: 0/0
  1245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1246 ;;      Params:         0       0       0       0       0       0       0       0       0
  1247 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1248 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1249 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1250 ;;Total ram usage:        1 bytes
  1251 ;; Hardware stack levels used:    1
  1252 ;; Hardware stack levels required when called:    1
  1253 ;; This function calls:
  1254 ;;		_LCD_rdy
  1255 ;; This function is called by:
  1256 ;;		_main
  1257 ;;		_printCalcResult
  1258 ;; This function uses a non-reentrant model
  1259 ;;
  1260                           
  1261                           	psect	text4
  1262  0012BA                     __ptext4:
  1263                           	opt callstack 0
  1264  0012BA                     _LCD_writeChar:
  1265                           	opt callstack 28
  1266                           
  1267                           ;incstack = 0
  1268                           ;LCD_writeChar@data stored from wreg
  1269  0012BA  6E02               	movwf	LCD_writeChar@data^0,c
  1270  0012BC                     
  1271                           ;lcd.c: 95:     LCD_rdy();
  1272  0012BC  EC0A  F009         	call	_LCD_rdy	;wreg free
  1273  0012C0                     
  1274                           ;lcd.c: 96:     PORTCbits.RC2 = 1;
  1275  0012C0  8482               	bsf	130,2,c	;volatile
  1276  0012C2                     
  1277                           ;lcd.c: 97:     PORTCbits.RC1 = 0;
  1278  0012C2  9282               	bcf	130,1,c	;volatile
  1279  0012C4                     
  1280                           ;lcd.c: 99:     PORTCbits.RC0 = 1;
  1281  0012C4  8082               	bsf	130,0,c	;volatile
  1282  0012C6                     
  1283                           ;lcd.c: 100:     __nop();
  1284  0012C6  F000               	nop	
  1285  0012C8                     
  1286                           ;lcd.c: 101:     LATD = data;
  1287  0012C8  C002  FF8C         	movff	LCD_writeChar@data,3980	;volatile
  1288  0012CC                     
  1289                           ;lcd.c: 102:     __nop();
  1290  0012CC  F000               	nop	
  1291  0012CE                     
  1292                           ;lcd.c: 103:     PORTCbits.RC0 = 0;
  1293  0012CE  9082               	bcf	130,0,c	;volatile
  1294  0012D0                     
  1295                           ;lcd.c: 104:     __nop();
  1296  0012D0  F000               	nop	
  1297  0012D2  0012               	return		;funcret
  1298  0012D4                     __end_of_LCD_writeChar:
  1299                           	opt callstack 0
  1300                           
  1301 ;; *************** function _LCD_newLine *****************
  1302 ;; Defined at:
  1303 ;;		line 41 in file "lcd.c"
  1304 ;; Parameters:    Size  Location     Type
  1305 ;;		None
  1306 ;; Auto vars:     Size  Location     Type
  1307 ;;		None
  1308 ;; Return value:  Size  Location     Type
  1309 ;;                  1    wreg      void 
  1310 ;; Registers used:
  1311 ;;		wreg, status,2, status,0, cstack
  1312 ;; Tracked objects:
  1313 ;;		On entry : 0/0
  1314 ;;		On exit  : 0/0
  1315 ;;		Unchanged: 0/0
  1316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1317 ;;      Params:         0       0       0       0       0       0       0       0       0
  1318 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1319 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1320 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1321 ;;Total ram usage:        0 bytes
  1322 ;; Hardware stack levels used:    1
  1323 ;; Hardware stack levels required when called:    2
  1324 ;; This function calls:
  1325 ;;		_LCD_cmd
  1326 ;; This function is called by:
  1327 ;;		_main
  1328 ;;		_printCalcResult
  1329 ;; This function uses a non-reentrant model
  1330 ;;
  1331                           
  1332                           	psect	text5
  1333  001324                     __ptext5:
  1334                           	opt callstack 0
  1335  001324                     _LCD_newLine:
  1336                           	opt callstack 27
  1337  001324                     
  1338                           ;lcd.c: 42:     LCD_cmd(0xC0);
  1339  001324  0EC0               	movlw	192
  1340  001326  EC6A  F009         	call	_LCD_cmd
  1341  00132A  0012               	return		;funcret
  1342  00132C                     __end_of_LCD_newLine:
  1343                           	opt callstack 0
  1344                           
  1345 ;; *************** function _LCD_cursor *****************
  1346 ;; Defined at:
  1347 ;;		line 33 in file "lcd.c"
  1348 ;; Parameters:    Size  Location     Type
  1349 ;;  SC              2    2[COMRAM] short 
  1350 ;;  RL              2    4[COMRAM] short 
  1351 ;; Auto vars:     Size  Location     Type
  1352 ;;		None
  1353 ;; Return value:  Size  Location     Type
  1354 ;;                  1    wreg      void 
  1355 ;; Registers used:
  1356 ;;		wreg, status,2, status,0, cstack
  1357 ;; Tracked objects:
  1358 ;;		On entry : 0/0
  1359 ;;		On exit  : 0/0
  1360 ;;		Unchanged: 0/0
  1361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1362 ;;      Params:         4       0       0       0       0       0       0       0       0
  1363 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1364 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1365 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1366 ;;Total ram usage:        5 bytes
  1367 ;; Hardware stack levels used:    1
  1368 ;; Hardware stack levels required when called:    2
  1369 ;; This function calls:
  1370 ;;		_LCD_cmd
  1371 ;; This function is called by:
  1372 ;;		_printCalcResult
  1373 ;; This function uses a non-reentrant model
  1374 ;;
  1375                           
  1376                           	psect	text6
  1377  00129E                     __ptext6:
  1378                           	opt callstack 0
  1379  00129E                     _LCD_cursor:
  1380                           	opt callstack 27
  1381  00129E                     
  1382                           ;lcd.c: 34:     LCD_cmd(0b00010000 | SC << 3 | RL << 2);
  1383  00129E  C005  F007         	movff	LCD_cursor@RL,??_LCD_cursor
  1384  0012A2  90D8               	bcf	status,0,c
  1385  0012A4  3607               	rlcf	??_LCD_cursor^0,f,c
  1386  0012A6  90D8               	bcf	status,0,c
  1387  0012A8  3607               	rlcf	??_LCD_cursor^0,f,c
  1388  0012AA  3803               	swapf	LCD_cursor@SC^0,w,c
  1389  0012AC  42E8               	rrncf	wreg,f,c
  1390  0012AE  0BF8               	andlw	248
  1391  0012B0  1007               	iorwf	??_LCD_cursor^0,w,c
  1392  0012B2  0910               	iorlw	16
  1393  0012B4  EC6A  F009         	call	_LCD_cmd
  1394  0012B8  0012               	return		;funcret
  1395  0012BA                     __end_of_LCD_cursor:
  1396                           	opt callstack 0
  1397                           
  1398 ;; *************** function _ports_init *****************
  1399 ;; Defined at:
  1400 ;;		line 83 in file "main.c"
  1401 ;; Parameters:    Size  Location     Type
  1402 ;;		None
  1403 ;; Auto vars:     Size  Location     Type
  1404 ;;		None
  1405 ;; Return value:  Size  Location     Type
  1406 ;;                  1    wreg      void 
  1407 ;; Registers used:
  1408 ;;		wreg, status,2
  1409 ;; Tracked objects:
  1410 ;;		On entry : 0/0
  1411 ;;		On exit  : 0/0
  1412 ;;		Unchanged: 0/0
  1413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1414 ;;      Params:         0       0       0       0       0       0       0       0       0
  1415 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1416 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1417 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1418 ;;Total ram usage:        0 bytes
  1419 ;; Hardware stack levels used:    1
  1420 ;; This function calls:
  1421 ;;		Nothing
  1422 ;; This function is called by:
  1423 ;;		_main
  1424 ;; This function uses a non-reentrant model
  1425 ;;
  1426                           
  1427                           	psect	text7
  1428  00119C                     __ptext7:
  1429                           	opt callstack 0
  1430  00119C                     _ports_init:
  1431                           	opt callstack 30
  1432  00119C                     
  1433                           ;main.c: 85:     ANSELA = 0;
  1434  00119C  0E00               	movlw	0
  1435  00119E  010F               	movlb	15	; () banked
  1436  0011A0  6F5B               	movwf	91,b	;volatile
  1437                           
  1438                           ;main.c: 86:     TRISA = 0;
  1439  0011A2  0E00               	movlw	0
  1440  0011A4  6E92               	movwf	146,c	;volatile
  1441                           
  1442                           ;main.c: 87:     LATA = 0;
  1443  0011A6  0E00               	movlw	0
  1444  0011A8  6E89               	movwf	137,c	;volatile
  1445                           
  1446                           ;main.c: 89:     ANSELB = 0;
  1447  0011AA  0E00               	movlw	0
  1448  0011AC  6F5C               	movwf	92,b	;volatile
  1449                           
  1450                           ;main.c: 90:     TRISB = 0b00001111;
  1451  0011AE  0E0F               	movlw	15
  1452  0011B0  6E93               	movwf	147,c	;volatile
  1453                           
  1454                           ;main.c: 91:     LATB = 0;
  1455  0011B2  0E00               	movlw	0
  1456  0011B4  6E8A               	movwf	138,c	;volatile
  1457                           
  1458                           ;main.c: 92:     INTCON2 = 0b00000000;
  1459  0011B6  0E00               	movlw	0
  1460  0011B8  6EF1               	movwf	241,c	;volatile
  1461                           
  1462                           ;main.c: 93:     WPUB = 0b00001111;;
  1463  0011BA  0E0F               	movlw	15
  1464  0011BC  6E85               	movwf	133,c	;volatile
  1465                           
  1466                           ;main.c: 96:     ANSELC = 0;
  1467  0011BE  0E00               	movlw	0
  1468  0011C0  6F5D               	movwf	93,b	;volatile
  1469  0011C2                     
  1470                           ; BSR set to: 15
  1471                           ;main.c: 97:     TRISCbits.TRISC0=0;
  1472  0011C2  9094               	bcf	148,0,c	;volatile
  1473  0011C4                     
  1474                           ; BSR set to: 15
  1475                           ;main.c: 98:     TRISCbits.TRISC2=0;
  1476  0011C4  9494               	bcf	148,2,c	;volatile
  1477  0011C6                     
  1478                           ; BSR set to: 15
  1479                           ;main.c: 99:     TRISCbits.TRISC1=0;
  1480  0011C6  9294               	bcf	148,1,c	;volatile
  1481                           
  1482                           ;main.c: 100:     LATC = 0;
  1483  0011C8  0E00               	movlw	0
  1484  0011CA  6E8B               	movwf	139,c	;volatile
  1485                           
  1486                           ;main.c: 102:     ANSELD = 0;
  1487  0011CC  0E00               	movlw	0
  1488  0011CE  6F5E               	movwf	94,b	;volatile
  1489                           
  1490                           ;main.c: 103:     TRISD = 0;
  1491  0011D0  0E00               	movlw	0
  1492  0011D2  6E95               	movwf	149,c	;volatile
  1493                           
  1494                           ;main.c: 104:     LATD = 0;
  1495  0011D4  0E00               	movlw	0
  1496  0011D6  6E8C               	movwf	140,c	;volatile
  1497  0011D8                     
  1498                           ; BSR set to: 15
  1499  0011D8  0012               	return		;funcret
  1500  0011DA                     __end_of_ports_init:
  1501                           	opt callstack 0
  1502                           
  1503 ;; *************** function _getVal *****************
  1504 ;; Defined at:
  1505 ;;		line 161 in file "main.c"
  1506 ;; Parameters:    Size  Location     Type
  1507 ;;  key             1    wreg     unsigned char 
  1508 ;; Auto vars:     Size  Location     Type
  1509 ;;  key             1    0[COMRAM] unsigned char 
  1510 ;; Return value:  Size  Location     Type
  1511 ;;                  1    wreg      unsigned char 
  1512 ;; Registers used:
  1513 ;;		wreg, status,2, status,0
  1514 ;; Tracked objects:
  1515 ;;		On entry : 0/0
  1516 ;;		On exit  : 0/0
  1517 ;;		Unchanged: 0/0
  1518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1519 ;;      Params:         0       0       0       0       0       0       0       0       0
  1520 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1521 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1522 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1523 ;;Total ram usage:        1 bytes
  1524 ;; Hardware stack levels used:    1
  1525 ;; This function calls:
  1526 ;;		Nothing
  1527 ;; This function is called by:
  1528 ;;		_main
  1529 ;; This function uses a non-reentrant model
  1530 ;;
  1531                           
  1532                           	psect	text8
  1533  00132C                     __ptext8:
  1534                           	opt callstack 0
  1535  00132C                     _getVal:
  1536                           	opt callstack 30
  1537                           
  1538                           ; BSR set to: 15
  1539                           ;incstack = 0
  1540                           ;getVal@key stored from wreg
  1541  00132C  6E01               	movwf	getVal@key^0,c
  1542  00132E                     
  1543                           ;main.c: 161: char getVal(char key);main.c: 162: {;main.c: 163:     return key - 48;
  1544  00132E  5001               	movf	getVal@key^0,w,c
  1545  001330  0FD0               	addlw	208
  1546  001332  0012               	return		;funcret
  1547  001334                     __end_of_getVal:
  1548                           	opt callstack 0
  1549                           
  1550 ;; *************** function _getKey *****************
  1551 ;; Defined at:
  1552 ;;		line 137 in file "main.c"
  1553 ;; Parameters:    Size  Location     Type
  1554 ;;  key_vals        2    0[COMRAM] PTR unsigned char [4]
  1555 ;;		 -> main@key_vals(16), 
  1556 ;; Auto vars:     Size  Location     Type
  1557 ;;  cols            1    7[COMRAM] unsigned char 
  1558 ;;  j               2   13[COMRAM] int 
  1559 ;;  bit_cols        1   10[COMRAM] unsigned char 
  1560 ;;  rows            1    8[COMRAM] unsigned char 
  1561 ;;  i               2   11[COMRAM] int 
  1562 ;;  bit_rows        1    9[COMRAM] unsigned char 
  1563 ;;  value           1    6[COMRAM] unsigned char 
  1564 ;; Return value:  Size  Location     Type
  1565 ;;                  1    wreg      unsigned char 
  1566 ;; Registers used:
  1567 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1568 ;; Tracked objects:
  1569 ;;		On entry : 0/0
  1570 ;;		On exit  : 0/0
  1571 ;;		Unchanged: 0/0
  1572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1573 ;;      Params:         2       0       0       0       0       0       0       0       0
  1574 ;;      Locals:         9       0       0       0       0       0       0       0       0
  1575 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1576 ;;      Totals:        15       0       0       0       0       0       0       0       0
  1577 ;;Total ram usage:       15 bytes
  1578 ;; Hardware stack levels used:    1
  1579 ;; This function calls:
  1580 ;;		Nothing
  1581 ;; This function is called by:
  1582 ;;		_main
  1583 ;; This function uses a non-reentrant model
  1584 ;;
  1585                           
  1586                           	psect	text9
  1587  000EE0                     __ptext9:
  1588                           	opt callstack 0
  1589  000EE0                     _getKey:
  1590                           	opt callstack 30
  1591  000EE0                     l94:
  1592  000EE0                     
  1593                           ;main.c: 140:         char bit_rows = 0b10000000;
  1594  000EE0  0E80               	movlw	128
  1595  000EE2  6E0A               	movwf	getKey@bit_rows^0,c
  1596                           
  1597                           ;main.c: 141:         char value;;main.c: 142:         for (int i = 0; i < 4; i++) {
  1598  000EE4  0E00               	movlw	0
  1599  000EE6  6E0D               	movwf	(getKey@i+1)^0,c
  1600  000EE8  0E00               	movlw	0
  1601  000EEA  6E0C               	movwf	getKey@i^0,c
  1602  000EEC                     l1466:
  1603                           
  1604                           ;main.c: 143:             char rows = ~bit_rows & 0b11110000;
  1605  000EEC  500A               	movf	getKey@bit_rows^0,w,c
  1606  000EEE  0AFF               	xorlw	255
  1607  000EF0  0BF0               	andlw	240
  1608  000EF2  6E09               	movwf	getKey@rows^0,c
  1609  000EF4                     
  1610                           ;main.c: 144:             char bit_cols = 0b00001000;
  1611  000EF4  0E08               	movlw	8
  1612  000EF6  6E0B               	movwf	getKey@bit_cols^0,c
  1613  000EF8                     
  1614                           ;main.c: 145:             LATB = rows | 0b00001111;
  1615  000EF8  5009               	movf	getKey@rows^0,w,c
  1616  000EFA  090F               	iorlw	15
  1617  000EFC  6E8A               	movwf	138,c	;volatile
  1618                           
  1619                           ;main.c: 146:             for (int j = 0; j < 4; j++) {
  1620  000EFE  0E00               	movlw	0
  1621  000F00  6E0F               	movwf	(getKey@j+1)^0,c
  1622  000F02  0E00               	movlw	0
  1623  000F04  6E0E               	movwf	getKey@j^0,c
  1624  000F06                     l1476:
  1625                           
  1626                           ;main.c: 147:                 char cols = ~bit_cols & 0b00001111;
  1627  000F06  500B               	movf	getKey@bit_cols^0,w,c
  1628  000F08  0AFF               	xorlw	255
  1629  000F0A  0B0F               	andlw	15
  1630  000F0C  6E08               	movwf	getKey@cols^0,c
  1631                           
  1632                           ;main.c: 148:                 value = rows | cols;
  1633  000F0E  5009               	movf	getKey@rows^0,w,c
  1634  000F10  1008               	iorwf	getKey@cols^0,w,c
  1635  000F12  6E07               	movwf	getKey@value^0,c
  1636                           
  1637                           ;main.c: 149:                 if (PORTB == value) {
  1638  000F14  5007               	movf	getKey@value^0,w,c
  1639  000F16  1881               	xorwf	129,w,c	;volatile
  1640  000F18  A4D8               	btfss	status,2,c
  1641  000F1A  EF91  F007         	goto	u561
  1642  000F1E  EF93  F007         	goto	u560
  1643  000F22                     u561:
  1644  000F22  EFB5  F007         	goto	l1484
  1645  000F26                     u560:
  1646  000F26                     
  1647                           ;main.c: 150:                     LATA = (PORTB & 0b00001111) << 4;
  1648  000F26  CF81 F003          	movff	3969,??_getKey	;volatile
  1649  000F2A  0E0F               	movlw	15
  1650  000F2C  1603               	andwf	??_getKey^0,f,c
  1651  000F2E  3803               	swapf	??_getKey^0,w,c
  1652  000F30  0BF0               	andlw	240
  1653  000F32  6E89               	movwf	137,c	;volatile
  1654  000F34                     
  1655                           ;main.c: 151:                     return key_vals[i][j];
  1656  000F34  C00C  F003         	movff	getKey@i,??_getKey
  1657  000F38  C00D  F004         	movff	getKey@i+1,??_getKey+1
  1658  000F3C  90D8               	bcf	status,0,c
  1659  000F3E  3603               	rlcf	??_getKey^0,f,c
  1660  000F40  3604               	rlcf	(??_getKey+1)^0,f,c
  1661  000F42  90D8               	bcf	status,0,c
  1662  000F44  3603               	rlcf	??_getKey^0,f,c
  1663  000F46  3604               	rlcf	(??_getKey+1)^0,f,c
  1664  000F48  C001  F005         	movff	getKey@key_vals,??_getKey+2
  1665  000F4C  C002  F006         	movff	getKey@key_vals+1,??_getKey+3
  1666  000F50  5003               	movf	??_getKey^0,w,c
  1667  000F52  2605               	addwf	(??_getKey+2)^0,f,c
  1668  000F54  5004               	movf	(??_getKey+1)^0,w,c
  1669  000F56  2206               	addwfc	(??_getKey+3)^0,f,c
  1670  000F58  500E               	movf	getKey@j^0,w,c
  1671  000F5A  2405               	addwf	(??_getKey+2)^0,w,c
  1672  000F5C  6ED9               	movwf	fsr2l,c
  1673  000F5E  500F               	movf	(getKey@j+1)^0,w,c
  1674  000F60  2006               	addwfc	(??_getKey+3)^0,w,c
  1675  000F62  6EDA               	movwf	fsr2h,c
  1676  000F64  50DF               	movf	indf2,w,c
  1677  000F66  EFDD  F007         	goto	l100
  1678  000F6A                     l1484:
  1679                           
  1680                           ;main.c: 153:                 bit_cols = bit_cols >> 1;
  1681  000F6A  90D8               	bcf	status,0,c
  1682  000F6C  300B               	rrcf	getKey@bit_cols^0,w,c
  1683  000F6E  6E0B               	movwf	getKey@bit_cols^0,c
  1684  000F70                     
  1685                           ;main.c: 154:             }
  1686  000F70  4A0E               	infsnz	getKey@j^0,f,c
  1687  000F72  2A0F               	incf	(getKey@j+1)^0,f,c
  1688  000F74  BE0F               	btfsc	(getKey@j+1)^0,7,c
  1689  000F76  EFC6  F007         	goto	u571
  1690  000F7A  500F               	movf	(getKey@j+1)^0,w,c
  1691  000F7C  E109               	bnz	u570
  1692  000F7E  0E04               	movlw	4
  1693  000F80  5C0E               	subwf	getKey@j^0,w,c
  1694  000F82  A0D8               	btfss	status,0,c
  1695  000F84  EFC6  F007         	goto	u571
  1696  000F88  EFC8  F007         	goto	u570
  1697  000F8C                     u571:
  1698  000F8C  EF83  F007         	goto	l1476
  1699  000F90                     u570:
  1700  000F90                     
  1701                           ;main.c: 155:             bit_rows = bit_rows >> 1;
  1702  000F90  90D8               	bcf	status,0,c
  1703  000F92  300A               	rrcf	getKey@bit_rows^0,w,c
  1704  000F94  6E0A               	movwf	getKey@bit_rows^0,c
  1705  000F96                     
  1706                           ;main.c: 156:         }
  1707  000F96  4A0C               	infsnz	getKey@i^0,f,c
  1708  000F98  2A0D               	incf	(getKey@i+1)^0,f,c
  1709  000F9A  BE0D               	btfsc	(getKey@i+1)^0,7,c
  1710  000F9C  EFD9  F007         	goto	u581
  1711  000FA0  500D               	movf	(getKey@i+1)^0,w,c
  1712  000FA2  E109               	bnz	u580
  1713  000FA4  0E04               	movlw	4
  1714  000FA6  5C0C               	subwf	getKey@i^0,w,c
  1715  000FA8  A0D8               	btfss	status,0,c
  1716  000FAA  EFD9  F007         	goto	u581
  1717  000FAE  EFDB  F007         	goto	u580
  1718  000FB2                     u581:
  1719  000FB2  EF76  F007         	goto	l1466
  1720  000FB6                     u580:
  1721  000FB6  EF70  F007         	goto	l94
  1722  000FBA                     l100:
  1723  000FBA  0012               	return		;funcret
  1724  000FBC                     __end_of_getKey:
  1725                           	opt callstack 0
  1726                           
  1727 ;; *************** function _calculate *****************
  1728 ;; Defined at:
  1729 ;;		line 167 in file "main.c"
  1730 ;; Parameters:    Size  Location     Type
  1731 ;;  operation       1    wreg     unsigned char 
  1732 ;;  opIdx1          1   13[COMRAM] unsigned char 
  1733 ;;  opIdx2          1   14[COMRAM] unsigned char 
  1734 ;;  operators       2   15[COMRAM] PTR unsigned char 
  1735 ;;		 -> main@operators(14), 
  1736 ;; Auto vars:     Size  Location     Type
  1737 ;;  operation       1   19[COMRAM] unsigned char 
  1738 ;;  i               1   21[COMRAM] unsigned char 
  1739 ;;  i               1   20[COMRAM] unsigned char 
  1740 ;;  operator2       4   26[COMRAM] unsigned long 
  1741 ;;  operator1       4   22[COMRAM] unsigned long 
  1742 ;; Return value:  Size  Location     Type
  1743 ;;                  4   13[COMRAM] long 
  1744 ;; Registers used:
  1745 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1746 ;; Tracked objects:
  1747 ;;		On entry : 0/0
  1748 ;;		On exit  : 0/0
  1749 ;;		Unchanged: 0/0
  1750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1751 ;;      Params:         4       0       0       0       0       0       0       0       0
  1752 ;;      Locals:        11       0       0       0       0       0       0       0       0
  1753 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1754 ;;      Totals:        17       0       0       0       0       0       0       0       0
  1755 ;;Total ram usage:       17 bytes
  1756 ;; Hardware stack levels used:    1
  1757 ;; Hardware stack levels required when called:    1
  1758 ;; This function calls:
  1759 ;;		___lldiv
  1760 ;;		___lmul
  1761 ;; This function is called by:
  1762 ;;		_main
  1763 ;; This function uses a non-reentrant model
  1764 ;;
  1765                           
  1766                           	psect	text10
  1767  00081E                     __ptext10:
  1768                           	opt callstack 0
  1769  00081E                     _calculate:
  1770                           	opt callstack 29
  1771                           
  1772                           ;incstack = 0
  1773                           ;calculate@operation stored from wreg
  1774  00081E  6E14               	movwf	calculate@operation^0,c
  1775  000820                     
  1776                           ;main.c: 167: int32_t calculate(char operation, char opIdx1, char opIdx2, char operators
      +                          []);main.c: 168: {;main.c: 169:     uint32_t operator1 = 0;
  1777  000820  0E00               	movlw	0
  1778  000822  6E17               	movwf	calculate@operator1^0,c
  1779  000824  0E00               	movlw	0
  1780  000826  6E18               	movwf	(calculate@operator1+1)^0,c
  1781  000828  0E00               	movlw	0
  1782  00082A  6E19               	movwf	(calculate@operator1+2)^0,c
  1783  00082C  0E00               	movlw	0
  1784  00082E  6E1A               	movwf	(calculate@operator1+3)^0,c
  1785                           
  1786                           ;main.c: 170:     uint32_t operator2 = 0;
  1787  000830  0E00               	movlw	0
  1788  000832  6E1B               	movwf	calculate@operator2^0,c
  1789  000834  0E00               	movlw	0
  1790  000836  6E1C               	movwf	(calculate@operator2+1)^0,c
  1791  000838  0E00               	movlw	0
  1792  00083A  6E1D               	movwf	(calculate@operator2+2)^0,c
  1793  00083C  0E00               	movlw	0
  1794  00083E  6E1E               	movwf	(calculate@operator2+3)^0,c
  1795                           
  1796                           ;main.c: 171:     for (char i = 0; i < opIdx1; i++) {
  1797  000840  0E00               	movlw	0
  1798  000842  6E15               	movwf	calculate@i^0,c
  1799  000844  EF4D  F004         	goto	l1504
  1800  000848                     l1498:
  1801                           
  1802                           ;main.c: 172:         operator1 *= 10;
  1803  000848  C017  F001         	movff	calculate@operator1,___lmul@multiplier
  1804  00084C  C018  F002         	movff	calculate@operator1+1,___lmul@multiplier+1
  1805  000850  C019  F003         	movff	calculate@operator1+2,___lmul@multiplier+2
  1806  000854  C01A  F004         	movff	calculate@operator1+3,___lmul@multiplier+3
  1807  000858  0E0A               	movlw	10
  1808  00085A  6E05               	movwf	___lmul@multiplicand^0,c
  1809  00085C  0E00               	movlw	0
  1810  00085E  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  1811  000860  0E00               	movlw	0
  1812  000862  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  1813  000864  0E00               	movlw	0
  1814  000866  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  1815  000868  EC70  F008         	call	___lmul	;wreg free
  1816  00086C  C001  F017         	movff	?___lmul,calculate@operator1
  1817  000870  C002  F018         	movff	?___lmul+1,calculate@operator1+1
  1818  000874  C003  F019         	movff	?___lmul+2,calculate@operator1+2
  1819  000878  C004  F01A         	movff	?___lmul+3,calculate@operator1+3
  1820  00087C                     
  1821                           ;main.c: 173:         operator1 += operators[i];
  1822  00087C  5015               	movf	calculate@i^0,w,c
  1823  00087E  2410               	addwf	calculate@operators^0,w,c
  1824  000880  6ED9               	movwf	fsr2l,c
  1825  000882  0E00               	movlw	0
  1826  000884  2011               	addwfc	(calculate@operators+1)^0,w,c
  1827  000886  6EDA               	movwf	fsr2h,c
  1828  000888  50DF               	movf	indf2,w,c
  1829  00088A  6E12               	movwf	??_calculate^0,c
  1830  00088C  5012               	movf	??_calculate^0,w,c
  1831  00088E  2617               	addwf	calculate@operator1^0,f,c
  1832  000890  0E00               	movlw	0
  1833  000892  2218               	addwfc	(calculate@operator1+1)^0,f,c
  1834  000894  2219               	addwfc	(calculate@operator1+2)^0,f,c
  1835  000896  221A               	addwfc	(calculate@operator1+3)^0,f,c
  1836  000898                     
  1837                           ;main.c: 174:     }
  1838  000898  2A15               	incf	calculate@i^0,f,c
  1839  00089A                     l1504:
  1840  00089A  500E               	movf	calculate@opIdx1^0,w,c
  1841  00089C  5C15               	subwf	calculate@i^0,w,c
  1842  00089E  A0D8               	btfss	status,0,c
  1843  0008A0  EF54  F004         	goto	u591
  1844  0008A4  EF56  F004         	goto	u590
  1845  0008A8                     u591:
  1846  0008A8  EF24  F004         	goto	l1498
  1847  0008AC                     u590:
  1848  0008AC                     
  1849                           ;main.c: 175:     for (char i = opIdx1; i < opIdx2; i++) {
  1850  0008AC  C00E  F016         	movff	calculate@opIdx1,calculate@i_200
  1851  0008B0  EF83  F004         	goto	l1512
  1852  0008B4                     l1506:
  1853                           
  1854                           ;main.c: 176:         operator2 *= 10;
  1855  0008B4  C01B  F001         	movff	calculate@operator2,___lmul@multiplier
  1856  0008B8  C01C  F002         	movff	calculate@operator2+1,___lmul@multiplier+1
  1857  0008BC  C01D  F003         	movff	calculate@operator2+2,___lmul@multiplier+2
  1858  0008C0  C01E  F004         	movff	calculate@operator2+3,___lmul@multiplier+3
  1859  0008C4  0E0A               	movlw	10
  1860  0008C6  6E05               	movwf	___lmul@multiplicand^0,c
  1861  0008C8  0E00               	movlw	0
  1862  0008CA  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  1863  0008CC  0E00               	movlw	0
  1864  0008CE  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  1865  0008D0  0E00               	movlw	0
  1866  0008D2  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  1867  0008D4  EC70  F008         	call	___lmul	;wreg free
  1868  0008D8  C001  F01B         	movff	?___lmul,calculate@operator2
  1869  0008DC  C002  F01C         	movff	?___lmul+1,calculate@operator2+1
  1870  0008E0  C003  F01D         	movff	?___lmul+2,calculate@operator2+2
  1871  0008E4  C004  F01E         	movff	?___lmul+3,calculate@operator2+3
  1872  0008E8                     
  1873                           ;main.c: 177:         operator2 += operators[i];
  1874  0008E8  5016               	movf	calculate@i_200^0,w,c
  1875  0008EA  2410               	addwf	calculate@operators^0,w,c
  1876  0008EC  6ED9               	movwf	fsr2l,c
  1877  0008EE  0E00               	movlw	0
  1878  0008F0  2011               	addwfc	(calculate@operators+1)^0,w,c
  1879  0008F2  6EDA               	movwf	fsr2h,c
  1880  0008F4  50DF               	movf	indf2,w,c
  1881  0008F6  6E12               	movwf	??_calculate^0,c
  1882  0008F8  5012               	movf	??_calculate^0,w,c
  1883  0008FA  261B               	addwf	calculate@operator2^0,f,c
  1884  0008FC  0E00               	movlw	0
  1885  0008FE  221C               	addwfc	(calculate@operator2+1)^0,f,c
  1886  000900  221D               	addwfc	(calculate@operator2+2)^0,f,c
  1887  000902  221E               	addwfc	(calculate@operator2+3)^0,f,c
  1888  000904                     
  1889                           ;main.c: 178:     }
  1890  000904  2A16               	incf	calculate@i_200^0,f,c
  1891  000906                     l1512:
  1892  000906  500F               	movf	calculate@opIdx2^0,w,c
  1893  000908  5C16               	subwf	calculate@i_200^0,w,c
  1894  00090A  A0D8               	btfss	status,0,c
  1895  00090C  EF8A  F004         	goto	u601
  1896  000910  EF8C  F004         	goto	u600
  1897  000914                     u601:
  1898  000914  EF5A  F004         	goto	l1506
  1899  000918                     u600:
  1900  000918  EFE2  F004         	goto	l1532
  1901  00091C                     l1514:
  1902                           
  1903                           ;main.c: 182:             return operator1 + operator2;
  1904  00091C  501B               	movf	calculate@operator2^0,w,c
  1905  00091E  2417               	addwf	calculate@operator1^0,w,c
  1906  000920  6E0E               	movwf	?_calculate^0,c
  1907  000922  501C               	movf	(calculate@operator2+1)^0,w,c
  1908  000924  2018               	addwfc	(calculate@operator1+1)^0,w,c
  1909  000926  6E0F               	movwf	(?_calculate+1)^0,c
  1910  000928  501D               	movf	(calculate@operator2+2)^0,w,c
  1911  00092A  2019               	addwfc	(calculate@operator1+2)^0,w,c
  1912  00092C  6E10               	movwf	(?_calculate+2)^0,c
  1913  00092E  501E               	movf	(calculate@operator2+3)^0,w,c
  1914  000930  201A               	addwfc	(calculate@operator1+3)^0,w,c
  1915  000932  6E11               	movwf	(?_calculate+3)^0,c
  1916  000934  EF07  F005         	goto	l116
  1917  000938                     l1518:
  1918                           
  1919                           ;main.c: 184:             return (int32_t) (operator1 - operator2);
  1920  000938  501B               	movf	calculate@operator2^0,w,c
  1921  00093A  5C17               	subwf	calculate@operator1^0,w,c
  1922  00093C  6E0E               	movwf	?_calculate^0,c
  1923  00093E  501C               	movf	(calculate@operator2+1)^0,w,c
  1924  000940  5818               	subwfb	(calculate@operator1+1)^0,w,c
  1925  000942  6E0F               	movwf	(?_calculate+1)^0,c
  1926  000944  501D               	movf	(calculate@operator2+2)^0,w,c
  1927  000946  5819               	subwfb	(calculate@operator1+2)^0,w,c
  1928  000948  6E10               	movwf	(?_calculate+2)^0,c
  1929  00094A  501E               	movf	(calculate@operator2+3)^0,w,c
  1930  00094C  581A               	subwfb	(calculate@operator1+3)^0,w,c
  1931  00094E  6E11               	movwf	(?_calculate+3)^0,c
  1932  000950  EF07  F005         	goto	l116
  1933  000954                     l1522:
  1934                           
  1935                           ;main.c: 186:             return operator1 * operator2;
  1936  000954  C017  F001         	movff	calculate@operator1,___lmul@multiplier
  1937  000958  C018  F002         	movff	calculate@operator1+1,___lmul@multiplier+1
  1938  00095C  C019  F003         	movff	calculate@operator1+2,___lmul@multiplier+2
  1939  000960  C01A  F004         	movff	calculate@operator1+3,___lmul@multiplier+3
  1940  000964  C01B  F005         	movff	calculate@operator2,___lmul@multiplicand
  1941  000968  C01C  F006         	movff	calculate@operator2+1,___lmul@multiplicand+1
  1942  00096C  C01D  F007         	movff	calculate@operator2+2,___lmul@multiplicand+2
  1943  000970  C01E  F008         	movff	calculate@operator2+3,___lmul@multiplicand+3
  1944  000974  EC70  F008         	call	___lmul	;wreg free
  1945  000978  C001  F00E         	movff	?___lmul,?_calculate
  1946  00097C  C002  F00F         	movff	?___lmul+1,?_calculate+1
  1947  000980  C003  F010         	movff	?___lmul+2,?_calculate+2
  1948  000984  C004  F011         	movff	?___lmul+3,?_calculate+3
  1949  000988  EF07  F005         	goto	l116
  1950  00098C                     l1526:
  1951                           
  1952                           ;main.c: 188:             return operator1 / operator2;
  1953  00098C  C017  F001         	movff	calculate@operator1,___lldiv@dividend
  1954  000990  C018  F002         	movff	calculate@operator1+1,___lldiv@dividend+1
  1955  000994  C019  F003         	movff	calculate@operator1+2,___lldiv@dividend+2
  1956  000998  C01A  F004         	movff	calculate@operator1+3,___lldiv@dividend+3
  1957  00099C  C01B  F005         	movff	calculate@operator2,___lldiv@divisor
  1958  0009A0  C01C  F006         	movff	calculate@operator2+1,___lldiv@divisor+1
  1959  0009A4  C01D  F007         	movff	calculate@operator2+2,___lldiv@divisor+2
  1960  0009A8  C01E  F008         	movff	calculate@operator2+3,___lldiv@divisor+3
  1961  0009AC  ECDE  F007         	call	___lldiv	;wreg free
  1962  0009B0  C001  F00E         	movff	?___lldiv,?_calculate
  1963  0009B4  C002  F00F         	movff	?___lldiv+1,?_calculate+1
  1964  0009B8  C003  F010         	movff	?___lldiv+2,?_calculate+2
  1965  0009BC  C004  F011         	movff	?___lldiv+3,?_calculate+3
  1966  0009C0  EF07  F005         	goto	l116
  1967  0009C4                     l1532:
  1968  0009C4  5014               	movf	calculate@operation^0,w,c
  1969  0009C6  6E12               	movwf	??_calculate^0,c
  1970  0009C8  6A13               	clrf	(??_calculate+1)^0,c
  1971                           
  1972                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1973                           ; Switch size 1, requested type "simple"
  1974                           ; Number of cases is 1, Range of values is 0 to 0
  1975                           ; switch strategies available:
  1976                           ; Name         Instructions Cycles
  1977                           ; simple_byte            4     3 (average)
  1978                           ;	Chosen strategy is simple_byte
  1979  0009CA  5013               	movf	(??_calculate+1)^0,w,c
  1980  0009CC  0A00               	xorlw	0	; case 0
  1981  0009CE  B4D8               	btfsc	status,2,c
  1982  0009D0  EFEC  F004         	goto	l1664
  1983  0009D4  EFFF  F004         	goto	l1534
  1984  0009D8                     l1664:
  1985                           
  1986                           ; Switch size 1, requested type "simple"
  1987                           ; Number of cases is 4, Range of values is 42 to 47
  1988                           ; switch strategies available:
  1989                           ; Name         Instructions Cycles
  1990                           ; simple_byte           13     7 (average)
  1991                           ;	Chosen strategy is simple_byte
  1992  0009D8  5012               	movf	??_calculate^0,w,c
  1993  0009DA  0A2A               	xorlw	42	; case 42
  1994  0009DC  B4D8               	btfsc	status,2,c
  1995  0009DE  EFAA  F004         	goto	l1522
  1996  0009E2  0A01               	xorlw	1	; case 43
  1997  0009E4  B4D8               	btfsc	status,2,c
  1998  0009E6  EF8E  F004         	goto	l1514
  1999  0009EA  0A06               	xorlw	6	; case 45
  2000  0009EC  B4D8               	btfsc	status,2,c
  2001  0009EE  EF9C  F004         	goto	l1518
  2002  0009F2  0A02               	xorlw	2	; case 47
  2003  0009F4  B4D8               	btfsc	status,2,c
  2004  0009F6  EFC6  F004         	goto	l1526
  2005  0009FA  EFFF  F004         	goto	l1534
  2006  0009FE                     l1534:
  2007                           
  2008                           ;main.c: 190:     return 0;
  2009  0009FE  0E00               	movlw	0
  2010  000A00  6E0E               	movwf	?_calculate^0,c
  2011  000A02  0E00               	movlw	0
  2012  000A04  6E0F               	movwf	(?_calculate+1)^0,c
  2013  000A06  0E00               	movlw	0
  2014  000A08  6E10               	movwf	(?_calculate+2)^0,c
  2015  000A0A  0E00               	movlw	0
  2016  000A0C  6E11               	movwf	(?_calculate+3)^0,c
  2017  000A0E                     l116:
  2018  000A0E  0012               	return		;funcret
  2019  000A10                     __end_of_calculate:
  2020                           	opt callstack 0
  2021                           
  2022 ;; *************** function ___lmul *****************
  2023 ;; Defined at:
  2024 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul32.c"
  2025 ;; Parameters:    Size  Location     Type
  2026 ;;  multiplier      4    0[COMRAM] unsigned long 
  2027 ;;  multiplicand    4    4[COMRAM] unsigned long 
  2028 ;; Auto vars:     Size  Location     Type
  2029 ;;  product         4    8[COMRAM] unsigned long 
  2030 ;; Return value:  Size  Location     Type
  2031 ;;                  4    0[COMRAM] unsigned long 
  2032 ;; Registers used:
  2033 ;;		wreg, status,2, status,0
  2034 ;; Tracked objects:
  2035 ;;		On entry : 0/0
  2036 ;;		On exit  : 0/0
  2037 ;;		Unchanged: 0/0
  2038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2039 ;;      Params:         8       0       0       0       0       0       0       0       0
  2040 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2041 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2042 ;;      Totals:        12       0       0       0       0       0       0       0       0
  2043 ;;Total ram usage:       12 bytes
  2044 ;; Hardware stack levels used:    1
  2045 ;; This function calls:
  2046 ;;		Nothing
  2047 ;; This function is called by:
  2048 ;;		_printCalcResult
  2049 ;;		_calculate
  2050 ;; This function uses a non-reentrant model
  2051 ;;
  2052                           
  2053                           	psect	text11
  2054  0010E0                     __ptext11:
  2055                           	opt callstack 0
  2056  0010E0                     ___lmul:
  2057                           	opt callstack 29
  2058  0010E0  0E00               	movlw	0
  2059  0010E2  6E09               	movwf	___lmul@product^0,c
  2060  0010E4  0E00               	movlw	0
  2061  0010E6  6E0A               	movwf	(___lmul@product+1)^0,c
  2062  0010E8  0E00               	movlw	0
  2063  0010EA  6E0B               	movwf	(___lmul@product+2)^0,c
  2064  0010EC  0E00               	movlw	0
  2065  0010EE  6E0C               	movwf	(___lmul@product+3)^0,c
  2066  0010F0                     l1324:
  2067  0010F0  A001               	btfss	___lmul@multiplier^0,0,c
  2068  0010F2  EF7D  F008         	goto	u381
  2069  0010F6  EF7F  F008         	goto	u380
  2070  0010FA                     u381:
  2071  0010FA  EF87  F008         	goto	l1328
  2072  0010FE                     u380:
  2073  0010FE  5005               	movf	___lmul@multiplicand^0,w,c
  2074  001100  2609               	addwf	___lmul@product^0,f,c
  2075  001102  5006               	movf	(___lmul@multiplicand+1)^0,w,c
  2076  001104  220A               	addwfc	(___lmul@product+1)^0,f,c
  2077  001106  5007               	movf	(___lmul@multiplicand+2)^0,w,c
  2078  001108  220B               	addwfc	(___lmul@product+2)^0,f,c
  2079  00110A  5008               	movf	(___lmul@multiplicand+3)^0,w,c
  2080  00110C  220C               	addwfc	(___lmul@product+3)^0,f,c
  2081  00110E                     l1328:
  2082  00110E  90D8               	bcf	status,0,c
  2083  001110  3605               	rlcf	___lmul@multiplicand^0,f,c
  2084  001112  3606               	rlcf	(___lmul@multiplicand+1)^0,f,c
  2085  001114  3607               	rlcf	(___lmul@multiplicand+2)^0,f,c
  2086  001116  3608               	rlcf	(___lmul@multiplicand+3)^0,f,c
  2087  001118  90D8               	bcf	status,0,c
  2088  00111A  3204               	rrcf	(___lmul@multiplier+3)^0,f,c
  2089  00111C  3203               	rrcf	(___lmul@multiplier+2)^0,f,c
  2090  00111E  3202               	rrcf	(___lmul@multiplier+1)^0,f,c
  2091  001120  3201               	rrcf	___lmul@multiplier^0,f,c
  2092  001122  5001               	movf	___lmul@multiplier^0,w,c
  2093  001124  1002               	iorwf	(___lmul@multiplier+1)^0,w,c
  2094  001126  1003               	iorwf	(___lmul@multiplier+2)^0,w,c
  2095  001128  1004               	iorwf	(___lmul@multiplier+3)^0,w,c
  2096  00112A  A4D8               	btfss	status,2,c
  2097  00112C  EF9A  F008         	goto	u391
  2098  001130  EF9C  F008         	goto	u390
  2099  001134                     u391:
  2100  001134  EF78  F008         	goto	l1324
  2101  001138                     u390:
  2102  001138  C009  F001         	movff	___lmul@product,?___lmul
  2103  00113C  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  2104  001140  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  2105  001144  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  2106  001148  0012               	return		;funcret
  2107  00114A                     __end_of___lmul:
  2108                           	opt callstack 0
  2109                           
  2110 ;; *************** function ___lldiv *****************
  2111 ;; Defined at:
  2112 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\__lldiv.c"
  2113 ;; Parameters:    Size  Location     Type
  2114 ;;  dividend        4    0[COMRAM] unsigned long 
  2115 ;;  divisor         4    4[COMRAM] unsigned long 
  2116 ;; Auto vars:     Size  Location     Type
  2117 ;;  quotient        4    8[COMRAM] unsigned long 
  2118 ;;  counter         1   12[COMRAM] unsigned char 
  2119 ;; Return value:  Size  Location     Type
  2120 ;;                  4    0[COMRAM] unsigned long 
  2121 ;; Registers used:
  2122 ;;		wreg, status,2, status,0
  2123 ;; Tracked objects:
  2124 ;;		On entry : 0/0
  2125 ;;		On exit  : 0/0
  2126 ;;		Unchanged: 0/0
  2127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2128 ;;      Params:         8       0       0       0       0       0       0       0       0
  2129 ;;      Locals:         5       0       0       0       0       0       0       0       0
  2130 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2131 ;;      Totals:        13       0       0       0       0       0       0       0       0
  2132 ;;Total ram usage:       13 bytes
  2133 ;; Hardware stack levels used:    1
  2134 ;; This function calls:
  2135 ;;		Nothing
  2136 ;; This function is called by:
  2137 ;;		_calculate
  2138 ;; This function uses a non-reentrant model
  2139 ;;
  2140                           
  2141                           	psect	text12
  2142  000FBC                     __ptext12:
  2143                           	opt callstack 0
  2144  000FBC                     ___lldiv:
  2145                           	opt callstack 29
  2146  000FBC  0E00               	movlw	0
  2147  000FBE  6E09               	movwf	___lldiv@quotient^0,c
  2148  000FC0  0E00               	movlw	0
  2149  000FC2  6E0A               	movwf	(___lldiv@quotient+1)^0,c
  2150  000FC4  0E00               	movlw	0
  2151  000FC6  6E0B               	movwf	(___lldiv@quotient+2)^0,c
  2152  000FC8  0E00               	movlw	0
  2153  000FCA  6E0C               	movwf	(___lldiv@quotient+3)^0,c
  2154  000FCC  5005               	movf	___lldiv@divisor^0,w,c
  2155  000FCE  1006               	iorwf	(___lldiv@divisor+1)^0,w,c
  2156  000FD0  1007               	iorwf	(___lldiv@divisor+2)^0,w,c
  2157  000FD2  1008               	iorwf	(___lldiv@divisor+3)^0,w,c
  2158  000FD4  B4D8               	btfsc	status,2,c
  2159  000FD6  EFEF  F007         	goto	u401
  2160  000FDA  EFF1  F007         	goto	u400
  2161  000FDE                     u401:
  2162  000FDE  EF27  F008         	goto	l218
  2163  000FE2                     u400:
  2164  000FE2  0E01               	movlw	1
  2165  000FE4  6E0D               	movwf	___lldiv@counter^0,c
  2166  000FE6  EFFB  F007         	goto	l1340
  2167  000FEA                     l1338:
  2168  000FEA  90D8               	bcf	status,0,c
  2169  000FEC  3605               	rlcf	___lldiv@divisor^0,f,c
  2170  000FEE  3606               	rlcf	(___lldiv@divisor+1)^0,f,c
  2171  000FF0  3607               	rlcf	(___lldiv@divisor+2)^0,f,c
  2172  000FF2  3608               	rlcf	(___lldiv@divisor+3)^0,f,c
  2173  000FF4  2A0D               	incf	___lldiv@counter^0,f,c
  2174  000FF6                     l1340:
  2175  000FF6  AE08               	btfss	(___lldiv@divisor+3)^0,7,c
  2176  000FF8  EF00  F008         	goto	u411
  2177  000FFC  EF02  F008         	goto	u410
  2178  001000                     u411:
  2179  001000  EFF5  F007         	goto	l1338
  2180  001004                     u410:
  2181  001004                     l1342:
  2182  001004  90D8               	bcf	status,0,c
  2183  001006  3609               	rlcf	___lldiv@quotient^0,f,c
  2184  001008  360A               	rlcf	(___lldiv@quotient+1)^0,f,c
  2185  00100A  360B               	rlcf	(___lldiv@quotient+2)^0,f,c
  2186  00100C  360C               	rlcf	(___lldiv@quotient+3)^0,f,c
  2187  00100E  5005               	movf	___lldiv@divisor^0,w,c
  2188  001010  5C01               	subwf	___lldiv@dividend^0,w,c
  2189  001012  5006               	movf	(___lldiv@divisor+1)^0,w,c
  2190  001014  5802               	subwfb	(___lldiv@dividend+1)^0,w,c
  2191  001016  5007               	movf	(___lldiv@divisor+2)^0,w,c
  2192  001018  5803               	subwfb	(___lldiv@dividend+2)^0,w,c
  2193  00101A  5008               	movf	(___lldiv@divisor+3)^0,w,c
  2194  00101C  5804               	subwfb	(___lldiv@dividend+3)^0,w,c
  2195  00101E  A0D8               	btfss	status,0,c
  2196  001020  EF14  F008         	goto	u421
  2197  001024  EF16  F008         	goto	u420
  2198  001028                     u421:
  2199  001028  EF1F  F008         	goto	l1350
  2200  00102C                     u420:
  2201  00102C  5005               	movf	___lldiv@divisor^0,w,c
  2202  00102E  5E01               	subwf	___lldiv@dividend^0,f,c
  2203  001030  5006               	movf	(___lldiv@divisor+1)^0,w,c
  2204  001032  5A02               	subwfb	(___lldiv@dividend+1)^0,f,c
  2205  001034  5007               	movf	(___lldiv@divisor+2)^0,w,c
  2206  001036  5A03               	subwfb	(___lldiv@dividend+2)^0,f,c
  2207  001038  5008               	movf	(___lldiv@divisor+3)^0,w,c
  2208  00103A  5A04               	subwfb	(___lldiv@dividend+3)^0,f,c
  2209  00103C  8009               	bsf	___lldiv@quotient^0,0,c
  2210  00103E                     l1350:
  2211  00103E  90D8               	bcf	status,0,c
  2212  001040  3208               	rrcf	(___lldiv@divisor+3)^0,f,c
  2213  001042  3207               	rrcf	(___lldiv@divisor+2)^0,f,c
  2214  001044  3206               	rrcf	(___lldiv@divisor+1)^0,f,c
  2215  001046  3205               	rrcf	___lldiv@divisor^0,f,c
  2216  001048  2E0D               	decfsz	___lldiv@counter^0,f,c
  2217  00104A  EF02  F008         	goto	l1342
  2218  00104E                     l218:
  2219  00104E  C009  F001         	movff	___lldiv@quotient,?___lldiv
  2220  001052  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  2221  001056  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  2222  00105A  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  2223  00105E  0012               	return		;funcret
  2224  001060                     __end_of___lldiv:
  2225                           	opt callstack 0
  2226                           
  2227 ;; *************** function _LCD_writeStr *****************
  2228 ;; Defined at:
  2229 ;;		line 76 in file "lcd.c"
  2230 ;; Parameters:    Size  Location     Type
  2231 ;;  data            2    4[COMRAM] PTR unsigned char 
  2232 ;;		 -> STR_2(16), STR_1(12), 
  2233 ;; Auto vars:     Size  Location     Type
  2234 ;;  i               2   10[COMRAM] int 
  2235 ;;  length          2    8[COMRAM] short 
  2236 ;; Return value:  Size  Location     Type
  2237 ;;                  1    wreg      void 
  2238 ;; Registers used:
  2239 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2240 ;; Tracked objects:
  2241 ;;		On entry : 0/0
  2242 ;;		On exit  : 0/0
  2243 ;;		Unchanged: 0/0
  2244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2245 ;;      Params:         2       0       0       0       0       0       0       0       0
  2246 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2247 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2248 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2249 ;;Total ram usage:        8 bytes
  2250 ;; Hardware stack levels used:    1
  2251 ;; Hardware stack levels required when called:    1
  2252 ;; This function calls:
  2253 ;;		_LCD_rdy
  2254 ;;		_strlen
  2255 ;; This function is called by:
  2256 ;;		_main
  2257 ;; This function uses a non-reentrant model
  2258 ;;
  2259                           
  2260                           	psect	text13
  2261  001060                     __ptext13:
  2262                           	opt callstack 0
  2263  001060                     _LCD_writeStr:
  2264                           	opt callstack 29
  2265  001060                     
  2266                           ;lcd.c: 77:     LCD_rdy();
  2267  001060  EC0A  F009         	call	_LCD_rdy	;wreg free
  2268  001064                     
  2269                           ;lcd.c: 78:     PORTCbits.RC2 = 1;
  2270  001064  8482               	bsf	130,2,c	;volatile
  2271  001066                     
  2272                           ;lcd.c: 79:     PORTCbits.RC1 = 0;
  2273  001066  9282               	bcf	130,1,c	;volatile
  2274  001068                     
  2275                           ;lcd.c: 82:     short int length = strlen(data);
  2276  001068  C005  F001         	movff	LCD_writeStr@data,strlen@s
  2277  00106C  C006  F002         	movff	LCD_writeStr@data+1,strlen@s+1
  2278  001070  ECED  F008         	call	_strlen	;wreg free
  2279  001074  C001  F009         	movff	?_strlen,LCD_writeStr@length
  2280  001078  C002  F00A         	movff	?_strlen+1,LCD_writeStr@length+1
  2281  00107C                     
  2282                           ;lcd.c: 83:     for (int i = 0; i < length; i++){
  2283  00107C  0E00               	movlw	0
  2284  00107E  6E0C               	movwf	(LCD_writeStr@i+1)^0,c
  2285  001080  0E00               	movlw	0
  2286  001082  6E0B               	movwf	LCD_writeStr@i^0,c
  2287  001084  EF60  F008         	goto	l1458
  2288  001088                     l183:
  2289                           
  2290                           ;lcd.c: 84:         PORTCbits.RC0 = 1;
  2291  001088  8082               	bsf	130,0,c	;volatile
  2292                           
  2293                           ;lcd.c: 85:         __nop();
  2294  00108A  F000               	nop	
  2295  00108C                     
  2296                           ;lcd.c: 86:         LATD = data[i];
  2297  00108C  500B               	movf	LCD_writeStr@i^0,w,c
  2298  00108E  2405               	addwf	LCD_writeStr@data^0,w,c
  2299  001090  6E07               	movwf	??_LCD_writeStr^0,c
  2300  001092  500C               	movf	(LCD_writeStr@i+1)^0,w,c
  2301  001094  2006               	addwfc	(LCD_writeStr@data+1)^0,w,c
  2302  001096  6E08               	movwf	(??_LCD_writeStr+1)^0,c
  2303  001098  C007  FFF6         	movff	??_LCD_writeStr,tblptrl
  2304  00109C  C008  FFF7         	movff	??_LCD_writeStr+1,tblptrh
  2305  0010A0                     	if	0	;tblptru may be non-zero
  2306  0010A0                     	endif
  2307  0010A0                     	if	0	;tblptru may be non-zero
  2308  0010A0                     	endif
  2309  0010A0  0008               	tblrd		*
  2310  0010A2  CFF5 FF8C          	movff	tablat,3980	;volatile
  2311  0010A6                     
  2312                           ;lcd.c: 87:         __nop();
  2313  0010A6  F000               	nop	
  2314  0010A8                     
  2315                           ;lcd.c: 88:         PORTCbits.RC0 = 0;
  2316  0010A8  9082               	bcf	130,0,c	;volatile
  2317  0010AA                     
  2318                           ;lcd.c: 89:         __nop();
  2319  0010AA  F000               	nop	
  2320  0010AC                     
  2321                           ;lcd.c: 90:         _delay((unsigned long)((50)*(1000000/4000.0)));
  2322  0010AC  0E11               	movlw	17
  2323  0010AE  6E07               	movwf	??_LCD_writeStr^0,c
  2324  0010B0  0E3A               	movlw	58
  2325  0010B2                     u747:
  2326  0010B2  2EE8               	decfsz	wreg,f,c
  2327  0010B4  D7FE               	bra	u747
  2328  0010B6  2E07               	decfsz	??_LCD_writeStr^0,f,c
  2329  0010B8  D7FC               	bra	u747
  2330  0010BA  D000               	nop2	
  2331  0010BC                     
  2332                           ;lcd.c: 91:     }
  2333  0010BC  4A0B               	infsnz	LCD_writeStr@i^0,f,c
  2334  0010BE  2A0C               	incf	(LCD_writeStr@i+1)^0,f,c
  2335  0010C0                     l1458:
  2336  0010C0  5009               	movf	LCD_writeStr@length^0,w,c
  2337  0010C2  5C0B               	subwf	LCD_writeStr@i^0,w,c
  2338  0010C4  500C               	movf	(LCD_writeStr@i+1)^0,w,c
  2339  0010C6  0A80               	xorlw	128
  2340  0010C8  6E07               	movwf	??_LCD_writeStr^0,c
  2341  0010CA  500A               	movf	(LCD_writeStr@length+1)^0,w,c
  2342  0010CC  0A80               	xorlw	128
  2343  0010CE  5807               	subwfb	??_LCD_writeStr^0,w,c
  2344  0010D0  A0D8               	btfss	status,0,c
  2345  0010D2  EF6D  F008         	goto	u551
  2346  0010D6  EF6F  F008         	goto	u550
  2347  0010DA                     u551:
  2348  0010DA  EF44  F008         	goto	l183
  2349  0010DE                     u550:
  2350  0010DE  0012               	return		;funcret
  2351  0010E0                     __end_of_LCD_writeStr:
  2352                           	opt callstack 0
  2353                           
  2354 ;; *************** function _strlen *****************
  2355 ;; Defined at:
  2356 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strlen.c"
  2357 ;; Parameters:    Size  Location     Type
  2358 ;;  s               2    0[COMRAM] PTR const unsigned char 
  2359 ;;		 -> STR_2(16), STR_1(12), 
  2360 ;; Auto vars:     Size  Location     Type
  2361 ;;  a               2    2[COMRAM] PTR const unsigned char 
  2362 ;;		 -> STR_2(16), STR_1(12), 
  2363 ;; Return value:  Size  Location     Type
  2364 ;;                  2    0[COMRAM] unsigned int 
  2365 ;; Registers used:
  2366 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  2367 ;; Tracked objects:
  2368 ;;		On entry : 0/0
  2369 ;;		On exit  : 0/0
  2370 ;;		Unchanged: 0/0
  2371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2372 ;;      Params:         2       0       0       0       0       0       0       0       0
  2373 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2374 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2375 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2376 ;;Total ram usage:        4 bytes
  2377 ;; Hardware stack levels used:    1
  2378 ;; This function calls:
  2379 ;;		Nothing
  2380 ;; This function is called by:
  2381 ;;		_LCD_writeStr
  2382 ;; This function uses a non-reentrant model
  2383 ;;
  2384                           
  2385                           	psect	text14
  2386  0011DA                     __ptext14:
  2387                           	opt callstack 0
  2388  0011DA                     _strlen:
  2389                           	opt callstack 29
  2390  0011DA  C001  F003         	movff	strlen@s,strlen@a
  2391  0011DE  C002  F004         	movff	strlen@s+1,strlen@a+1
  2392  0011E2  EFF5  F008         	goto	l1316
  2393  0011E6                     l1314:
  2394  0011E6  4A01               	infsnz	strlen@s^0,f,c
  2395  0011E8  2A02               	incf	(strlen@s+1)^0,f,c
  2396  0011EA                     l1316:
  2397  0011EA  C001  FFF6         	movff	strlen@s,tblptrl
  2398  0011EE  C002  FFF7         	movff	strlen@s+1,tblptrh
  2399  0011F2                     	if	0	;tblptru may be non-zero
  2400  0011F2                     	endif
  2401  0011F2                     	if	0	;tblptru may be non-zero
  2402  0011F2                     	endif
  2403  0011F2  0008               	tblrd		*
  2404  0011F4  50F5               	movf	tablat,w,c
  2405  0011F6  0900               	iorlw	0
  2406  0011F8  A4D8               	btfss	status,2,c
  2407  0011FA  EF01  F009         	goto	u371
  2408  0011FE  EF03  F009         	goto	u370
  2409  001202                     u371:
  2410  001202  EFF3  F008         	goto	l1314
  2411  001206                     u370:
  2412  001206  5003               	movf	strlen@a^0,w,c
  2413  001208  5C01               	subwf	strlen@s^0,w,c
  2414  00120A  6E01               	movwf	?_strlen^0,c
  2415  00120C  5004               	movf	(strlen@a+1)^0,w,c
  2416  00120E  5802               	subwfb	(strlen@s+1)^0,w,c
  2417  001210  6E02               	movwf	(?_strlen+1)^0,c
  2418  001212  0012               	return		;funcret
  2419  001214                     __end_of_strlen:
  2420                           	opt callstack 0
  2421                           
  2422 ;; *************** function _LCD_init *****************
  2423 ;; Defined at:
  2424 ;;		line 10 in file "lcd.c"
  2425 ;; Parameters:    Size  Location     Type
  2426 ;;		None
  2427 ;; Auto vars:     Size  Location     Type
  2428 ;;		None
  2429 ;; Return value:  Size  Location     Type
  2430 ;;                  1    wreg      void 
  2431 ;; Registers used:
  2432 ;;		wreg, status,2, status,0, cstack
  2433 ;; Tracked objects:
  2434 ;;		On entry : 0/0
  2435 ;;		On exit  : 0/0
  2436 ;;		Unchanged: 0/0
  2437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2438 ;;      Params:         0       0       0       0       0       0       0       0       0
  2439 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2440 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2441 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2442 ;;Total ram usage:        0 bytes
  2443 ;; Hardware stack levels used:    1
  2444 ;; Hardware stack levels required when called:    3
  2445 ;; This function calls:
  2446 ;;		_LCD_clear
  2447 ;;		_LCD_dispControl
  2448 ;;		_LCD_entryMode
  2449 ;;		_LCD_functionSet
  2450 ;; This function is called by:
  2451 ;;		_main
  2452 ;; This function uses a non-reentrant model
  2453 ;;
  2454                           
  2455                           	psect	text15
  2456  00114A                     __ptext15:
  2457                           	opt callstack 0
  2458  00114A                     _LCD_init:
  2459                           	opt callstack 27
  2460  00114A                     
  2461                           ;lcd.c: 11:     LCD_clear();
  2462  00114A  EC9A  F009         	call	_LCD_clear	;wreg free
  2463                           
  2464                           ;lcd.c: 12:     LCD_functionSet(1, 1, 0);
  2465  00114E  0E00               	movlw	0
  2466  001150  6E04               	movwf	(LCD_functionSet@DL+1)^0,c
  2467  001152  0E01               	movlw	1
  2468  001154  6E03               	movwf	LCD_functionSet@DL^0,c
  2469  001156  0E00               	movlw	0
  2470  001158  6E06               	movwf	(LCD_functionSet@N+1)^0,c
  2471  00115A  0E01               	movlw	1
  2472  00115C  6E05               	movwf	LCD_functionSet@N^0,c
  2473  00115E  0E00               	movlw	0
  2474  001160  6E08               	movwf	(LCD_functionSet@F+1)^0,c
  2475  001162  0E00               	movlw	0
  2476  001164  6E07               	movwf	LCD_functionSet@F^0,c
  2477  001166  EC24  F009         	call	_LCD_functionSet	;wreg free
  2478                           
  2479                           ;lcd.c: 13:     LCD_dispControl(1, 1, 1);
  2480  00116A  0E00               	movlw	0
  2481  00116C  6E04               	movwf	(LCD_dispControl@D+1)^0,c
  2482  00116E  0E01               	movlw	1
  2483  001170  6E03               	movwf	LCD_dispControl@D^0,c
  2484  001172  0E00               	movlw	0
  2485  001174  6E06               	movwf	(LCD_dispControl@C+1)^0,c
  2486  001176  0E01               	movlw	1
  2487  001178  6E05               	movwf	LCD_dispControl@C^0,c
  2488  00117A  0E00               	movlw	0
  2489  00117C  6E08               	movwf	(LCD_dispControl@B+1)^0,c
  2490  00117E  0E01               	movlw	1
  2491  001180  6E07               	movwf	LCD_dispControl@B^0,c
  2492  001182  EC77  F009         	call	_LCD_dispControl	;wreg free
  2493                           
  2494                           ;lcd.c: 14:     LCD_entryMode(1, 0);
  2495  001186  0E00               	movlw	0
  2496  001188  6E04               	movwf	(LCD_entryMode@ID+1)^0,c
  2497  00118A  0E01               	movlw	1
  2498  00118C  6E03               	movwf	LCD_entryMode@ID^0,c
  2499  00118E  0E00               	movlw	0
  2500  001190  6E06               	movwf	(LCD_entryMode@SH+1)^0,c
  2501  001192  0E00               	movlw	0
  2502  001194  6E05               	movwf	LCD_entryMode@SH^0,c
  2503  001196  EC8B  F009         	call	_LCD_entryMode	;wreg free
  2504  00119A  0012               	return		;funcret
  2505  00119C                     __end_of_LCD_init:
  2506                           	opt callstack 0
  2507                           
  2508 ;; *************** function _LCD_functionSet *****************
  2509 ;; Defined at:
  2510 ;;		line 37 in file "lcd.c"
  2511 ;; Parameters:    Size  Location     Type
  2512 ;;  DL              2    2[COMRAM] short 
  2513 ;;  N               2    4[COMRAM] short 
  2514 ;;  F               2    6[COMRAM] short 
  2515 ;; Auto vars:     Size  Location     Type
  2516 ;;		None
  2517 ;; Return value:  Size  Location     Type
  2518 ;;                  1    wreg      void 
  2519 ;; Registers used:
  2520 ;;		wreg, status,2, status,0, cstack
  2521 ;; Tracked objects:
  2522 ;;		On entry : 0/0
  2523 ;;		On exit  : 0/0
  2524 ;;		Unchanged: 0/0
  2525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2526 ;;      Params:         6       0       0       0       0       0       0       0       0
  2527 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2528 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2529 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2530 ;;Total ram usage:        8 bytes
  2531 ;; Hardware stack levels used:    1
  2532 ;; Hardware stack levels required when called:    2
  2533 ;; This function calls:
  2534 ;;		_LCD_cmd
  2535 ;; This function is called by:
  2536 ;;		_LCD_init
  2537 ;; This function uses a non-reentrant model
  2538 ;;
  2539                           
  2540                           	psect	text16
  2541  001248                     __ptext16:
  2542                           	opt callstack 0
  2543  001248                     _LCD_functionSet:
  2544                           	opt callstack 27
  2545  001248                     
  2546                           ;lcd.c: 38:     LCD_cmd(0b00100000 | DL << 4 | N << 3 | F << 2);
  2547  001248  C007  F009         	movff	LCD_functionSet@F,??_LCD_functionSet
  2548  00124C  90D8               	bcf	status,0,c
  2549  00124E  3609               	rlcf	??_LCD_functionSet^0,f,c
  2550  001250  90D8               	bcf	status,0,c
  2551  001252  3609               	rlcf	??_LCD_functionSet^0,f,c
  2552  001254  C005  F00A         	movff	LCD_functionSet@N,??_LCD_functionSet+1
  2553  001258  90D8               	bcf	status,0,c
  2554  00125A  360A               	rlcf	(??_LCD_functionSet+1)^0,f,c
  2555  00125C  90D8               	bcf	status,0,c
  2556  00125E  360A               	rlcf	(??_LCD_functionSet+1)^0,f,c
  2557  001260  90D8               	bcf	status,0,c
  2558  001262  360A               	rlcf	(??_LCD_functionSet+1)^0,f,c
  2559  001264  3803               	swapf	LCD_functionSet@DL^0,w,c
  2560  001266  0BF0               	andlw	240
  2561  001268  100A               	iorwf	(??_LCD_functionSet+1)^0,w,c
  2562  00126A  1009               	iorwf	??_LCD_functionSet^0,w,c
  2563  00126C  0920               	iorlw	32
  2564  00126E  EC6A  F009         	call	_LCD_cmd
  2565  001272  0012               	return		;funcret
  2566  001274                     __end_of_LCD_functionSet:
  2567                           	opt callstack 0
  2568                           
  2569 ;; *************** function _LCD_entryMode *****************
  2570 ;; Defined at:
  2571 ;;		line 25 in file "lcd.c"
  2572 ;; Parameters:    Size  Location     Type
  2573 ;;  ID              2    2[COMRAM] short 
  2574 ;;  SH              2    4[COMRAM] short 
  2575 ;; Auto vars:     Size  Location     Type
  2576 ;;		None
  2577 ;; Return value:  Size  Location     Type
  2578 ;;                  1    wreg      void 
  2579 ;; Registers used:
  2580 ;;		wreg, status,2, status,0, cstack
  2581 ;; Tracked objects:
  2582 ;;		On entry : 0/0
  2583 ;;		On exit  : 0/0
  2584 ;;		Unchanged: 0/0
  2585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2586 ;;      Params:         4       0       0       0       0       0       0       0       0
  2587 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2588 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2589 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2590 ;;Total ram usage:        4 bytes
  2591 ;; Hardware stack levels used:    1
  2592 ;; Hardware stack levels required when called:    2
  2593 ;; This function calls:
  2594 ;;		_LCD_cmd
  2595 ;; This function is called by:
  2596 ;;		_printCalcResult
  2597 ;;		_LCD_init
  2598 ;; This function uses a non-reentrant model
  2599 ;;
  2600                           
  2601                           	psect	text17
  2602  001316                     __ptext17:
  2603                           	opt callstack 0
  2604  001316                     _LCD_entryMode:
  2605                           	opt callstack 27
  2606  001316                     
  2607                           ;lcd.c: 26:     LCD_cmd(0b00000100 | ID << 1 | SH);
  2608  001316  5003               	movf	LCD_entryMode@ID^0,w,c
  2609  001318  2403               	addwf	LCD_entryMode@ID^0,w,c
  2610  00131A  1005               	iorwf	LCD_entryMode@SH^0,w,c
  2611  00131C  0904               	iorlw	4
  2612  00131E  EC6A  F009         	call	_LCD_cmd
  2613  001322  0012               	return		;funcret
  2614  001324                     __end_of_LCD_entryMode:
  2615                           	opt callstack 0
  2616                           
  2617 ;; *************** function _LCD_dispControl *****************
  2618 ;; Defined at:
  2619 ;;		line 29 in file "lcd.c"
  2620 ;; Parameters:    Size  Location     Type
  2621 ;;  D               2    2[COMRAM] short 
  2622 ;;  C               2    4[COMRAM] short 
  2623 ;;  B               2    6[COMRAM] short 
  2624 ;; Auto vars:     Size  Location     Type
  2625 ;;		None
  2626 ;; Return value:  Size  Location     Type
  2627 ;;                  1    wreg      void 
  2628 ;; Registers used:
  2629 ;;		wreg, status,2, status,0, cstack
  2630 ;; Tracked objects:
  2631 ;;		On entry : 0/0
  2632 ;;		On exit  : 0/0
  2633 ;;		Unchanged: 0/0
  2634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2635 ;;      Params:         6       0       0       0       0       0       0       0       0
  2636 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2637 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2638 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2639 ;;Total ram usage:        7 bytes
  2640 ;; Hardware stack levels used:    1
  2641 ;; Hardware stack levels required when called:    2
  2642 ;; This function calls:
  2643 ;;		_LCD_cmd
  2644 ;; This function is called by:
  2645 ;;		_printCalcResult
  2646 ;;		_LCD_init
  2647 ;; This function uses a non-reentrant model
  2648 ;;
  2649                           
  2650                           	psect	text18
  2651  0012EE                     __ptext18:
  2652                           	opt callstack 0
  2653  0012EE                     _LCD_dispControl:
  2654                           	opt callstack 27
  2655  0012EE                     
  2656                           ;lcd.c: 30:     LCD_cmd(0b00001000 | D << 2 | C << 1 | B);
  2657  0012EE  90D8               	bcf	status,0,c
  2658  0012F0  3405               	rlcf	LCD_dispControl@C^0,w,c
  2659  0012F2  6E09               	movwf	??_LCD_dispControl^0,c
  2660  0012F4  4403               	rlncf	LCD_dispControl@D^0,w,c
  2661  0012F6  46E8               	rlncf	wreg,f,c
  2662  0012F8  0BFC               	andlw	252
  2663  0012FA  1009               	iorwf	??_LCD_dispControl^0,w,c
  2664  0012FC  1007               	iorwf	LCD_dispControl@B^0,w,c
  2665  0012FE  0908               	iorlw	8
  2666  001300  EC6A  F009         	call	_LCD_cmd
  2667  001304  0012               	return		;funcret
  2668  001306                     __end_of_LCD_dispControl:
  2669                           	opt callstack 0
  2670                           
  2671 ;; *************** function _LCD_clear *****************
  2672 ;; Defined at:
  2673 ;;		line 17 in file "lcd.c"
  2674 ;; Parameters:    Size  Location     Type
  2675 ;;		None
  2676 ;; Auto vars:     Size  Location     Type
  2677 ;;		None
  2678 ;; Return value:  Size  Location     Type
  2679 ;;                  1    wreg      void 
  2680 ;; Registers used:
  2681 ;;		wreg, status,2, status,0, cstack
  2682 ;; Tracked objects:
  2683 ;;		On entry : 0/0
  2684 ;;		On exit  : 0/0
  2685 ;;		Unchanged: 0/0
  2686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2687 ;;      Params:         0       0       0       0       0       0       0       0       0
  2688 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2689 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2690 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2691 ;;Total ram usage:        0 bytes
  2692 ;; Hardware stack levels used:    1
  2693 ;; Hardware stack levels required when called:    2
  2694 ;; This function calls:
  2695 ;;		_LCD_cmd
  2696 ;; This function is called by:
  2697 ;;		_main
  2698 ;;		_LCD_init
  2699 ;; This function uses a non-reentrant model
  2700 ;;
  2701                           
  2702                           	psect	text19
  2703  001334                     __ptext19:
  2704                           	opt callstack 0
  2705  001334                     _LCD_clear:
  2706                           	opt callstack 27
  2707  001334                     
  2708                           ;lcd.c: 18:     LCD_cmd(0b00000001);
  2709  001334  0E01               	movlw	1
  2710  001336  EC6A  F009         	call	_LCD_cmd
  2711  00133A  0012               	return		;funcret
  2712  00133C                     __end_of_LCD_clear:
  2713                           	opt callstack 0
  2714                           
  2715 ;; *************** function _LCD_cmd *****************
  2716 ;; Defined at:
  2717 ;;		line 45 in file "lcd.c"
  2718 ;; Parameters:    Size  Location     Type
  2719 ;;  cmd             1    wreg     unsigned char 
  2720 ;; Auto vars:     Size  Location     Type
  2721 ;;  cmd             1    1[COMRAM] unsigned char 
  2722 ;; Return value:  Size  Location     Type
  2723 ;;                  1    wreg      void 
  2724 ;; Registers used:
  2725 ;;		wreg, status,2, status,0, cstack
  2726 ;; Tracked objects:
  2727 ;;		On entry : 0/0
  2728 ;;		On exit  : 0/0
  2729 ;;		Unchanged: 0/0
  2730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2731 ;;      Params:         0       0       0       0       0       0       0       0       0
  2732 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2733 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2734 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2735 ;;Total ram usage:        1 bytes
  2736 ;; Hardware stack levels used:    1
  2737 ;; Hardware stack levels required when called:    1
  2738 ;; This function calls:
  2739 ;;		_LCD_rdy
  2740 ;; This function is called by:
  2741 ;;		_LCD_clear
  2742 ;;		_LCD_entryMode
  2743 ;;		_LCD_dispControl
  2744 ;;		_LCD_cursor
  2745 ;;		_LCD_functionSet
  2746 ;;		_LCD_newLine
  2747 ;;		_LCD_returnHome
  2748 ;; This function uses a non-reentrant model
  2749 ;;
  2750                           
  2751                           	psect	text20
  2752  0012D4                     __ptext20:
  2753                           	opt callstack 0
  2754  0012D4                     _LCD_cmd:
  2755                           	opt callstack 27
  2756                           
  2757                           ;incstack = 0
  2758                           ;LCD_cmd@cmd stored from wreg
  2759  0012D4  6E02               	movwf	LCD_cmd@cmd^0,c
  2760  0012D6                     
  2761                           ;lcd.c: 46:     LCD_rdy();
  2762  0012D6  EC0A  F009         	call	_LCD_rdy	;wreg free
  2763  0012DA                     
  2764                           ;lcd.c: 47:     PORTCbits.RC2=0;
  2765  0012DA  9482               	bcf	130,2,c	;volatile
  2766  0012DC                     
  2767                           ;lcd.c: 48:     PORTCbits.RC1=0;
  2768  0012DC  9282               	bcf	130,1,c	;volatile
  2769  0012DE                     
  2770                           ;lcd.c: 49:     PORTCbits.RC0=1;
  2771  0012DE  8082               	bsf	130,0,c	;volatile
  2772  0012E0                     
  2773                           ;lcd.c: 50:     __nop();
  2774  0012E0  F000               	nop	
  2775  0012E2                     
  2776                           ;lcd.c: 51:     LATD = cmd;
  2777  0012E2  C002  FF8C         	movff	LCD_cmd@cmd,3980	;volatile
  2778  0012E6                     
  2779                           ;lcd.c: 52:     __nop();
  2780  0012E6  F000               	nop	
  2781  0012E8                     
  2782                           ;lcd.c: 53:     PORTCbits.RC0=0;
  2783  0012E8  9082               	bcf	130,0,c	;volatile
  2784  0012EA                     
  2785                           ;lcd.c: 54:     __nop();
  2786  0012EA  F000               	nop	
  2787  0012EC  0012               	return		;funcret
  2788  0012EE                     __end_of_LCD_cmd:
  2789                           	opt callstack 0
  2790                           
  2791 ;; *************** function _LCD_rdy *****************
  2792 ;; Defined at:
  2793 ;;		line 57 in file "lcd.c"
  2794 ;; Parameters:    Size  Location     Type
  2795 ;;		None
  2796 ;; Auto vars:     Size  Location     Type
  2797 ;;  busy            1    0[COMRAM] unsigned char 
  2798 ;; Return value:  Size  Location     Type
  2799 ;;                  1    wreg      void 
  2800 ;; Registers used:
  2801 ;;		wreg, status,2, status,0
  2802 ;; Tracked objects:
  2803 ;;		On entry : 0/0
  2804 ;;		On exit  : 0/0
  2805 ;;		Unchanged: 0/0
  2806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2807 ;;      Params:         0       0       0       0       0       0       0       0       0
  2808 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2809 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2810 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2811 ;;Total ram usage:        1 bytes
  2812 ;; Hardware stack levels used:    1
  2813 ;; This function calls:
  2814 ;;		Nothing
  2815 ;; This function is called by:
  2816 ;;		_LCD_cmd
  2817 ;;		_LCD_writeStr
  2818 ;;		_LCD_writeChar
  2819 ;; This function uses a non-reentrant model
  2820 ;;
  2821                           
  2822                           	psect	text21
  2823  001214                     __ptext21:
  2824                           	opt callstack 0
  2825  001214                     _LCD_rdy:
  2826                           	opt callstack 28
  2827  001214                     
  2828                           ;lcd.c: 58:     char busy = 0x80;
  2829  001214  0E80               	movlw	128
  2830  001216  6E01               	movwf	LCD_rdy@busy^0,c
  2831  001218                     
  2832                           ;lcd.c: 59:     TRISD = 0b11111111;
  2833  001218  6895               	setf	149,c	;volatile
  2834  00121A                     
  2835                           ;lcd.c: 60:     PORTCbits.RC2 = 0;
  2836  00121A  9482               	bcf	130,2,c	;volatile
  2837  00121C                     
  2838                           ;lcd.c: 61:     PORTCbits.RC1 = 1;
  2839  00121C  8282               	bsf	130,1,c	;volatile
  2840                           
  2841                           ;lcd.c: 64:     while (busy) {
  2842  00121E  EF19  F009         	goto	l886
  2843  001222                     l177:
  2844                           
  2845                           ;lcd.c: 65:         PORTCbits.RC0 = 1;
  2846  001222  8082               	bsf	130,0,c	;volatile
  2847                           
  2848                           ;lcd.c: 66:         __nop();
  2849  001224  F000               	nop	
  2850  001226                     
  2851                           ;lcd.c: 67:         busy = PORTD & 0x80;
  2852  001226  5083               	movf	131,w,c	;volatile
  2853  001228  0B80               	andlw	128
  2854  00122A  6E01               	movwf	LCD_rdy@busy^0,c
  2855  00122C                     
  2856                           ;lcd.c: 68:         __nop();
  2857  00122C  F000               	nop	
  2858  00122E                     
  2859                           ;lcd.c: 69:         PORTCbits.RC0 = 0;
  2860  00122E  9082               	bcf	130,0,c	;volatile
  2861  001230                     
  2862                           ;lcd.c: 70:         __nop();
  2863  001230  F000               	nop	
  2864  001232                     l886:
  2865                           
  2866                           ;lcd.c: 64:     while (busy) {
  2867  001232  5001               	movf	LCD_rdy@busy^0,w,c
  2868  001234  A4D8               	btfss	status,2,c
  2869  001236  EF1F  F009         	goto	u11
  2870  00123A  EF21  F009         	goto	u10
  2871  00123E                     u11:
  2872  00123E  EF11  F009         	goto	l177
  2873  001242                     u10:
  2874  001242                     
  2875                           ;lcd.c: 73:     TRISD = 0b00000000;
  2876  001242  0E00               	movlw	0
  2877  001244  6E95               	movwf	149,c	;volatile
  2878  001246  0012               	return		;funcret
  2879  001248                     __end_of_LCD_rdy:
  2880                           	opt callstack 0
  2881                           
  2882                           	psect	rparam
  2883  0000                     tosu	equ	0xFFF
  2884                           tosh	equ	0xFFE
  2885                           tosl	equ	0xFFD
  2886                           stkptr	equ	0xFFC
  2887                           pclatu	equ	0xFFB
  2888                           pclath	equ	0xFFA
  2889                           pcl	equ	0xFF9
  2890                           tblptru	equ	0xFF8
  2891                           tblptrh	equ	0xFF7
  2892                           tblptrl	equ	0xFF6
  2893                           tablat	equ	0xFF5
  2894                           prodh	equ	0xFF4
  2895                           prodl	equ	0xFF3
  2896                           indf0	equ	0xFEF
  2897                           postinc0	equ	0xFEE
  2898                           postdec0	equ	0xFED
  2899                           preinc0	equ	0xFEC
  2900                           plusw0	equ	0xFEB
  2901                           fsr0h	equ	0xFEA
  2902                           fsr0l	equ	0xFE9
  2903                           wreg	equ	0xFE8
  2904                           indf1	equ	0xFE7
  2905                           postinc1	equ	0xFE6
  2906                           postdec1	equ	0xFE5
  2907                           preinc1	equ	0xFE4
  2908                           plusw1	equ	0xFE3
  2909                           fsr1h	equ	0xFE2
  2910                           fsr1l	equ	0xFE1
  2911                           bsr	equ	0xFE0
  2912                           indf2	equ	0xFDF
  2913                           postinc2	equ	0xFDE
  2914                           postdec2	equ	0xFDD
  2915                           preinc2	equ	0xFDC
  2916                           plusw2	equ	0xFDB
  2917                           fsr2h	equ	0xFDA
  2918                           fsr2l	equ	0xFD9
  2919                           status	equ	0xFD8


Data Sizes:
    Strings     28
    Constant    0
    Data        16
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     55      71
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_2(CODE[16]), STR_1(CODE[12]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_2(CODE[16]), STR_1(CODE[12]), 

    LCD_writeStr@data	PTR unsigned char  size(2) Largest target is 16
		 -> STR_2(CODE[16]), STR_1(CODE[12]), 

    calculate@operators	PTR unsigned char  size(2) Largest target is 14
		 -> main@operators(COMRAM[14]), 

    getKey@key_vals	PTR unsigned char [4] size(2) Largest target is 16
		 -> main@key_vals(COMRAM[16]), 


Critical Paths under _main in COMRAM

    _main->_calculate
    _printCalcResult->___aldiv
    _LCD_writeChar->_LCD_rdy
    _LCD_newLine->_LCD_cmd
    _LCD_cursor->_LCD_cmd
    _calculate->___lldiv
    _LCD_writeStr->_strlen
    _LCD_init->_LCD_functionSet
    _LCD_functionSet->_LCD_cmd
    _LCD_entryMode->_LCD_cmd
    _LCD_dispControl->_LCD_cmd
    _LCD_clear->_LCD_cmd
    _LCD_cmd->_LCD_rdy

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                25    25      0    7819
                                             30 COMRAM    25    25      0
                          _LCD_clear
                           _LCD_init
                        _LCD_newLine
                      _LCD_writeChar
                       _LCD_writeStr
                          _calculate
                             _getKey
                             _getVal
                         _ports_init
                    _printCalcResult
 ---------------------------------------------------------------------------------
 (1) _printCalcResult                                      8     4      4    3224
                                             14 COMRAM     8     4      4
                         _LCD_cursor
                    _LCD_dispControl
                      _LCD_entryMode
                        _LCD_newLine
                      _LCD_writeChar
                            ___aldiv
                            ___almod
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___almod                                             10     2      8     448
                                              0 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     452
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (2) _LCD_writeChar                                        1     1      0      30
                                              1 COMRAM     1     1      0
                            _LCD_rdy
 ---------------------------------------------------------------------------------
 (2) _LCD_newLine                                          0     0      0      30
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_cursor                                           5     1      4     226
                                              2 COMRAM     5     1      4
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (1) _ports_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getVal                                               1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _getKey                                              15    13      2     417
                                              0 COMRAM    15    13      2
 ---------------------------------------------------------------------------------
 (1) _calculate                                           17    13      4    1818
                                             13 COMRAM    17    13      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     826
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _LCD_writeStr                                         8     6      2     446
                                              4 COMRAM     8     6      2
                            _LCD_rdy
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             0     0      0    1284
                          _LCD_clear
                    _LCD_dispControl
                      _LCD_entryMode
                    _LCD_functionSet
 ---------------------------------------------------------------------------------
 (2) _LCD_functionSet                                      8     2      6     324
                                              2 COMRAM     8     2      6
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_entryMode                                        4     0      4     378
                                              2 COMRAM     4     0      4
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_dispControl                                      7     1      6     552
                                              2 COMRAM     7     1      6
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_clear                                            0     0      0      30
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (3) _LCD_cmd                                              1     1      0      30
                                              1 COMRAM     1     1      0
                            _LCD_rdy
 ---------------------------------------------------------------------------------
 (3) _LCD_rdy                                              1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_clear
     _LCD_cmd
       _LCD_rdy
   _LCD_init
     _LCD_clear
       _LCD_cmd
         _LCD_rdy
     _LCD_dispControl
       _LCD_cmd
         _LCD_rdy
     _LCD_entryMode
       _LCD_cmd
         _LCD_rdy
     _LCD_functionSet
       _LCD_cmd
         _LCD_rdy
   _LCD_newLine
     _LCD_cmd
       _LCD_rdy
   _LCD_writeChar
     _LCD_rdy
   _LCD_writeStr
     _LCD_rdy
     _strlen
   _calculate
     ___lldiv
     ___lmul
   _getKey
   _getVal
   _ports_init
   _printCalcResult
     _LCD_cursor
       _LCD_cmd
         _LCD_rdy
     _LCD_dispControl
       _LCD_cmd
         _LCD_rdy
     _LCD_entryMode
       _LCD_cmd
         _LCD_rdy
     _LCD_newLine
       _LCD_cmd
         _LCD_rdy
     _LCD_writeChar
       _LCD_rdy
     ___aldiv
     ___almod
     ___lmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     37      47       1       74.7%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      47       6        0.0%
DATA                 0      0      47       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sun Jan 10 03:21:13 2021

                         l81 11D8                           l90 0CCA                           l91 0CE6  
                         l94 0EE0                           u10 1242                           u11 123E  
               __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000  
               __CFG_CP3$OFF 000000                  __CFG_LVP$ON 000000                          l100 0FBA  
                        l110 08AC                          l105 1332                          l202 1138  
                        l203 1148                          l116 0A0E                          l152 133A  
                        l161 1304                          l225 105E                          l218 104E  
                        l170 132A                          l164 12B8                          l173 12EC  
                        l149 119A                          l158 1322                          l270 0DF2  
                        l167 1272                          l183 1088                          l177 1222  
                        l185 10DE                          l179 1246                          l283 0EDE  
                        l188 12D2                          l900 12E2                          l902 12E6  
                        l910 1334                          l904 12E8                          l920 12C6  
                        l912 12BC                          l906 12EA                          l922 12C8  
                        l914 12C0                          l908 1324                          l924 12CC  
                        l916 12C2                          l870 1214                          l926 12CE  
                        l918 12C4                          l880 122C                          l872 1218  
                        l928 12D0                          l882 122E                          l874 121A  
                        l890 12D6                          l884 1230                          l876 121C  
                        l892 12DA                          l868 1212                          l878 1226  
                        l886 1232                          l894 12DC                          l888 1242  
                        l896 12DE                          l898 12E0                 __CFG_CPB$OFF 000000  
                        u400 0FE2                          u401 0FDE                          u410 1004  
                        u411 1000                          u420 102C                          u500 0E28  
                        u421 1028                          u501 0E24                          u430 0CFA  
                        u510 0E4E                          u431 0CF6                          u511 0E4A  
                        u600 0918                          u440 0D1C                          u520 0E70  
                        u601 0914                          u441 0D18                          u521 0E6C  
                        u370 1206                          u450 0D56                          u530 0E8E  
                        u610 0BD6                 __CFG_CPD$OFF 000000                          u371 1202  
                        u451 0D52                          u531 0E8A                          u611 0BD2  
                        u380 10FE                          u460 0D78                          u540 0EBE  
                        u620 0BFC                          u700 0B2C                          u381 10FA  
                        u461 0D74                          u541 0EBA                          u621 0BF8  
                        u701 0B28                          u550 10DE                          u390 1138  
                        u470 0DA0                          u630 0CB4                          u710 0B56  
                        u551 10DA                          u391 1134                          u471 0D9C  
                        u631 0CB0                          u711 0B52                          u560 0F26  
                        u480 0DD2                          u640 0CC4                          u561 0F22  
                        u481 0DCE                          u641 0CC0                          u570 0F90  
                        u490 0E06                          u650 0A82                          u571 0F8C  
                        u491 0E02                          u651 0A7E                          u580 0FB6  
                        u660 0A94                          u581 0FB2                          u661 0A90  
                        u590 08AC                          u670 0AA6                          u591 08A8  
                        u671 0AA2                          u727 0A4A                          u680 0AB8  
                        u737 0B84                          u681 0AB4                          u690 0ADC  
                        u747 10B2                          u691 0AD8                  ?_LCD_cursor 0003  
                        wreg 000FE8       __size_of_LCD_entryMode 000E     __size_of_LCD_dispControl 0018  
            __end_of_LCD_cmd 12EE              __end_of_LCD_rdy 1248                         l1130 132E  
                       l1060 119C                         l1310 1248                         l1062 11C2  
                       l1312 11DA                         l1064 11C4                         l1304 129E  
                       l1400 0DF8                         l1306 1316                         l1314 11E6  
                       l1330 1118                         l1322 10E0                         l1066 11C6  
                       l1410 0E38                         l1402 0E06                         l1308 12EE  
                       l1316 11EA                         l1340 0FF6                         l1332 0FBC  
                       l1324 10F0                         l1500 087C                         l1420 0E8E  
                       l1412 0E4E                         l1404 0E16                         l1318 1206  
                       l1350 103E                         l1342 1004                         l1334 0FCC  
                       l1326 10FE                         l1510 0904                         l1502 0898  
                       l1430 0ECE                         l1422 0E9E                         l1414 0E56  
                       l1406 0E1A                         l1440 1066                         l1352 1048  
                       l1344 100E                         l1336 0FE2                         l1328 110E  
                       l1512 0906                         l1504 089A                         l1360 0D0A  
                       l1424 0EA8                         l1416 0E62                         l1408 0E28  
                       l1600 0A70                         l1434 114A                         l1450 10A8  
                       l1442 1068                         l1346 102C                         l1338 0FEA  
                       l1522 0954                         l1514 091C                         l1506 08B4  
                       l1370 0D40                         l1362 0D0E                         l1354 0CE8  
                       l1418 0E70                         l1426 0EAE                         l1610 0ABE  
                       l1602 0A82                         l1452 10AA                         l1444 107C  
                       l1436 1060                         l1348 103C                         l1532 09C4  
                       l1508 08E8                         l1460 0EE0                         l1380 0D82  
                       l1372 0D56                         l1364 0D1C                         l1356 0CEC  
                       l1428 0EBE                         l1620 0B1A                         l1612 0AC2  
                       l1604 0A94                         l1454 10AC                         l1446 108C  
                       l1438 1064                         l1534 09FE                         l1526 098C  
                       l1518 0938                         l1470 0EF8                         l1382 0DA0  
                       l1374 0D5E                         l1390 0DC2                         l1366 0D2C  
                       l1358 0CFA                         l1550 0BA2                         l1542 0B96  
                       l1622 0B2C                         l1630 0B40                         l1614 0ACA  
                       l1606 0AA6                         l1456 10BC                         l1448 10A6  
                       l1480 0F34                         l1392 0DD2                         l1384 0DB0  
                       l1376 0D6A                         l1368 0D30                         l1560 0BEE  
                       l1552 0BB6                         l1544 0B9A                         l1640 0B7C  
                       l1632 0B46                         l1624 0B30                         l1616 0ADC  
                       l1608 0AB8                         l1458 10C0                         l1490 0F90  
                       l1466 0EEC                         l1394 0DE2                         l1386 0DB2  
                       l1378 0D78                         l1570 0C64                         l1562 0BFC  
                       l1554 0BBA                         l1634 0B56                         l1626 0B34  
                       l1618 0B02                         l1642 0B7E                         l1492 0F96  
                       l1484 0F6A                         l1476 0F06                         l1468 0EF4  
                       l1388 0DBC                         l1572 0C6A                         l1564 0C30  
                       l1556 0BD6                         l1636 0B66                         l1628 0B38  
                       l1580 0A10                         l1494 0F9A                         l1486 0F70  
                       l1478 0F26                         l1398 0DF4                         l1566 0C38  
                       l1574 0C9E                         l1558 0BEA                         l1638 0B6C  
                       l1590 0A34                         l1582 0A1C                         l1664 09D8  
                       l1496 0820                         l1488 0F74                         l1576 0CB4  
                       l1568 0C60                         l1592 0A40                         l1584 0A20  
                       l1498 0848                         l1578 0CC4                         l1594 0A56  
                       l1586 0A24                         l1596 0A5A                         l1588 0A30  
                       l1598 0A68                         STR_1 0811                         STR_2 0801  
                       _LATA 000F89                         _LATB 000F8A                         _LATC 000F8B  
                       _LATD 000F8C     __size_of_printCalcResult 0152                         _WPUB 000F85  
               ?_LCD_newLine 0001                         _main 0A10                         indf2 000FDF  
                       fsr1l 000FE1                         fsr2l 000FD9                __CFG_BORV$190 000000  
                       start 0000                __CFG_IESO$OFF 000000           __size_of_LCD_clear 0008  
              __CFG_MCLRE$ON 000000                 ___param_bank 000000             __end_of_LCD_init 119C  
            __end_of___aldiv 0DF4              __end_of___almod 0EE0                        ?_main 0001  
            __end_of___lldiv 1060                        _PORTB 000F81                        _PORTD 000F83  
                      _TRISA 000F92                        _TRISB 000F93                        _TRISD 000F95  
               main@key_vals 0038                __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000  
              __CFG_WRT2$OFF 000000          ___lmul@multiplicand 0005                __CFG_WRT3$OFF 000000  
             __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000  
             __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000  
              __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000       __size_of_LCD_writeChar 001A  
             __CFG_EBTRB$OFF 000000                        tablat 000FF5                        status 000FD8  
             __CFG_T3CMX$RC0 000000               __CFG_ICPRT$OFF 000000               __CFG_PBADEN$ON 000000  
        __size_of_LCD_cursor 001C                ?_LCD_writeStr 0005                _LCD_entryMode 1316  
            __initialization 1274                 __end_of_main 0B96                  LCD_rdy@busy 0001  
             __CFG_PCLKEN$ON 000000              LCD_entryMode@ID 0003              LCD_entryMode@SH 0005  
                     ??_main 001F                __activetblptr 000002                    ??_LCD_cmd 0002  
                  ??_LCD_rdy 0001            __end_of_LCD_clear 133C               __CFG_SDOMX$RB3 000000  
            __CFG_CCP2MX$RC1 000000     __size_of_LCD_functionSet 002C                       _ANSELA 000F5B  
                     _ANSELB 000F5C                       _ANSELC 000F5D                       _ANSELD 000F5E  
printCalcResult@negativeFlag 0013               __CFG_WDTEN$OFF 000000            ??_LCD_dispControl 0009  
          ??_printCalcResult 0013               ??_LCD_writeStr 0007               ?_LCD_entryMode 0003  
             __CFG_XINST$OFF 000000                _LCD_writeChar 12BA                       ___lmul 10E0  
                  ??___aldiv 0009                    ??___almod 0009               __CFG_STVREN$ON 000000  
                  ??___lldiv 0009                       _getKey 0EE0                       _getVal 132C  
              main@operation 0034                main@operators 0021                       _strlen 11DA  
               __pdataCOMRAM 0038                 __mediumconst 0000                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8         __CFG_LS48MHZ$SYS24X4 000000  
                 __accesstop 0060      __end_of__initialization 1294                    ?_LCD_init 0001  
              ___rparam_used 000001         __size_of_LCD_newLine 0008               ?_LCD_writeChar 0001  
             __pcstackCOMRAM 0001             __CFG_nPWRTEN$OFF 000000                 LCD_cursor@SC 0003  
               LCD_cursor@RL 0005           __size_of_calculate 01F2                 ??_LCD_cursor 0007  
          ??_LCD_functionSet 0009                   ??_LCD_init 000B              ??_LCD_entryMode 0007  
         __end_of_LCD_cursor 12BA            __CFG_PLLSEL$PLL4X 000000                      ?___lmul 0001  
                    ?_getKey 0001                      ?_getVal 0001               ___lmul@product 0009  
             calculate@i_200 0016                      ?_strlen 0001                      _INTCON2 000FF1  
                    _LCD_cmd 12D4                      _LCD_rdy 1214         __end_of_LCD_writeStr 10E0  
          __end_of_calculate 0A10              ??_LCD_writeChar 0002                      __Hparam 0000  
                 calculate@i 0015                      __Lparam 0000               getKey@bit_cols 000B  
                    ___aldiv 0CE8                      ___almod 0DF4              __size_of___lmul 006A  
             getKey@bit_rows 000A                      ___lldiv 0FBC              __size_of_getKey 00DC  
               __psmallconst 0800              __size_of_getVal 0008             LCD_functionSet@F 0007  
           LCD_functionSet@N 0005                      __pcinit 1274             LCD_writeStr@data 0005  
                    __ramtop 0800                      __ptext0 0A10                      __ptext1 0B96  
                    __ptext2 0DF4                      __ptext3 0CE8                      __ptext4 12BA  
                    __ptext5 1324                      __ptext6 129E                      __ptext7 119C  
                    __ptext8 132C                      __ptext9 0EE0              __size_of_strlen 003A  
             getKey@key_vals 0001             ___aldiv@dividend 0001              _LCD_dispControl 12EE  
                    getKey@i 000C                      getKey@j 000E              _printCalcResult 0B96  
                    main@key 0037                      main@val 0033                    _LCD_clear 1334  
       end_of_initialization 1294                __Lmediumconst 0000              ___lldiv@divisor 0005  
                 getKey@cols 0008              ___lldiv@counter 000D                   getKey@rows 0009  
      printCalcResult@modulo 0014        printCalcResult@result 000F             ___aldiv@quotient 000B  
                    postdec1 000FE5                      postinc0 000FEE                      strlen@a 0003  
                    strlen@s 0001                    _PORTCbits 000F82                    _TRISCbits 000F94  
                 _ports_init 119C                   ?_LCD_clear 0001                   main@opIdx1 0036  
                 main@opIdx2 0035                   main@result 002F            __size_of_LCD_init 0052  
             __end_of___lmul 114A      __end_of_LCD_dispControl 1306                __pidataCOMRAM 1306  
             __end_of_getKey 0FBC               __end_of_getVal 1334        __size_of_LCD_writeStr 0080  
                 LCD_cmd@cmd 0002      __end_of_printCalcResult 0CE8               __end_of_strlen 1214  
        start_initialization 1274              _LCD_functionSet 1248                ??_LCD_newLine 0003  
            __CFG_nLPBOR$OFF 000000                 _LCD_writeStr 1060                     ??___lmul 0009  
                   ??_getKey 0003                     ??_getVal 0001                     ??_strlen 0003  
                   ?_LCD_cmd 0001                     ?_LCD_rdy 0001                  ?_ports_init 0001  
                ??_LCD_clear 0003                    _calculate 081E        __end_of_LCD_entryMode 1324  
        __end_of_LCD_newLine 132C           LCD_writeStr@length 0009                     ?___aldiv 0001  
                   ?___almod 0001                     ?___lldiv 0001                LCD_writeStr@i 000B  
    __end_of_LCD_functionSet 1274             ?_LCD_dispControl 0003             ___almod@dividend 0001  
                __smallconst 0800             ?_printCalcResult 000F              ___aldiv@divisor 0005  
            ___aldiv@counter 0009                   ?_calculate 000E              calculate@opIdx1 000E  
            calculate@opIdx2 000F                     _LCD_init 114A        __end_of_LCD_writeChar 12D4  
           __CFG_WDTPS$32768 000000                    getVal@key 0001            LCD_writeChar@data 0002  
        __size_of_ports_init 003E            __CFG_CFGPLLEN$OFF 000000             __size_of_LCD_cmd 001A  
           __size_of_LCD_rdy 0034            ___lmul@multiplier 0001                    copy_data0 1288  
                _LCD_newLine 1324                     __Hrparam 0000                     __Lrparam 0000  
         __CFG_BOREN$SBORDIS 000000           calculate@operator1 0017           calculate@operator2 001B  
         calculate@operation 0014           calculate@operators 0010             __size_of___aldiv 010C  
           __size_of___almod 00EC             __size_of___lldiv 00A4             ?_LCD_functionSet 0003  
          LCD_functionSet@DL 0003                     __ptext10 081E                     __ptext11 10E0  
                   __ptext20 12D4                     __ptext12 0FBC                     __ptext21 1214  
                   __ptext13 1060                     __ptext14 11DA                     __ptext15 114A  
                   __ptext16 1248                     __ptext17 1316                     __ptext18 12EE  
                   __ptext19 1334              ___almod@divisor 0005              ___almod@counter 0009  
                ??_calculate 0012                __size_of_main 0186             LCD_dispControl@B 0007  
           LCD_dispControl@C 0005             LCD_dispControl@D 0003                   _LCD_cursor 129E  
               ??_ports_init 0001             ___lldiv@dividend 0001             printCalcResult@i 0015  
                getKey@value 0007         __CFG_CPUDIV$NOCLKDIV 000000           __end_of_ports_init 11DA  
           ___lldiv@quotient 0009                 ___aldiv@sign 000A           __CFG_FOSC$INTOSCIO 000000  
               ___almod@sign 000A  
