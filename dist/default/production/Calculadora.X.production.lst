

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sun Nov 29 23:31:28 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    31  0000                     
    32                           ; Version 2.10
    33                           ; Generated 31/07/2019 GMT
    34                           ; 
    35                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC18F45K50 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66  0000                     
    67                           	psect	idataCOMRAM
    68  00758E                     __pidataCOMRAM:
    69                           	opt callstack 0
    70                           
    71                           ;initializer for main@key_vals
    72  00758E  31                 	db	49
    73  00758F  32                 	db	50
    74  007590  33                 	db	51
    75  007591  2B                 	db	43
    76  007592  34                 	db	52
    77  007593  35                 	db	53
    78  007594  36                 	db	54
    79  007595  2D                 	db	45
    80  007596  37                 	db	55
    81  007597  38                 	db	56
    82  007598  39                 	db	57
    83  007599  2A                 	db	42
    84  00759A  52                 	db	82
    85  00759B  30                 	db	48
    86  00759C  23                 	db	35
    87  00759D  2F                 	db	47
    88  0000                     _ANSELD	set	3934
    89  0000                     _ANSELC	set	3933
    90  0000                     _ANSELB	set	3932
    91  0000                     _ANSELA	set	3931
    92  0000                     _PORTB	set	3969
    93  0000                     _LATC	set	3979
    94  0000                     _TRISCbits	set	3988
    95  0000                     _WPUB	set	3973
    96  0000                     _INTCON2	set	4081
    97  0000                     _LATB	set	3978
    98  0000                     _TRISB	set	3987
    99  0000                     _LATA	set	3977
   100  0000                     _TRISA	set	3986
   101  0000                     _PORTD	set	3971
   102  0000                     _TRISD	set	3989
   103  0000                     _LATD	set	3980
   104  0000                     _PORTCbits	set	3970
   105                           
   106                           ; #config settings
   107  0000                     
   108                           	psect	cinit
   109  007606                     __pcinit:
   110                           	opt callstack 0
   111  007606                     start_initialization:
   112                           	opt callstack 0
   113  007606                     __initialization:
   114                           	opt callstack 0
   115                           
   116                           ; Initialize objects allocated to COMRAM (16 bytes)
   117                           ; load TBLPTR registers with __pidataCOMRAM
   118  007606  0E8E               	movlw	low __pidataCOMRAM
   119  007608  6EF6               	movwf	tblptrl,c
   120  00760A  0E75               	movlw	high __pidataCOMRAM
   121  00760C  6EF7               	movwf	tblptrh,c
   122  00760E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   123  007610  6EF8               	movwf	tblptru,c
   124  007612  EE00  F03B         	lfsr	0,__pdataCOMRAM
   125  007616  EE10 F010          	lfsr	1,16
   126  00761A                     copy_data0:
   127  00761A  0009               	tblrd		*+
   128  00761C  CFF5 FFEE          	movff	tablat,postinc0
   129  007620  50E5               	movf	postdec1,w,c
   130  007622  50E1               	movf	fsr1l,w,c
   131  007624  E1FA               	bnz	copy_data0
   132  007626                     end_of_initialization:
   133                           	opt callstack 0
   134  007626                     __end_of__initialization:
   135                           	opt callstack 0
   136  007626  0E00               	movlw	low (__Lmediumconst shr (0+16))
   137  007628  6EF8               	movwf	tblptru,c
   138  00762A  0100               	movlb	0
   139  00762C  EF81  F03D         	goto	_main	;jump to C main() function
   140                           
   141                           	psect	dataCOMRAM
   142  00003B                     __pdataCOMRAM:
   143                           	opt callstack 0
   144  00003B                     main@key_vals:
   145                           	opt callstack 0
   146  00003B                     	ds	16
   147                           
   148                           	psect	cstackCOMRAM
   149  000001                     __pcstackCOMRAM:
   150                           	opt callstack 0
   151  000001                     ?___lmul:
   152                           	opt callstack 0
   153  000001                     ?___lldiv:
   154                           	opt callstack 0
   155  000001                     ?___aldiv:
   156                           	opt callstack 0
   157  000001                     ?___almod:
   158                           	opt callstack 0
   159  000001                     LCD_rdy@busy:
   160                           	opt callstack 0
   161  000001                     getVal@key:
   162                           	opt callstack 0
   163  000001                     getKey@key_vals:
   164                           	opt callstack 0
   165  000001                     ___lmul@multiplier:
   166                           	opt callstack 0
   167  000001                     ___lldiv@dividend:
   168                           	opt callstack 0
   169  000001                     ___aldiv@dividend:
   170                           	opt callstack 0
   171  000001                     ___almod@dividend:
   172                           	opt callstack 0
   173                           
   174                           ; 4 bytes @ 0x0
   175  000001                     	ds	1
   176  000002                     LCD_cmd@cmd:
   177                           	opt callstack 0
   178  000002                     LCD_writeChar@data:
   179                           	opt callstack 0
   180                           
   181                           ; 1 bytes @ 0x1
   182  000002                     	ds	1
   183  000003                     ??_getKey:
   184  000003                     LCD_entryMode@ID:
   185                           	opt callstack 0
   186  000003                     LCD_dispControl@D:
   187                           	opt callstack 0
   188  000003                     LCD_cursor@SC:
   189                           	opt callstack 0
   190  000003                     LCD_functionSet@DL:
   191                           	opt callstack 0
   192                           
   193                           ; 2 bytes @ 0x2
   194  000003                     	ds	2
   195  000005                     LCD_entryMode@SH:
   196                           	opt callstack 0
   197  000005                     LCD_dispControl@C:
   198                           	opt callstack 0
   199  000005                     LCD_cursor@RL:
   200                           	opt callstack 0
   201  000005                     LCD_functionSet@N:
   202                           	opt callstack 0
   203  000005                     ___lmul@multiplicand:
   204                           	opt callstack 0
   205  000005                     ___lldiv@divisor:
   206                           	opt callstack 0
   207  000005                     ___aldiv@divisor:
   208                           	opt callstack 0
   209  000005                     ___almod@divisor:
   210                           	opt callstack 0
   211                           
   212                           ; 4 bytes @ 0x4
   213  000005                     	ds	2
   214  000007                     ??_LCD_cursor:
   215  000007                     getKey@value:
   216                           	opt callstack 0
   217  000007                     LCD_dispControl@B:
   218                           	opt callstack 0
   219  000007                     LCD_functionSet@F:
   220                           	opt callstack 0
   221                           
   222                           ; 2 bytes @ 0x6
   223  000007                     	ds	1
   224  000008                     getKey@cols:
   225                           	opt callstack 0
   226                           
   227                           ; 1 bytes @ 0x7
   228  000008                     	ds	1
   229  000009                     ??_LCD_functionSet:
   230  000009                     ??_LCD_dispControl:
   231  000009                     getKey@rows:
   232                           	opt callstack 0
   233  000009                     ___aldiv@counter:
   234                           	opt callstack 0
   235  000009                     ___almod@counter:
   236                           	opt callstack 0
   237  000009                     ___lmul@product:
   238                           	opt callstack 0
   239  000009                     ___lldiv@quotient:
   240                           	opt callstack 0
   241                           
   242                           ; 4 bytes @ 0x8
   243  000009                     	ds	1
   244  00000A                     getKey@bit_rows:
   245                           	opt callstack 0
   246  00000A                     ___aldiv@sign:
   247                           	opt callstack 0
   248  00000A                     ___almod@sign:
   249                           	opt callstack 0
   250                           
   251                           ; 1 bytes @ 0x9
   252  00000A                     	ds	1
   253  00000B                     getKey@bit_cols:
   254                           	opt callstack 0
   255  00000B                     ___aldiv@quotient:
   256                           	opt callstack 0
   257                           
   258                           ; 4 bytes @ 0xA
   259  00000B                     	ds	1
   260  00000C                     getKey@i:
   261                           	opt callstack 0
   262                           
   263                           ; 2 bytes @ 0xB
   264  00000C                     	ds	1
   265  00000D                     ___lldiv@counter:
   266                           	opt callstack 0
   267                           
   268                           ; 1 bytes @ 0xC
   269  00000D                     	ds	1
   270  00000E                     ?_calculate:
   271                           	opt callstack 0
   272  00000E                     calculate@opIdx1:
   273                           	opt callstack 0
   274  00000E                     getKey@j:
   275                           	opt callstack 0
   276                           
   277                           ; 2 bytes @ 0xD
   278  00000E                     	ds	1
   279  00000F                     calculate@opIdx2:
   280                           	opt callstack 0
   281  00000F                     printCalcResult@result:
   282                           	opt callstack 0
   283                           
   284                           ; 4 bytes @ 0xE
   285  00000F                     	ds	1
   286  000010                     calculate@operators:
   287                           	opt callstack 0
   288                           
   289                           ; 2 bytes @ 0xF
   290  000010                     	ds	2
   291  000012                     ??_calculate:
   292                           
   293                           ; 1 bytes @ 0x11
   294  000012                     	ds	1
   295  000013                     printCalcResult@negativeFlag:
   296                           	opt callstack 0
   297                           
   298                           ; 1 bytes @ 0x12
   299  000013                     	ds	1
   300  000014                     printCalcResult@modulo:
   301                           	opt callstack 0
   302  000014                     calculate@operation:
   303                           	opt callstack 0
   304                           
   305                           ; 1 bytes @ 0x13
   306  000014                     	ds	1
   307  000015                     printCalcResult@i:
   308                           	opt callstack 0
   309  000015                     calculate@result:
   310                           	opt callstack 0
   311                           
   312                           ; 4 bytes @ 0x14
   313  000015                     	ds	4
   314  000019                     calculate@i:
   315                           	opt callstack 0
   316                           
   317                           ; 1 bytes @ 0x18
   318  000019                     	ds	1
   319  00001A                     calculate@i_307:
   320                           	opt callstack 0
   321                           
   322                           ; 1 bytes @ 0x19
   323  00001A                     	ds	1
   324  00001B                     calculate@operator1:
   325                           	opt callstack 0
   326                           
   327                           ; 4 bytes @ 0x1A
   328  00001B                     	ds	4
   329  00001F                     calculate@operator2:
   330                           	opt callstack 0
   331                           
   332                           ; 4 bytes @ 0x1E
   333  00001F                     	ds	4
   334  000023                     ??_main:
   335                           
   336                           ; 1 bytes @ 0x22
   337  000023                     	ds	1
   338  000024                     main@operators:
   339                           	opt callstack 0
   340                           
   341                           ; 14 bytes @ 0x23
   342  000024                     	ds	14
   343  000032                     main@result:
   344                           	opt callstack 0
   345                           
   346                           ; 4 bytes @ 0x31
   347  000032                     	ds	4
   348  000036                     main@val:
   349                           	opt callstack 0
   350                           
   351                           ; 1 bytes @ 0x35
   352  000036                     	ds	1
   353  000037                     main@operation:
   354                           	opt callstack 0
   355                           
   356                           ; 1 bytes @ 0x36
   357  000037                     	ds	1
   358  000038                     main@opIdx2:
   359                           	opt callstack 0
   360                           
   361                           ; 1 bytes @ 0x37
   362  000038                     	ds	1
   363  000039                     main@opIdx1:
   364                           	opt callstack 0
   365                           
   366                           ; 1 bytes @ 0x38
   367  000039                     	ds	1
   368  00003A                     main@key:
   369                           	opt callstack 0
   370                           
   371                           ; 1 bytes @ 0x39
   372  00003A                     	ds	1
   373                           
   374 ;;
   375 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   376 ;;
   377 ;; *************** function _main *****************
   378 ;; Defined at:
   379 ;;		line 33 in file "main.c"
   380 ;; Parameters:    Size  Location     Type
   381 ;;		None
   382 ;; Auto vars:     Size  Location     Type
   383 ;;  result          4   49[COMRAM] long 
   384 ;;  key             1   57[COMRAM] unsigned char 
   385 ;;  val             1   53[COMRAM] unsigned char 
   386 ;;  operators      14   35[COMRAM] unsigned char [14]
   387 ;;  opIdx1          1   56[COMRAM] unsigned char 
   388 ;;  opIdx2          1   55[COMRAM] unsigned char 
   389 ;;  operation       1   54[COMRAM] unsigned char 
   390 ;; Return value:  Size  Location     Type
   391 ;;                  1    wreg      void 
   392 ;; Registers used:
   393 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   394 ;; Tracked objects:
   395 ;;		On entry : 0/0
   396 ;;		On exit  : 0/0
   397 ;;		Unchanged: 0/0
   398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   399 ;;      Params:         0       0       0       0       0       0       0       0       0
   400 ;;      Locals:        23       0       0       0       0       0       0       0       0
   401 ;;      Temps:          1       0       0       0       0       0       0       0       0
   402 ;;      Totals:        24       0       0       0       0       0       0       0       0
   403 ;;Total ram usage:       24 bytes
   404 ;; Hardware stack levels required when called:    4
   405 ;; This function calls:
   406 ;;		_LCD_init
   407 ;;		_LCD_writeChar
   408 ;;		_calculate
   409 ;;		_getKey
   410 ;;		_getVal
   411 ;;		_ports_init
   412 ;;		_printCalcResult
   413 ;; This function is called by:
   414 ;;		Startup code after reset
   415 ;; This function uses a non-reentrant model
   416 ;;
   417                           
   418                           	psect	text0
   419  007B02                     __ptext0:
   420                           	opt callstack 0
   421  007B02                     _main:
   422                           	opt callstack 27
   423  007B02                     
   424                           ;main.c: 36:     static char key_vals[4][4] = {{'1', '2', '3', '+'}, {'4', '5', '6', '-'
      +                          }, {'7', '8', '9', '*'},;main.c: 38:     char operation = 0;
   425  007B02  0E00               	movlw	0
   426  007B04  6E37               	movwf	main@operation^0,c
   427                           
   428                           ;main.c: 39:     char opIdx1, opIdx2 = 0;
   429  007B06  0E00               	movlw	0
   430  007B08  6E38               	movwf	main@opIdx2^0,c
   431  007B0A                     
   432                           ;main.c: 40:     char operators[14];;main.c: 41:     ports_init();
   433  007B0A  EC48  F03B         	call	_ports_init	;wreg free
   434  007B0E                     
   435                           ;main.c: 42:     LCD_init();
   436  007B0E  EC67  F03B         	call	_LCD_init	;wreg free
   437  007B12                     l1528:
   438                           
   439                           ;main.c: 47:         char key = getKey(key_vals);
   440  007B12  0E3B               	movlw	low main@key_vals
   441  007B14  6E01               	movwf	getKey@key_vals^0,c
   442  007B16  0E00               	movlw	high main@key_vals
   443  007B18  6E02               	movwf	(getKey@key_vals+1)^0,c
   444  007B1A  EC17  F03C         	call	_getKey	;wreg free
   445  007B1E  6E3A               	movwf	main@key^0,c
   446  007B20                     
   447                           ;main.c: 48:         char val = getVal(key);
   448  007B20  503A               	movf	main@key^0,w,c
   449  007B22  ECB8  F03A         	call	_getVal
   450  007B26  6E36               	movwf	main@val^0,c
   451  007B28                     
   452                           ;main.c: 50:         if (key == '+' || key == '-' || key == '*' || key == '/') {
   453  007B28  0E2B               	movlw	43
   454  007B2A  183A               	xorwf	main@key^0,w,c
   455  007B2C  B4D8               	btfsc	status,2,c
   456  007B2E  EF9B  F03D         	goto	u641
   457  007B32  EF9D  F03D         	goto	u640
   458  007B36                     u641:
   459  007B36  EFB8  F03D         	goto	l1540
   460  007B3A                     u640:
   461  007B3A  0E2D               	movlw	45
   462  007B3C  183A               	xorwf	main@key^0,w,c
   463  007B3E  B4D8               	btfsc	status,2,c
   464  007B40  EFA4  F03D         	goto	u651
   465  007B44  EFA6  F03D         	goto	u650
   466  007B48                     u651:
   467  007B48  EFB8  F03D         	goto	l1540
   468  007B4C                     u650:
   469  007B4C  0E2A               	movlw	42
   470  007B4E  183A               	xorwf	main@key^0,w,c
   471  007B50  B4D8               	btfsc	status,2,c
   472  007B52  EFAD  F03D         	goto	u661
   473  007B56  EFAF  F03D         	goto	u660
   474  007B5A                     u661:
   475  007B5A  EFB8  F03D         	goto	l1540
   476  007B5E                     u660:
   477  007B5E  0E2F               	movlw	47
   478  007B60  183A               	xorwf	main@key^0,w,c
   479  007B62  A4D8               	btfss	status,2,c
   480  007B64  EFB6  F03D         	goto	u671
   481  007B68  EFB8  F03D         	goto	u670
   482  007B6C                     u671:
   483  007B6C  EFC1  F03D         	goto	l1546
   484  007B70                     u670:
   485  007B70                     l1540:
   486                           
   487                           ;main.c: 51:             LCD_writeChar(key);
   488  007B70  503A               	movf	main@key^0,w,c
   489  007B72  ECE8  F03A         	call	_LCD_writeChar
   490  007B76                     
   491                           ;main.c: 52:             operation = key;
   492  007B76  C03A  F037         	movff	main@key,main@operation
   493  007B7A                     
   494                           ;main.c: 53:             opIdx2 = opIdx1;
   495  007B7A  C039  F038         	movff	main@opIdx1,main@opIdx2
   496                           
   497                           ;main.c: 54:         }
   498  007B7E  EF1B  F03E         	goto	l1574
   499  007B82                     l1546:
   500  007B82  0E23               	movlw	35
   501  007B84  183A               	xorwf	main@key^0,w,c
   502  007B86  A4D8               	btfss	status,2,c
   503  007B88  EFC8  F03D         	goto	u681
   504  007B8C  EFCA  F03D         	goto	u680
   505  007B90                     u681:
   506  007B90  EFE9  F03D         	goto	l1552
   507  007B94                     u680:
   508  007B94                     
   509                           ;main.c: 56:             int32_t result = calculate(operation, opIdx1, opIdx2, operators
      +                          );
   510  007B94  C039  F00E         	movff	main@opIdx1,calculate@opIdx1
   511  007B98  C038  F00F         	movff	main@opIdx2,calculate@opIdx2
   512  007B9C  0E24               	movlw	low main@operators
   513  007B9E  6E10               	movwf	calculate@operators^0,c
   514  007BA0  0E00               	movlw	high main@operators
   515  007BA2  6E11               	movwf	(calculate@operators+1)^0,c
   516  007BA4  5037               	movf	main@operation^0,w,c
   517  007BA6  ECD0  F03E         	call	_calculate
   518  007BAA  C00E  F032         	movff	?_calculate,main@result
   519  007BAE  C00F  F033         	movff	?_calculate+1,main@result+1
   520  007BB2  C010  F034         	movff	?_calculate+2,main@result+2
   521  007BB6  C011  F035         	movff	?_calculate+3,main@result+3
   522  007BBA                     
   523                           ;main.c: 57:             printCalcResult(result);
   524  007BBA  C032  F00F         	movff	main@result,printCalcResult@result
   525  007BBE  C033  F010         	movff	main@result+1,printCalcResult@result+1
   526  007BC2  C034  F011         	movff	main@result+2,printCalcResult@result+2
   527  007BC6  C035  F012         	movff	main@result+3,printCalcResult@result+3
   528  007BCA  EC27  F03E         	call	_printCalcResult	;wreg free
   529                           
   530                           ;main.c: 58:         }
   531  007BCE  EF1B  F03E         	goto	l1574
   532  007BD2                     l1552:
   533  007BD2  0E52               	movlw	82
   534  007BD4  183A               	xorwf	main@key^0,w,c
   535  007BD6  A4D8               	btfss	status,2,c
   536  007BD8  EFF0  F03D         	goto	u691
   537  007BDC  EFF2  F03D         	goto	u690
   538  007BE0                     u691:
   539  007BE0  EFFC  F03D         	goto	l1562
   540  007BE4                     u690:
   541  007BE4                     
   542                           ;main.c: 60:            LCD_init();
   543  007BE4  EC67  F03B         	call	_LCD_init	;wreg free
   544  007BE8                     
   545                           ;main.c: 61:            operation = 0, opIdx1 = 0, opIdx2 = 0;
   546  007BE8  0E00               	movlw	0
   547  007BEA  6E37               	movwf	main@operation^0,c
   548  007BEC  0E00               	movlw	0
   549  007BEE  6E39               	movwf	main@opIdx1^0,c
   550  007BF0  0E00               	movlw	0
   551  007BF2  6E38               	movwf	main@opIdx2^0,c
   552                           
   553                           ;main.c: 62:         }
   554  007BF4  EF1B  F03E         	goto	l1574
   555  007BF8                     l1562:
   556                           
   557                           ;main.c: 64:             LCD_writeChar(key);
   558  007BF8  503A               	movf	main@key^0,w,c
   559  007BFA  ECE8  F03A         	call	_LCD_writeChar
   560  007BFE                     
   561                           ;main.c: 65:             if (operation) operators[opIdx2++] = val;
   562  007BFE  5037               	movf	main@operation^0,w,c
   563  007C00  B4D8               	btfsc	status,2,c
   564  007C02  EF05  F03E         	goto	u701
   565  007C06  EF07  F03E         	goto	u700
   566  007C0A                     u701:
   567  007C0A  EF12  F03E         	goto	l1570
   568  007C0E                     u700:
   569  007C0E  0E24               	movlw	low main@operators
   570  007C10  2438               	addwf	main@opIdx2^0,w,c
   571  007C12  6ED9               	movwf	fsr2l,c
   572  007C14  6ADA               	clrf	fsr2h,c
   573  007C16  0E00               	movlw	high main@operators
   574  007C18  22DA               	addwfc	fsr2h,f,c
   575  007C1A  C036  FFDF         	movff	main@val,indf2
   576  007C1E  2A38               	incf	main@opIdx2^0,f,c
   577  007C20  EF1B  F03E         	goto	l1574
   578  007C24                     l1570:
   579  007C24  0E24               	movlw	low main@operators
   580  007C26  2439               	addwf	main@opIdx1^0,w,c
   581  007C28  6ED9               	movwf	fsr2l,c
   582  007C2A  6ADA               	clrf	fsr2h,c
   583  007C2C  0E00               	movlw	high main@operators
   584  007C2E  22DA               	addwfc	fsr2h,f,c
   585  007C30  C036  FFDF         	movff	main@val,indf2
   586  007C34  2A39               	incf	main@opIdx1^0,f,c
   587  007C36                     l1574:
   588                           
   589                           ;main.c: 68:         _delay((unsigned long)((200)*(1000000/4000.0)));
   590  007C36  0E41               	movlw	65
   591  007C38  6E23               	movwf	??_main^0,c
   592  007C3A  0EEE               	movlw	238
   593  007C3C                     u717:
   594  007C3C  2EE8               	decfsz	wreg,f,c
   595  007C3E  D7FE               	bra	u717
   596  007C40  2E23               	decfsz	??_main^0,f,c
   597  007C42  D7FC               	bra	u717
   598  007C44  D000               	nop2	
   599  007C46  EF89  F03D         	goto	l1528
   600  007C4A  EF00  F000         	goto	start
   601  007C4E                     __end_of_main:
   602                           	opt callstack 0
   603                           
   604 ;; *************** function _printCalcResult *****************
   605 ;; Defined at:
   606 ;;		line 98 in file "main.c"
   607 ;; Parameters:    Size  Location     Type
   608 ;;  result          4   14[COMRAM] long 
   609 ;; Auto vars:     Size  Location     Type
   610 ;;  modulo          1   19[COMRAM] unsigned char 
   611 ;;  i               2   20[COMRAM] int 
   612 ;;  negativeFlag    1   18[COMRAM] unsigned char 
   613 ;; Return value:  Size  Location     Type
   614 ;;                  1    wreg      void 
   615 ;; Registers used:
   616 ;;		wreg, status,2, status,0, cstack
   617 ;; Tracked objects:
   618 ;;		On entry : 0/0
   619 ;;		On exit  : 0/0
   620 ;;		Unchanged: 0/0
   621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   622 ;;      Params:         4       0       0       0       0       0       0       0       0
   623 ;;      Locals:         4       0       0       0       0       0       0       0       0
   624 ;;      Temps:          0       0       0       0       0       0       0       0       0
   625 ;;      Totals:         8       0       0       0       0       0       0       0       0
   626 ;;Total ram usage:        8 bytes
   627 ;; Hardware stack levels used:    1
   628 ;; Hardware stack levels required when called:    3
   629 ;; This function calls:
   630 ;;		_LCD_cursor
   631 ;;		_LCD_dispControl
   632 ;;		_LCD_entryMode
   633 ;;		_LCD_newLine
   634 ;;		_LCD_writeChar
   635 ;;		___aldiv
   636 ;;		___almod
   637 ;;		___lmul
   638 ;; This function is called by:
   639 ;;		_main
   640 ;; This function uses a non-reentrant model
   641 ;;
   642                           
   643                           	psect	text1
   644  007C4E                     __ptext1:
   645                           	opt callstack 0
   646  007C4E                     _printCalcResult:
   647                           	opt callstack 27
   648  007C4E                     
   649                           ;main.c: 98: void printCalcResult(int32_t result);main.c: 99: {;main.c: 100:     LCD_new
      +                          Line();
   650  007C4E  ECBC  F03A         	call	_LCD_newLine	;wreg free
   651  007C52                     
   652                           ;main.c: 103:     for (int i = 0; i < 15; i++) {
   653  007C52  0E00               	movlw	0
   654  007C54  6E16               	movwf	(printCalcResult@i+1)^0,c
   655  007C56  0E00               	movlw	0
   656  007C58  6E15               	movwf	printCalcResult@i^0,c
   657  007C5A                     l1492:
   658                           
   659                           ;main.c: 104:         LCD_cursor(0, 1);
   660  007C5A  0E00               	movlw	0
   661  007C5C  6E04               	movwf	(LCD_cursor@SC+1)^0,c
   662  007C5E  0E00               	movlw	0
   663  007C60  6E03               	movwf	LCD_cursor@SC^0,c
   664  007C62  0E00               	movlw	0
   665  007C64  6E06               	movwf	(LCD_cursor@RL+1)^0,c
   666  007C66  0E01               	movlw	1
   667  007C68  6E05               	movwf	LCD_cursor@RL^0,c
   668  007C6A  ECF5  F03A         	call	_LCD_cursor	;wreg free
   669  007C6E                     
   670                           ;main.c: 105:     }
   671  007C6E  4A15               	infsnz	printCalcResult@i^0,f,c
   672  007C70  2A16               	incf	(printCalcResult@i+1)^0,f,c
   673  007C72  BE16               	btfsc	(printCalcResult@i+1)^0,7,c
   674  007C74  EF45  F03E         	goto	u601
   675  007C78  5016               	movf	(printCalcResult@i+1)^0,w,c
   676  007C7A  E109               	bnz	u600
   677  007C7C  0E0F               	movlw	15
   678  007C7E  5C15               	subwf	printCalcResult@i^0,w,c
   679  007C80  A0D8               	btfss	status,0,c
   680  007C82  EF45  F03E         	goto	u601
   681  007C86  EF47  F03E         	goto	u600
   682  007C8A                     u601:
   683  007C8A  EF2D  F03E         	goto	l1492
   684  007C8E                     u600:
   685  007C8E                     
   686                           ;main.c: 107:     LCD_entryMode(0,0);
   687  007C8E  0E00               	movlw	0
   688  007C90  6E04               	movwf	(LCD_entryMode@ID+1)^0,c
   689  007C92  0E00               	movlw	0
   690  007C94  6E03               	movwf	LCD_entryMode@ID^0,c
   691  007C96  0E00               	movlw	0
   692  007C98  6E06               	movwf	(LCD_entryMode@SH+1)^0,c
   693  007C9A  0E00               	movlw	0
   694  007C9C  6E05               	movwf	LCD_entryMode@SH^0,c
   695  007C9E  ECC0  F03A         	call	_LCD_entryMode	;wreg free
   696  007CA2                     
   697                           ;main.c: 108:     char negativeFlag = 0;
   698  007CA2  0E00               	movlw	0
   699  007CA4  6E13               	movwf	printCalcResult@negativeFlag^0,c
   700  007CA6                     
   701                           ;main.c: 109:     if (result < 0)
   702  007CA6  BE12               	btfsc	(printCalcResult@result+3)^0,7,c
   703  007CA8  EF5A  F03E         	goto	u610
   704  007CAC  EF58  F03E         	goto	u611
   705  007CB0                     u611:
   706  007CB0  EFAB  F03E         	goto	l1516
   707  007CB4                     u610:
   708  007CB4                     
   709                           ;main.c: 110:     {;main.c: 111:         result *= -1;
   710  007CB4  C00F  F001         	movff	printCalcResult@result,___lmul@multiplier
   711  007CB8  C010  F002         	movff	printCalcResult@result+1,___lmul@multiplier+1
   712  007CBC  C011  F003         	movff	printCalcResult@result+2,___lmul@multiplier+2
   713  007CC0  C012  F004         	movff	printCalcResult@result+3,___lmul@multiplier+3
   714  007CC4  0EFF               	movlw	255
   715  007CC6  6E05               	movwf	___lmul@multiplicand^0,c
   716  007CC8  0EFF               	movlw	255
   717  007CCA  6E06               	movwf	(___lmul@multiplicand+1)^0,c
   718  007CCC  0EFF               	movlw	255
   719  007CCE  6E07               	movwf	(___lmul@multiplicand+2)^0,c
   720  007CD0  0EFF               	movlw	255
   721  007CD2  6E08               	movwf	(___lmul@multiplicand+3)^0,c
   722  007CD4  EC90  F03B         	call	___lmul	;wreg free
   723  007CD8  C001  F00F         	movff	?___lmul,printCalcResult@result
   724  007CDC  C002  F010         	movff	?___lmul+1,printCalcResult@result+1
   725  007CE0  C003  F011         	movff	?___lmul+2,printCalcResult@result+2
   726  007CE4  C004  F012         	movff	?___lmul+3,printCalcResult@result+3
   727  007CE8                     
   728                           ;main.c: 112:         negativeFlag = 1;
   729  007CE8  0E01               	movlw	1
   730  007CEA  6E13               	movwf	printCalcResult@negativeFlag^0,c
   731  007CEC  EFAB  F03E         	goto	l1516
   732  007CF0                     l1508:
   733                           
   734                           ;main.c: 115:         char modulo = result % 10;
   735  007CF0  C00F  F001         	movff	printCalcResult@result,___almod@dividend
   736  007CF4  C010  F002         	movff	printCalcResult@result+1,___almod@dividend+1
   737  007CF8  C011  F003         	movff	printCalcResult@result+2,___almod@dividend+2
   738  007CFC  C012  F004         	movff	printCalcResult@result+3,___almod@dividend+3
   739  007D00  0E0A               	movlw	10
   740  007D02  6E05               	movwf	___almod@divisor^0,c
   741  007D04  0E00               	movlw	0
   742  007D06  6E06               	movwf	(___almod@divisor+1)^0,c
   743  007D08  0E00               	movlw	0
   744  007D0A  6E07               	movwf	(___almod@divisor+2)^0,c
   745  007D0C  0E00               	movlw	0
   746  007D0E  6E08               	movwf	(___almod@divisor+3)^0,c
   747  007D10  EC85  F03C         	call	___almod	;wreg free
   748  007D14  5001               	movf	?___almod^0,w,c
   749  007D16  6E14               	movwf	printCalcResult@modulo^0,c
   750  007D18                     
   751                           ;main.c: 116:         modulo += 48;
   752  007D18  0E30               	movlw	48
   753  007D1A  2614               	addwf	printCalcResult@modulo^0,f,c
   754  007D1C                     
   755                           ;main.c: 117:         LCD_writeChar(modulo);
   756  007D1C  5014               	movf	printCalcResult@modulo^0,w,c
   757  007D1E  ECE8  F03A         	call	_LCD_writeChar
   758  007D22                     
   759                           ;main.c: 118:         result /= 10;
   760  007D22  C00F  F001         	movff	printCalcResult@result,___aldiv@dividend
   761  007D26  C010  F002         	movff	printCalcResult@result+1,___aldiv@dividend+1
   762  007D2A  C011  F003         	movff	printCalcResult@result+2,___aldiv@dividend+2
   763  007D2E  C012  F004         	movff	printCalcResult@result+3,___aldiv@dividend+3
   764  007D32  0E0A               	movlw	10
   765  007D34  6E05               	movwf	___aldiv@divisor^0,c
   766  007D36  0E00               	movlw	0
   767  007D38  6E06               	movwf	(___aldiv@divisor+1)^0,c
   768  007D3A  0E00               	movlw	0
   769  007D3C  6E07               	movwf	(___aldiv@divisor+2)^0,c
   770  007D3E  0E00               	movlw	0
   771  007D40  6E08               	movwf	(___aldiv@divisor+3)^0,c
   772  007D42  ECFB  F03C         	call	___aldiv	;wreg free
   773  007D46  C001  F00F         	movff	?___aldiv,printCalcResult@result
   774  007D4A  C002  F010         	movff	?___aldiv+1,printCalcResult@result+1
   775  007D4E  C003  F011         	movff	?___aldiv+2,printCalcResult@result+2
   776  007D52  C004  F012         	movff	?___aldiv+3,printCalcResult@result+3
   777  007D56                     l1516:
   778                           
   779                           ;main.c: 114:     while (result) {
   780  007D56  500F               	movf	printCalcResult@result^0,w,c
   781  007D58  1010               	iorwf	(printCalcResult@result+1)^0,w,c
   782  007D5A  1011               	iorwf	(printCalcResult@result+2)^0,w,c
   783  007D5C  1012               	iorwf	(printCalcResult@result+3)^0,w,c
   784  007D5E  A4D8               	btfss	status,2,c
   785  007D60  EFB4  F03E         	goto	u621
   786  007D64  EFB6  F03E         	goto	u620
   787  007D68                     u621:
   788  007D68  EF78  F03E         	goto	l1508
   789  007D6C                     u620:
   790  007D6C                     
   791                           ;main.c: 120:     if (negativeFlag) LCD_writeChar('-');
   792  007D6C  5013               	movf	printCalcResult@negativeFlag^0,w,c
   793  007D6E  B4D8               	btfsc	status,2,c
   794  007D70  EFBC  F03E         	goto	u631
   795  007D74  EFBE  F03E         	goto	u630
   796  007D78                     u631:
   797  007D78  EFC1  F03E         	goto	l136
   798  007D7C                     u630:
   799  007D7C  0E2D               	movlw	45
   800  007D7E  ECE8  F03A         	call	_LCD_writeChar
   801  007D82                     l136:
   802                           
   803                           ;main.c: 122:     LCD_dispControl(1,0,0);
   804  007D82  0E00               	movlw	0
   805  007D84  6E04               	movwf	(LCD_dispControl@D+1)^0,c
   806  007D86  0E01               	movlw	1
   807  007D88  6E03               	movwf	LCD_dispControl@D^0,c
   808  007D8A  0E00               	movlw	0
   809  007D8C  6E06               	movwf	(LCD_dispControl@C+1)^0,c
   810  007D8E  0E00               	movlw	0
   811  007D90  6E05               	movwf	LCD_dispControl@C^0,c
   812  007D92  0E00               	movlw	0
   813  007D94  6E08               	movwf	(LCD_dispControl@B+1)^0,c
   814  007D96  0E00               	movlw	0
   815  007D98  6E07               	movwf	LCD_dispControl@B^0,c
   816  007D9A  ECCF  F03A         	call	_LCD_dispControl	;wreg free
   817  007D9E  0012               	return		;funcret
   818  007DA0                     __end_of_printCalcResult:
   819                           	opt callstack 0
   820                           
   821 ;; *************** function ___almod *****************
   822 ;; Defined at:
   823 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\almod.c"
   824 ;; Parameters:    Size  Location     Type
   825 ;;  dividend        4    0[COMRAM] long 
   826 ;;  divisor         4    4[COMRAM] long 
   827 ;; Auto vars:     Size  Location     Type
   828 ;;  sign            1    9[COMRAM] unsigned char 
   829 ;;  counter         1    8[COMRAM] unsigned char 
   830 ;; Return value:  Size  Location     Type
   831 ;;                  4    0[COMRAM] long 
   832 ;; Registers used:
   833 ;;		wreg, status,2, status,0
   834 ;; Tracked objects:
   835 ;;		On entry : 0/0
   836 ;;		On exit  : 0/0
   837 ;;		Unchanged: 0/0
   838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   839 ;;      Params:         8       0       0       0       0       0       0       0       0
   840 ;;      Locals:         2       0       0       0       0       0       0       0       0
   841 ;;      Temps:          0       0       0       0       0       0       0       0       0
   842 ;;      Totals:        10       0       0       0       0       0       0       0       0
   843 ;;Total ram usage:       10 bytes
   844 ;; Hardware stack levels used:    1
   845 ;; This function calls:
   846 ;;		Nothing
   847 ;; This function is called by:
   848 ;;		_printCalcResult
   849 ;; This function uses a non-reentrant model
   850 ;;
   851                           
   852                           	psect	text2
   853  00790A                     __ptext2:
   854                           	opt callstack 0
   855  00790A                     ___almod:
   856                           	opt callstack 29
   857  00790A  0E00               	movlw	0
   858  00790C  6E0A               	movwf	___almod@sign^0,c
   859  00790E  BE04               	btfsc	(___almod@dividend+3)^0,7,c
   860  007910  EF8E  F03C         	goto	u480
   861  007914  EF8C  F03C         	goto	u481
   862  007918                     u481:
   863  007918  EF98  F03C         	goto	l1364
   864  00791C                     u480:
   865  00791C  1E04               	comf	(___almod@dividend+3)^0,f,c
   866  00791E  1E03               	comf	(___almod@dividend+2)^0,f,c
   867  007920  1E02               	comf	(___almod@dividend+1)^0,f,c
   868  007922  6C01               	negf	___almod@dividend^0,c
   869  007924  0E00               	movlw	0
   870  007926  2202               	addwfc	(___almod@dividend+1)^0,f,c
   871  007928  2203               	addwfc	(___almod@dividend+2)^0,f,c
   872  00792A  2204               	addwfc	(___almod@dividend+3)^0,f,c
   873  00792C  0E01               	movlw	1
   874  00792E  6E0A               	movwf	___almod@sign^0,c
   875  007930                     l1364:
   876  007930  BE08               	btfsc	(___almod@divisor+3)^0,7,c
   877  007932  EF9F  F03C         	goto	u490
   878  007936  EF9D  F03C         	goto	u491
   879  00793A                     u491:
   880  00793A  EFA7  F03C         	goto	l1368
   881  00793E                     u490:
   882  00793E  1E08               	comf	(___almod@divisor+3)^0,f,c
   883  007940  1E07               	comf	(___almod@divisor+2)^0,f,c
   884  007942  1E06               	comf	(___almod@divisor+1)^0,f,c
   885  007944  6C05               	negf	___almod@divisor^0,c
   886  007946  0E00               	movlw	0
   887  007948  2206               	addwfc	(___almod@divisor+1)^0,f,c
   888  00794A  2207               	addwfc	(___almod@divisor+2)^0,f,c
   889  00794C  2208               	addwfc	(___almod@divisor+3)^0,f,c
   890  00794E                     l1368:
   891  00794E  5005               	movf	___almod@divisor^0,w,c
   892  007950  1006               	iorwf	(___almod@divisor+1)^0,w,c
   893  007952  1007               	iorwf	(___almod@divisor+2)^0,w,c
   894  007954  1008               	iorwf	(___almod@divisor+3)^0,w,c
   895  007956  B4D8               	btfsc	status,2,c
   896  007958  EFB0  F03C         	goto	u501
   897  00795C  EFB2  F03C         	goto	u500
   898  007960                     u501:
   899  007960  EFE2  F03C         	goto	l1384
   900  007964                     u500:
   901  007964  0E01               	movlw	1
   902  007966  6E09               	movwf	___almod@counter^0,c
   903  007968  EFBC  F03C         	goto	l1374
   904  00796C                     l1372:
   905  00796C  90D8               	bcf	status,0,c
   906  00796E  3605               	rlcf	___almod@divisor^0,f,c
   907  007970  3606               	rlcf	(___almod@divisor+1)^0,f,c
   908  007972  3607               	rlcf	(___almod@divisor+2)^0,f,c
   909  007974  3608               	rlcf	(___almod@divisor+3)^0,f,c
   910  007976  2A09               	incf	___almod@counter^0,f,c
   911  007978                     l1374:
   912  007978  AE08               	btfss	(___almod@divisor+3)^0,7,c
   913  00797A  EFC1  F03C         	goto	u511
   914  00797E  EFC3  F03C         	goto	u510
   915  007982                     u511:
   916  007982  EFB6  F03C         	goto	l1372
   917  007986                     u510:
   918  007986                     l1376:
   919  007986  5005               	movf	___almod@divisor^0,w,c
   920  007988  5C01               	subwf	___almod@dividend^0,w,c
   921  00798A  5006               	movf	(___almod@divisor+1)^0,w,c
   922  00798C  5802               	subwfb	(___almod@dividend+1)^0,w,c
   923  00798E  5007               	movf	(___almod@divisor+2)^0,w,c
   924  007990  5803               	subwfb	(___almod@dividend+2)^0,w,c
   925  007992  5008               	movf	(___almod@divisor+3)^0,w,c
   926  007994  5804               	subwfb	(___almod@dividend+3)^0,w,c
   927  007996  A0D8               	btfss	status,0,c
   928  007998  EFD0  F03C         	goto	u521
   929  00799C  EFD2  F03C         	goto	u520
   930  0079A0                     u521:
   931  0079A0  EFDA  F03C         	goto	l1380
   932  0079A4                     u520:
   933  0079A4  5005               	movf	___almod@divisor^0,w,c
   934  0079A6  5E01               	subwf	___almod@dividend^0,f,c
   935  0079A8  5006               	movf	(___almod@divisor+1)^0,w,c
   936  0079AA  5A02               	subwfb	(___almod@dividend+1)^0,f,c
   937  0079AC  5007               	movf	(___almod@divisor+2)^0,w,c
   938  0079AE  5A03               	subwfb	(___almod@dividend+2)^0,f,c
   939  0079B0  5008               	movf	(___almod@divisor+3)^0,w,c
   940  0079B2  5A04               	subwfb	(___almod@dividend+3)^0,f,c
   941  0079B4                     l1380:
   942  0079B4  90D8               	bcf	status,0,c
   943  0079B6  3208               	rrcf	(___almod@divisor+3)^0,f,c
   944  0079B8  3207               	rrcf	(___almod@divisor+2)^0,f,c
   945  0079BA  3206               	rrcf	(___almod@divisor+1)^0,f,c
   946  0079BC  3205               	rrcf	___almod@divisor^0,f,c
   947  0079BE  2E09               	decfsz	___almod@counter^0,f,c
   948  0079C0  EFC3  F03C         	goto	l1376
   949  0079C4                     l1384:
   950  0079C4  500A               	movf	___almod@sign^0,w,c
   951  0079C6  B4D8               	btfsc	status,2,c
   952  0079C8  EFE8  F03C         	goto	u531
   953  0079CC  EFEA  F03C         	goto	u530
   954  0079D0                     u531:
   955  0079D0  EFF2  F03C         	goto	l1388
   956  0079D4                     u530:
   957  0079D4  1E04               	comf	(___almod@dividend+3)^0,f,c
   958  0079D6  1E03               	comf	(___almod@dividend+2)^0,f,c
   959  0079D8  1E02               	comf	(___almod@dividend+1)^0,f,c
   960  0079DA  6C01               	negf	___almod@dividend^0,c
   961  0079DC  0E00               	movlw	0
   962  0079DE  2202               	addwfc	(___almod@dividend+1)^0,f,c
   963  0079E0  2203               	addwfc	(___almod@dividend+2)^0,f,c
   964  0079E2  2204               	addwfc	(___almod@dividend+3)^0,f,c
   965  0079E4                     l1388:
   966  0079E4  C001  F001         	movff	___almod@dividend,?___almod
   967  0079E8  C002  F002         	movff	___almod@dividend+1,?___almod+1
   968  0079EC  C003  F003         	movff	___almod@dividend+2,?___almod+2
   969  0079F0  C004  F004         	movff	___almod@dividend+3,?___almod+3
   970  0079F4  0012               	return		;funcret
   971  0079F6                     __end_of___almod:
   972                           	opt callstack 0
   973                           
   974 ;; *************** function ___aldiv *****************
   975 ;; Defined at:
   976 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\aldiv.c"
   977 ;; Parameters:    Size  Location     Type
   978 ;;  dividend        4    0[COMRAM] long 
   979 ;;  divisor         4    4[COMRAM] long 
   980 ;; Auto vars:     Size  Location     Type
   981 ;;  quotient        4   10[COMRAM] long 
   982 ;;  sign            1    9[COMRAM] unsigned char 
   983 ;;  counter         1    8[COMRAM] unsigned char 
   984 ;; Return value:  Size  Location     Type
   985 ;;                  4    0[COMRAM] long 
   986 ;; Registers used:
   987 ;;		wreg, status,2, status,0
   988 ;; Tracked objects:
   989 ;;		On entry : 0/0
   990 ;;		On exit  : 0/0
   991 ;;		Unchanged: 0/0
   992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   993 ;;      Params:         8       0       0       0       0       0       0       0       0
   994 ;;      Locals:         6       0       0       0       0       0       0       0       0
   995 ;;      Temps:          0       0       0       0       0       0       0       0       0
   996 ;;      Totals:        14       0       0       0       0       0       0       0       0
   997 ;;Total ram usage:       14 bytes
   998 ;; Hardware stack levels used:    1
   999 ;; This function calls:
  1000 ;;		Nothing
  1001 ;; This function is called by:
  1002 ;;		_printCalcResult
  1003 ;; This function uses a non-reentrant model
  1004 ;;
  1005                           
  1006                           	psect	text3
  1007  0079F6                     __ptext3:
  1008                           	opt callstack 0
  1009  0079F6                     ___aldiv:
  1010                           	opt callstack 29
  1011  0079F6  0E00               	movlw	0
  1012  0079F8  6E0A               	movwf	___aldiv@sign^0,c
  1013  0079FA  BE08               	btfsc	(___aldiv@divisor+3)^0,7,c
  1014  0079FC  EF04  F03D         	goto	u420
  1015  007A00  EF02  F03D         	goto	u421
  1016  007A04                     u421:
  1017  007A04  EF0E  F03D         	goto	l1320
  1018  007A08                     u420:
  1019  007A08  1E08               	comf	(___aldiv@divisor+3)^0,f,c
  1020  007A0A  1E07               	comf	(___aldiv@divisor+2)^0,f,c
  1021  007A0C  1E06               	comf	(___aldiv@divisor+1)^0,f,c
  1022  007A0E  6C05               	negf	___aldiv@divisor^0,c
  1023  007A10  0E00               	movlw	0
  1024  007A12  2206               	addwfc	(___aldiv@divisor+1)^0,f,c
  1025  007A14  2207               	addwfc	(___aldiv@divisor+2)^0,f,c
  1026  007A16  2208               	addwfc	(___aldiv@divisor+3)^0,f,c
  1027  007A18  0E01               	movlw	1
  1028  007A1A  6E0A               	movwf	___aldiv@sign^0,c
  1029  007A1C                     l1320:
  1030  007A1C  BE04               	btfsc	(___aldiv@dividend+3)^0,7,c
  1031  007A1E  EF15  F03D         	goto	u430
  1032  007A22  EF13  F03D         	goto	u431
  1033  007A26                     u431:
  1034  007A26  EF1F  F03D         	goto	l1326
  1035  007A2A                     u430:
  1036  007A2A  1E04               	comf	(___aldiv@dividend+3)^0,f,c
  1037  007A2C  1E03               	comf	(___aldiv@dividend+2)^0,f,c
  1038  007A2E  1E02               	comf	(___aldiv@dividend+1)^0,f,c
  1039  007A30  6C01               	negf	___aldiv@dividend^0,c
  1040  007A32  0E00               	movlw	0
  1041  007A34  2202               	addwfc	(___aldiv@dividend+1)^0,f,c
  1042  007A36  2203               	addwfc	(___aldiv@dividend+2)^0,f,c
  1043  007A38  2204               	addwfc	(___aldiv@dividend+3)^0,f,c
  1044  007A3A  0E01               	movlw	1
  1045  007A3C  1A0A               	xorwf	___aldiv@sign^0,f,c
  1046  007A3E                     l1326:
  1047  007A3E  0E00               	movlw	0
  1048  007A40  6E0B               	movwf	___aldiv@quotient^0,c
  1049  007A42  0E00               	movlw	0
  1050  007A44  6E0C               	movwf	(___aldiv@quotient+1)^0,c
  1051  007A46  0E00               	movlw	0
  1052  007A48  6E0D               	movwf	(___aldiv@quotient+2)^0,c
  1053  007A4A  0E00               	movlw	0
  1054  007A4C  6E0E               	movwf	(___aldiv@quotient+3)^0,c
  1055  007A4E  5005               	movf	___aldiv@divisor^0,w,c
  1056  007A50  1006               	iorwf	(___aldiv@divisor+1)^0,w,c
  1057  007A52  1007               	iorwf	(___aldiv@divisor+2)^0,w,c
  1058  007A54  1008               	iorwf	(___aldiv@divisor+3)^0,w,c
  1059  007A56  B4D8               	btfsc	status,2,c
  1060  007A58  EF30  F03D         	goto	u441
  1061  007A5C  EF32  F03D         	goto	u440
  1062  007A60                     u441:
  1063  007A60  EF68  F03D         	goto	l1348
  1064  007A64                     u440:
  1065  007A64  0E01               	movlw	1
  1066  007A66  6E09               	movwf	___aldiv@counter^0,c
  1067  007A68  EF3C  F03D         	goto	l1334
  1068  007A6C                     l1332:
  1069  007A6C  90D8               	bcf	status,0,c
  1070  007A6E  3605               	rlcf	___aldiv@divisor^0,f,c
  1071  007A70  3606               	rlcf	(___aldiv@divisor+1)^0,f,c
  1072  007A72  3607               	rlcf	(___aldiv@divisor+2)^0,f,c
  1073  007A74  3608               	rlcf	(___aldiv@divisor+3)^0,f,c
  1074  007A76  2A09               	incf	___aldiv@counter^0,f,c
  1075  007A78                     l1334:
  1076  007A78  AE08               	btfss	(___aldiv@divisor+3)^0,7,c
  1077  007A7A  EF41  F03D         	goto	u451
  1078  007A7E  EF43  F03D         	goto	u450
  1079  007A82                     u451:
  1080  007A82  EF36  F03D         	goto	l1332
  1081  007A86                     u450:
  1082  007A86                     l1336:
  1083  007A86  90D8               	bcf	status,0,c
  1084  007A88  360B               	rlcf	___aldiv@quotient^0,f,c
  1085  007A8A  360C               	rlcf	(___aldiv@quotient+1)^0,f,c
  1086  007A8C  360D               	rlcf	(___aldiv@quotient+2)^0,f,c
  1087  007A8E  360E               	rlcf	(___aldiv@quotient+3)^0,f,c
  1088  007A90  5005               	movf	___aldiv@divisor^0,w,c
  1089  007A92  5C01               	subwf	___aldiv@dividend^0,w,c
  1090  007A94  5006               	movf	(___aldiv@divisor+1)^0,w,c
  1091  007A96  5802               	subwfb	(___aldiv@dividend+1)^0,w,c
  1092  007A98  5007               	movf	(___aldiv@divisor+2)^0,w,c
  1093  007A9A  5803               	subwfb	(___aldiv@dividend+2)^0,w,c
  1094  007A9C  5008               	movf	(___aldiv@divisor+3)^0,w,c
  1095  007A9E  5804               	subwfb	(___aldiv@dividend+3)^0,w,c
  1096  007AA0  A0D8               	btfss	status,0,c
  1097  007AA2  EF55  F03D         	goto	u461
  1098  007AA6  EF57  F03D         	goto	u460
  1099  007AAA                     u461:
  1100  007AAA  EF60  F03D         	goto	l1344
  1101  007AAE                     u460:
  1102  007AAE  5005               	movf	___aldiv@divisor^0,w,c
  1103  007AB0  5E01               	subwf	___aldiv@dividend^0,f,c
  1104  007AB2  5006               	movf	(___aldiv@divisor+1)^0,w,c
  1105  007AB4  5A02               	subwfb	(___aldiv@dividend+1)^0,f,c
  1106  007AB6  5007               	movf	(___aldiv@divisor+2)^0,w,c
  1107  007AB8  5A03               	subwfb	(___aldiv@dividend+2)^0,f,c
  1108  007ABA  5008               	movf	(___aldiv@divisor+3)^0,w,c
  1109  007ABC  5A04               	subwfb	(___aldiv@dividend+3)^0,f,c
  1110  007ABE  800B               	bsf	___aldiv@quotient^0,0,c
  1111  007AC0                     l1344:
  1112  007AC0  90D8               	bcf	status,0,c
  1113  007AC2  3208               	rrcf	(___aldiv@divisor+3)^0,f,c
  1114  007AC4  3207               	rrcf	(___aldiv@divisor+2)^0,f,c
  1115  007AC6  3206               	rrcf	(___aldiv@divisor+1)^0,f,c
  1116  007AC8  3205               	rrcf	___aldiv@divisor^0,f,c
  1117  007ACA  2E09               	decfsz	___aldiv@counter^0,f,c
  1118  007ACC  EF43  F03D         	goto	l1336
  1119  007AD0                     l1348:
  1120  007AD0  500A               	movf	___aldiv@sign^0,w,c
  1121  007AD2  B4D8               	btfsc	status,2,c
  1122  007AD4  EF6E  F03D         	goto	u471
  1123  007AD8  EF70  F03D         	goto	u470
  1124  007ADC                     u471:
  1125  007ADC  EF78  F03D         	goto	l1352
  1126  007AE0                     u470:
  1127  007AE0  1E0E               	comf	(___aldiv@quotient+3)^0,f,c
  1128  007AE2  1E0D               	comf	(___aldiv@quotient+2)^0,f,c
  1129  007AE4  1E0C               	comf	(___aldiv@quotient+1)^0,f,c
  1130  007AE6  6C0B               	negf	___aldiv@quotient^0,c
  1131  007AE8  0E00               	movlw	0
  1132  007AEA  220C               	addwfc	(___aldiv@quotient+1)^0,f,c
  1133  007AEC  220D               	addwfc	(___aldiv@quotient+2)^0,f,c
  1134  007AEE  220E               	addwfc	(___aldiv@quotient+3)^0,f,c
  1135  007AF0                     l1352:
  1136  007AF0  C00B  F001         	movff	___aldiv@quotient,?___aldiv
  1137  007AF4  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
  1138  007AF8  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
  1139  007AFC  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
  1140  007B00  0012               	return		;funcret
  1141  007B02                     __end_of___aldiv:
  1142                           	opt callstack 0
  1143                           
  1144 ;; *************** function _LCD_writeChar *****************
  1145 ;; Defined at:
  1146 ;;		line 128 in file "./lcd.h"
  1147 ;; Parameters:    Size  Location     Type
  1148 ;;  data            1    wreg     unsigned char 
  1149 ;; Auto vars:     Size  Location     Type
  1150 ;;  data            1    1[COMRAM] unsigned char 
  1151 ;; Return value:  Size  Location     Type
  1152 ;;                  1    wreg      void 
  1153 ;; Registers used:
  1154 ;;		wreg, status,2, status,0, cstack
  1155 ;; Tracked objects:
  1156 ;;		On entry : 0/0
  1157 ;;		On exit  : 0/0
  1158 ;;		Unchanged: 0/0
  1159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1160 ;;      Params:         0       0       0       0       0       0       0       0       0
  1161 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1162 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1163 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1164 ;;Total ram usage:        1 bytes
  1165 ;; Hardware stack levels used:    1
  1166 ;; Hardware stack levels required when called:    1
  1167 ;; This function calls:
  1168 ;;		_LCD_rdy
  1169 ;; This function is called by:
  1170 ;;		_main
  1171 ;;		_printCalcResult
  1172 ;; This function uses a non-reentrant model
  1173 ;;
  1174                           
  1175                           	psect	text4
  1176  0075D0                     __ptext4:
  1177                           	opt callstack 0
  1178  0075D0                     _LCD_writeChar:
  1179                           	opt callstack 28
  1180                           
  1181                           ;incstack = 0
  1182                           ;LCD_writeChar@data stored from wreg
  1183  0075D0  6E02               	movwf	LCD_writeChar@data^0,c
  1184  0075D2                     
  1185                           ;./lcd.h: 129:     LCD_rdy();
  1186  0075D2  EC2E  F03B         	call	_LCD_rdy	;wreg free
  1187  0075D6                     
  1188                           ;./lcd.h: 130:     PORTCbits.RC2 = 1;
  1189  0075D6  8482               	bsf	130,2,c	;volatile
  1190  0075D8                     
  1191                           ;./lcd.h: 131:     PORTCbits.RC1 = 0;
  1192  0075D8  9282               	bcf	130,1,c	;volatile
  1193  0075DA                     
  1194                           ;./lcd.h: 133:     PORTCbits.RC0 = 1;
  1195  0075DA  8082               	bsf	130,0,c	;volatile
  1196  0075DC                     
  1197                           ;./lcd.h: 134:     __nop();
  1198  0075DC  F000               	nop	
  1199  0075DE                     
  1200                           ;./lcd.h: 135:     LATD = data;
  1201  0075DE  C002  FF8C         	movff	LCD_writeChar@data,3980	;volatile
  1202  0075E2                     
  1203                           ;./lcd.h: 136:     __nop();
  1204  0075E2  F000               	nop	
  1205  0075E4                     
  1206                           ;./lcd.h: 137:     PORTCbits.RC0 = 0;
  1207  0075E4  9082               	bcf	130,0,c	;volatile
  1208  0075E6                     
  1209                           ;./lcd.h: 138:     __nop();
  1210  0075E6  F000               	nop	
  1211  0075E8  0012               	return		;funcret
  1212  0075EA                     __end_of_LCD_writeChar:
  1213                           	opt callstack 0
  1214                           
  1215 ;; *************** function _LCD_newLine *****************
  1216 ;; Defined at:
  1217 ;;		line 75 in file "./lcd.h"
  1218 ;; Parameters:    Size  Location     Type
  1219 ;;		None
  1220 ;; Auto vars:     Size  Location     Type
  1221 ;;		None
  1222 ;; Return value:  Size  Location     Type
  1223 ;;                  1    wreg      void 
  1224 ;; Registers used:
  1225 ;;		wreg, status,2, status,0, cstack
  1226 ;; Tracked objects:
  1227 ;;		On entry : 0/0
  1228 ;;		On exit  : 0/0
  1229 ;;		Unchanged: 0/0
  1230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1231 ;;      Params:         0       0       0       0       0       0       0       0       0
  1232 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1233 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1234 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1235 ;;Total ram usage:        0 bytes
  1236 ;; Hardware stack levels used:    1
  1237 ;; Hardware stack levels required when called:    2
  1238 ;; This function calls:
  1239 ;;		_LCD_cmd
  1240 ;; This function is called by:
  1241 ;;		_printCalcResult
  1242 ;; This function uses a non-reentrant model
  1243 ;;
  1244                           
  1245                           	psect	text5
  1246  007578                     __ptext5:
  1247                           	opt callstack 0
  1248  007578                     _LCD_newLine:
  1249                           	opt callstack 27
  1250  007578                     
  1251                           ;./lcd.h: 76:     LCD_cmd(0xC0);
  1252  007578  0EC0               	movlw	192
  1253  00757A  ECDB  F03A         	call	_LCD_cmd
  1254  00757E  0012               	return		;funcret
  1255  007580                     __end_of_LCD_newLine:
  1256                           	opt callstack 0
  1257                           
  1258 ;; *************** function _LCD_cursor *****************
  1259 ;; Defined at:
  1260 ;;		line 67 in file "./lcd.h"
  1261 ;; Parameters:    Size  Location     Type
  1262 ;;  SC              2    2[COMRAM] short 
  1263 ;;  RL              2    4[COMRAM] short 
  1264 ;; Auto vars:     Size  Location     Type
  1265 ;;		None
  1266 ;; Return value:  Size  Location     Type
  1267 ;;                  1    wreg      void 
  1268 ;; Registers used:
  1269 ;;		wreg, status,2, status,0, cstack
  1270 ;; Tracked objects:
  1271 ;;		On entry : 0/0
  1272 ;;		On exit  : 0/0
  1273 ;;		Unchanged: 0/0
  1274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1275 ;;      Params:         4       0       0       0       0       0       0       0       0
  1276 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1277 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1278 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1279 ;;Total ram usage:        5 bytes
  1280 ;; Hardware stack levels used:    1
  1281 ;; Hardware stack levels required when called:    2
  1282 ;; This function calls:
  1283 ;;		_LCD_cmd
  1284 ;; This function is called by:
  1285 ;;		_printCalcResult
  1286 ;; This function uses a non-reentrant model
  1287 ;;
  1288                           
  1289                           	psect	text6
  1290  0075EA                     __ptext6:
  1291                           	opt callstack 0
  1292  0075EA                     _LCD_cursor:
  1293                           	opt callstack 27
  1294  0075EA                     
  1295                           ;./lcd.h: 68:     LCD_cmd(0b00010000 | SC << 3 | RL << 2);
  1296  0075EA  C005  F007         	movff	LCD_cursor@RL,??_LCD_cursor
  1297  0075EE  90D8               	bcf	status,0,c
  1298  0075F0  3607               	rlcf	??_LCD_cursor^0,f,c
  1299  0075F2  90D8               	bcf	status,0,c
  1300  0075F4  3607               	rlcf	??_LCD_cursor^0,f,c
  1301  0075F6  3803               	swapf	LCD_cursor@SC^0,w,c
  1302  0075F8  42E8               	rrncf	wreg,f,c
  1303  0075FA  0BF8               	andlw	248
  1304  0075FC  1007               	iorwf	??_LCD_cursor^0,w,c
  1305  0075FE  0910               	iorlw	16
  1306  007600  ECDB  F03A         	call	_LCD_cmd
  1307  007604  0012               	return		;funcret
  1308  007606                     __end_of_LCD_cursor:
  1309                           	opt callstack 0
  1310                           
  1311 ;; *************** function _ports_init *****************
  1312 ;; Defined at:
  1313 ;;		line 73 in file "main.c"
  1314 ;; Parameters:    Size  Location     Type
  1315 ;;		None
  1316 ;; Auto vars:     Size  Location     Type
  1317 ;;		None
  1318 ;; Return value:  Size  Location     Type
  1319 ;;                  1    wreg      void 
  1320 ;; Registers used:
  1321 ;;		wreg, status,2
  1322 ;; Tracked objects:
  1323 ;;		On entry : 0/0
  1324 ;;		On exit  : 0/0
  1325 ;;		Unchanged: 0/0
  1326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1327 ;;      Params:         0       0       0       0       0       0       0       0       0
  1328 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1329 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1330 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1331 ;;Total ram usage:        0 bytes
  1332 ;; Hardware stack levels used:    1
  1333 ;; This function calls:
  1334 ;;		Nothing
  1335 ;; This function is called by:
  1336 ;;		_main
  1337 ;; This function uses a non-reentrant model
  1338 ;;
  1339                           
  1340                           	psect	text7
  1341  007690                     __ptext7:
  1342                           	opt callstack 0
  1343  007690                     _ports_init:
  1344                           	opt callstack 30
  1345  007690                     
  1346                           ;main.c: 75:     ANSELA = 0;
  1347  007690  0E00               	movlw	0
  1348  007692  010F               	movlb	15	; () banked
  1349  007694  6F5B               	movwf	91,b	;volatile
  1350                           
  1351                           ;main.c: 76:     TRISA = 0;
  1352  007696  0E00               	movlw	0
  1353  007698  6E92               	movwf	146,c	;volatile
  1354                           
  1355                           ;main.c: 77:     LATA = 0;
  1356  00769A  0E00               	movlw	0
  1357  00769C  6E89               	movwf	137,c	;volatile
  1358                           
  1359                           ;main.c: 79:     ANSELB = 0;
  1360  00769E  0E00               	movlw	0
  1361  0076A0  6F5C               	movwf	92,b	;volatile
  1362                           
  1363                           ;main.c: 80:     TRISB = 0b00001111;
  1364  0076A2  0E0F               	movlw	15
  1365  0076A4  6E93               	movwf	147,c	;volatile
  1366                           
  1367                           ;main.c: 81:     LATB = 0;
  1368  0076A6  0E00               	movlw	0
  1369  0076A8  6E8A               	movwf	138,c	;volatile
  1370                           
  1371                           ;main.c: 82:     INTCON2 = 0b00000000;
  1372  0076AA  0E00               	movlw	0
  1373  0076AC  6EF1               	movwf	241,c	;volatile
  1374                           
  1375                           ;main.c: 83:     WPUB = 0b00001111;;
  1376  0076AE  0E0F               	movlw	15
  1377  0076B0  6E85               	movwf	133,c	;volatile
  1378                           
  1379                           ;main.c: 86:     ANSELC = 0;
  1380  0076B2  0E00               	movlw	0
  1381  0076B4  6F5D               	movwf	93,b	;volatile
  1382  0076B6                     
  1383                           ; BSR set to: 15
  1384                           ;main.c: 87:     TRISCbits.TRISC0=0;
  1385  0076B6  9094               	bcf	148,0,c	;volatile
  1386  0076B8                     
  1387                           ; BSR set to: 15
  1388                           ;main.c: 88:     TRISCbits.TRISC2=0;
  1389  0076B8  9494               	bcf	148,2,c	;volatile
  1390  0076BA                     
  1391                           ; BSR set to: 15
  1392                           ;main.c: 89:     TRISCbits.TRISC1=0;
  1393  0076BA  9294               	bcf	148,1,c	;volatile
  1394                           
  1395                           ;main.c: 90:     LATC = 0;
  1396  0076BC  0E00               	movlw	0
  1397  0076BE  6E8B               	movwf	139,c	;volatile
  1398                           
  1399                           ;main.c: 92:     ANSELD = 0;
  1400  0076C0  0E00               	movlw	0
  1401  0076C2  6F5E               	movwf	94,b	;volatile
  1402                           
  1403                           ;main.c: 93:     TRISD = 0;
  1404  0076C4  0E00               	movlw	0
  1405  0076C6  6E95               	movwf	149,c	;volatile
  1406                           
  1407                           ;main.c: 94:     LATD = 0;
  1408  0076C8  0E00               	movlw	0
  1409  0076CA  6E8C               	movwf	140,c	;volatile
  1410  0076CC                     
  1411                           ; BSR set to: 15
  1412  0076CC  0012               	return		;funcret
  1413  0076CE                     __end_of_ports_init:
  1414                           	opt callstack 0
  1415                           
  1416 ;; *************** function _getVal *****************
  1417 ;; Defined at:
  1418 ;;		line 150 in file "main.c"
  1419 ;; Parameters:    Size  Location     Type
  1420 ;;  key             1    wreg     unsigned char 
  1421 ;; Auto vars:     Size  Location     Type
  1422 ;;  key             1    0[COMRAM] unsigned char 
  1423 ;; Return value:  Size  Location     Type
  1424 ;;                  1    wreg      unsigned char 
  1425 ;; Registers used:
  1426 ;;		wreg, status,2, status,0
  1427 ;; Tracked objects:
  1428 ;;		On entry : 0/0
  1429 ;;		On exit  : 0/0
  1430 ;;		Unchanged: 0/0
  1431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1432 ;;      Params:         0       0       0       0       0       0       0       0       0
  1433 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1434 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1435 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1436 ;;Total ram usage:        1 bytes
  1437 ;; Hardware stack levels used:    1
  1438 ;; This function calls:
  1439 ;;		Nothing
  1440 ;; This function is called by:
  1441 ;;		_main
  1442 ;; This function uses a non-reentrant model
  1443 ;;
  1444                           
  1445                           	psect	text8
  1446  007570                     __ptext8:
  1447                           	opt callstack 0
  1448  007570                     _getVal:
  1449                           	opt callstack 30
  1450                           
  1451                           ; BSR set to: 15
  1452                           ;incstack = 0
  1453                           ;getVal@key stored from wreg
  1454  007570  6E01               	movwf	getVal@key^0,c
  1455  007572                     
  1456                           ;main.c: 150: char getVal(char key);main.c: 151: {;main.c: 152:     return key - 48;
  1457  007572  5001               	movf	getVal@key^0,w,c
  1458  007574  0FD0               	addlw	208
  1459  007576  0012               	return		;funcret
  1460  007578                     __end_of_getVal:
  1461                           	opt callstack 0
  1462                           
  1463 ;; *************** function _getKey *****************
  1464 ;; Defined at:
  1465 ;;		line 126 in file "main.c"
  1466 ;; Parameters:    Size  Location     Type
  1467 ;;  key_vals        2    0[COMRAM] PTR unsigned char [4]
  1468 ;;		 -> main@key_vals(16), 
  1469 ;; Auto vars:     Size  Location     Type
  1470 ;;  cols            1    7[COMRAM] unsigned char 
  1471 ;;  j               2   13[COMRAM] int 
  1472 ;;  bit_cols        1   10[COMRAM] unsigned char 
  1473 ;;  rows            1    8[COMRAM] unsigned char 
  1474 ;;  i               2   11[COMRAM] int 
  1475 ;;  bit_rows        1    9[COMRAM] unsigned char 
  1476 ;;  value           1    6[COMRAM] unsigned char 
  1477 ;; Return value:  Size  Location     Type
  1478 ;;                  1    wreg      unsigned char 
  1479 ;; Registers used:
  1480 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1481 ;; Tracked objects:
  1482 ;;		On entry : 0/0
  1483 ;;		On exit  : 0/0
  1484 ;;		Unchanged: 0/0
  1485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1486 ;;      Params:         2       0       0       0       0       0       0       0       0
  1487 ;;      Locals:         9       0       0       0       0       0       0       0       0
  1488 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1489 ;;      Totals:        15       0       0       0       0       0       0       0       0
  1490 ;;Total ram usage:       15 bytes
  1491 ;; Hardware stack levels used:    1
  1492 ;; This function calls:
  1493 ;;		Nothing
  1494 ;; This function is called by:
  1495 ;;		_main
  1496 ;; This function uses a non-reentrant model
  1497 ;;
  1498                           
  1499                           	psect	text9
  1500  00782E                     __ptext9:
  1501                           	opt callstack 0
  1502  00782E                     _getKey:
  1503                           	opt callstack 30
  1504  00782E                     l140:
  1505  00782E                     
  1506                           ;main.c: 129:         char bit_rows = 0b10000000;
  1507  00782E  0E80               	movlw	128
  1508  007830  6E0A               	movwf	getKey@bit_rows^0,c
  1509                           
  1510                           ;main.c: 130:         char value;;main.c: 131:         for (int i = 0; i < 4; i++) {
  1511  007832  0E00               	movlw	0
  1512  007834  6E0D               	movwf	(getKey@i+1)^0,c
  1513  007836  0E00               	movlw	0
  1514  007838  6E0C               	movwf	getKey@i^0,c
  1515  00783A                     l1400:
  1516                           
  1517                           ;main.c: 132:             char rows = ~bit_rows & 0b11110000;
  1518  00783A  500A               	movf	getKey@bit_rows^0,w,c
  1519  00783C  0AFF               	xorlw	255
  1520  00783E  0BF0               	andlw	240
  1521  007840  6E09               	movwf	getKey@rows^0,c
  1522  007842                     
  1523                           ;main.c: 133:             char bit_cols = 0b00001000;
  1524  007842  0E08               	movlw	8
  1525  007844  6E0B               	movwf	getKey@bit_cols^0,c
  1526  007846                     
  1527                           ;main.c: 134:             LATB = rows | 0b00001111;
  1528  007846  5009               	movf	getKey@rows^0,w,c
  1529  007848  090F               	iorlw	15
  1530  00784A  6E8A               	movwf	138,c	;volatile
  1531                           
  1532                           ;main.c: 135:             for (int j = 0; j < 4; j++) {
  1533  00784C  0E00               	movlw	0
  1534  00784E  6E0F               	movwf	(getKey@j+1)^0,c
  1535  007850  0E00               	movlw	0
  1536  007852  6E0E               	movwf	getKey@j^0,c
  1537  007854                     l1410:
  1538                           
  1539                           ;main.c: 136:                 char cols = ~bit_cols & 0b00001111;
  1540  007854  500B               	movf	getKey@bit_cols^0,w,c
  1541  007856  0AFF               	xorlw	255
  1542  007858  0B0F               	andlw	15
  1543  00785A  6E08               	movwf	getKey@cols^0,c
  1544                           
  1545                           ;main.c: 137:                 value = rows | cols;
  1546  00785C  5009               	movf	getKey@rows^0,w,c
  1547  00785E  1008               	iorwf	getKey@cols^0,w,c
  1548  007860  6E07               	movwf	getKey@value^0,c
  1549                           
  1550                           ;main.c: 138:                 if (PORTB == value) {
  1551  007862  5007               	movf	getKey@value^0,w,c
  1552  007864  1881               	xorwf	129,w,c	;volatile
  1553  007866  A4D8               	btfss	status,2,c
  1554  007868  EF38  F03C         	goto	u541
  1555  00786C  EF3A  F03C         	goto	u540
  1556  007870                     u541:
  1557  007870  EF5C  F03C         	goto	l1418
  1558  007874                     u540:
  1559  007874                     
  1560                           ;main.c: 139:                     LATA = (PORTB & 0b00001111) << 4;
  1561  007874  CF81 F003          	movff	3969,??_getKey	;volatile
  1562  007878  0E0F               	movlw	15
  1563  00787A  1603               	andwf	??_getKey^0,f,c
  1564  00787C  3803               	swapf	??_getKey^0,w,c
  1565  00787E  0BF0               	andlw	240
  1566  007880  6E89               	movwf	137,c	;volatile
  1567  007882                     
  1568                           ;main.c: 140:                     return key_vals[i][j];
  1569  007882  C00C  F003         	movff	getKey@i,??_getKey
  1570  007886  C00D  F004         	movff	getKey@i+1,??_getKey+1
  1571  00788A  90D8               	bcf	status,0,c
  1572  00788C  3603               	rlcf	??_getKey^0,f,c
  1573  00788E  3604               	rlcf	(??_getKey+1)^0,f,c
  1574  007890  90D8               	bcf	status,0,c
  1575  007892  3603               	rlcf	??_getKey^0,f,c
  1576  007894  3604               	rlcf	(??_getKey+1)^0,f,c
  1577  007896  C001  F005         	movff	getKey@key_vals,??_getKey+2
  1578  00789A  C002  F006         	movff	getKey@key_vals+1,??_getKey+3
  1579  00789E  5003               	movf	??_getKey^0,w,c
  1580  0078A0  2605               	addwf	(??_getKey+2)^0,f,c
  1581  0078A2  5004               	movf	(??_getKey+1)^0,w,c
  1582  0078A4  2206               	addwfc	(??_getKey+3)^0,f,c
  1583  0078A6  500E               	movf	getKey@j^0,w,c
  1584  0078A8  2405               	addwf	(??_getKey+2)^0,w,c
  1585  0078AA  6ED9               	movwf	fsr2l,c
  1586  0078AC  500F               	movf	(getKey@j+1)^0,w,c
  1587  0078AE  2006               	addwfc	(??_getKey+3)^0,w,c
  1588  0078B0  6EDA               	movwf	fsr2h,c
  1589  0078B2  50DF               	movf	indf2,w,c
  1590  0078B4  EF84  F03C         	goto	l146
  1591  0078B8                     l1418:
  1592                           
  1593                           ;main.c: 142:                 bit_cols = bit_cols >> 1;
  1594  0078B8  90D8               	bcf	status,0,c
  1595  0078BA  300B               	rrcf	getKey@bit_cols^0,w,c
  1596  0078BC  6E0B               	movwf	getKey@bit_cols^0,c
  1597  0078BE                     
  1598                           ;main.c: 143:             }
  1599  0078BE  4A0E               	infsnz	getKey@j^0,f,c
  1600  0078C0  2A0F               	incf	(getKey@j+1)^0,f,c
  1601  0078C2  BE0F               	btfsc	(getKey@j+1)^0,7,c
  1602  0078C4  EF6D  F03C         	goto	u551
  1603  0078C8  500F               	movf	(getKey@j+1)^0,w,c
  1604  0078CA  E109               	bnz	u550
  1605  0078CC  0E04               	movlw	4
  1606  0078CE  5C0E               	subwf	getKey@j^0,w,c
  1607  0078D0  A0D8               	btfss	status,0,c
  1608  0078D2  EF6D  F03C         	goto	u551
  1609  0078D6  EF6F  F03C         	goto	u550
  1610  0078DA                     u551:
  1611  0078DA  EF2A  F03C         	goto	l1410
  1612  0078DE                     u550:
  1613  0078DE                     
  1614                           ;main.c: 144:             bit_rows = bit_rows >> 1;
  1615  0078DE  90D8               	bcf	status,0,c
  1616  0078E0  300A               	rrcf	getKey@bit_rows^0,w,c
  1617  0078E2  6E0A               	movwf	getKey@bit_rows^0,c
  1618  0078E4                     
  1619                           ;main.c: 145:         }
  1620  0078E4  4A0C               	infsnz	getKey@i^0,f,c
  1621  0078E6  2A0D               	incf	(getKey@i+1)^0,f,c
  1622  0078E8  BE0D               	btfsc	(getKey@i+1)^0,7,c
  1623  0078EA  EF80  F03C         	goto	u561
  1624  0078EE  500D               	movf	(getKey@i+1)^0,w,c
  1625  0078F0  E109               	bnz	u560
  1626  0078F2  0E04               	movlw	4
  1627  0078F4  5C0C               	subwf	getKey@i^0,w,c
  1628  0078F6  A0D8               	btfss	status,0,c
  1629  0078F8  EF80  F03C         	goto	u561
  1630  0078FC  EF82  F03C         	goto	u560
  1631  007900                     u561:
  1632  007900  EF1D  F03C         	goto	l1400
  1633  007904                     u560:
  1634  007904  EF17  F03C         	goto	l140
  1635  007908                     l146:
  1636  007908  0012               	return		;funcret
  1637  00790A                     __end_of_getKey:
  1638                           	opt callstack 0
  1639                           
  1640 ;; *************** function _calculate *****************
  1641 ;; Defined at:
  1642 ;;		line 156 in file "main.c"
  1643 ;; Parameters:    Size  Location     Type
  1644 ;;  operation       1    wreg     unsigned char 
  1645 ;;  opIdx1          1   13[COMRAM] unsigned char 
  1646 ;;  opIdx2          1   14[COMRAM] unsigned char 
  1647 ;;  operators       2   15[COMRAM] PTR unsigned char 
  1648 ;;		 -> main@operators(14), 
  1649 ;; Auto vars:     Size  Location     Type
  1650 ;;  operation       1   19[COMRAM] unsigned char 
  1651 ;;  result          4   20[COMRAM] long 
  1652 ;;  i               1   25[COMRAM] unsigned char 
  1653 ;;  i               1   24[COMRAM] unsigned char 
  1654 ;;  operator2       4   30[COMRAM] unsigned long 
  1655 ;;  operator1       4   26[COMRAM] unsigned long 
  1656 ;; Return value:  Size  Location     Type
  1657 ;;                  4   13[COMRAM] long 
  1658 ;; Registers used:
  1659 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1660 ;; Tracked objects:
  1661 ;;		On entry : 0/0
  1662 ;;		On exit  : 0/0
  1663 ;;		Unchanged: 0/0
  1664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1665 ;;      Params:         4       0       0       0       0       0       0       0       0
  1666 ;;      Locals:        15       0       0       0       0       0       0       0       0
  1667 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1668 ;;      Totals:        21       0       0       0       0       0       0       0       0
  1669 ;;Total ram usage:       21 bytes
  1670 ;; Hardware stack levels used:    1
  1671 ;; Hardware stack levels required when called:    1
  1672 ;; This function calls:
  1673 ;;		___lldiv
  1674 ;;		___lmul
  1675 ;; This function is called by:
  1676 ;;		_main
  1677 ;; This function uses a non-reentrant model
  1678 ;;
  1679                           
  1680                           	psect	text10
  1681  007DA0                     __ptext10:
  1682                           	opt callstack 0
  1683  007DA0                     _calculate:
  1684                           	opt callstack 29
  1685                           
  1686                           ;incstack = 0
  1687                           ;calculate@operation stored from wreg
  1688  007DA0  6E14               	movwf	calculate@operation^0,c
  1689  007DA2                     
  1690                           ;main.c: 156: int32_t calculate(char operation, char opIdx1, char opIdx2, char operators
      +                          []);main.c: 157: {;main.c: 158:     uint32_t operator1 = 0;
  1691  007DA2  0E00               	movlw	0
  1692  007DA4  6E1B               	movwf	calculate@operator1^0,c
  1693  007DA6  0E00               	movlw	0
  1694  007DA8  6E1C               	movwf	(calculate@operator1+1)^0,c
  1695  007DAA  0E00               	movlw	0
  1696  007DAC  6E1D               	movwf	(calculate@operator1+2)^0,c
  1697  007DAE  0E00               	movlw	0
  1698  007DB0  6E1E               	movwf	(calculate@operator1+3)^0,c
  1699                           
  1700                           ;main.c: 159:     uint32_t operator2 = 0;
  1701  007DB2  0E00               	movlw	0
  1702  007DB4  6E1F               	movwf	calculate@operator2^0,c
  1703  007DB6  0E00               	movlw	0
  1704  007DB8  6E20               	movwf	(calculate@operator2+1)^0,c
  1705  007DBA  0E00               	movlw	0
  1706  007DBC  6E21               	movwf	(calculate@operator2+2)^0,c
  1707  007DBE  0E00               	movlw	0
  1708  007DC0  6E22               	movwf	(calculate@operator2+3)^0,c
  1709                           
  1710                           ;main.c: 160:     for (char i = 0; i < opIdx1; i++) {
  1711  007DC2  0E00               	movlw	0
  1712  007DC4  6E19               	movwf	calculate@i^0,c
  1713  007DC6  EF0E  F03F         	goto	l1438
  1714  007DCA                     l1432:
  1715                           
  1716                           ;main.c: 161:         operator1 *= 10;
  1717  007DCA  C01B  F001         	movff	calculate@operator1,___lmul@multiplier
  1718  007DCE  C01C  F002         	movff	calculate@operator1+1,___lmul@multiplier+1
  1719  007DD2  C01D  F003         	movff	calculate@operator1+2,___lmul@multiplier+2
  1720  007DD6  C01E  F004         	movff	calculate@operator1+3,___lmul@multiplier+3
  1721  007DDA  0E0A               	movlw	10
  1722  007DDC  6E05               	movwf	___lmul@multiplicand^0,c
  1723  007DDE  0E00               	movlw	0
  1724  007DE0  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  1725  007DE2  0E00               	movlw	0
  1726  007DE4  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  1727  007DE6  0E00               	movlw	0
  1728  007DE8  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  1729  007DEA  EC90  F03B         	call	___lmul	;wreg free
  1730  007DEE  C001  F01B         	movff	?___lmul,calculate@operator1
  1731  007DF2  C002  F01C         	movff	?___lmul+1,calculate@operator1+1
  1732  007DF6  C003  F01D         	movff	?___lmul+2,calculate@operator1+2
  1733  007DFA  C004  F01E         	movff	?___lmul+3,calculate@operator1+3
  1734  007DFE                     
  1735                           ;main.c: 162:         operator1 += operators[i];
  1736  007DFE  5019               	movf	calculate@i^0,w,c
  1737  007E00  2410               	addwf	calculate@operators^0,w,c
  1738  007E02  6ED9               	movwf	fsr2l,c
  1739  007E04  0E00               	movlw	0
  1740  007E06  2011               	addwfc	(calculate@operators+1)^0,w,c
  1741  007E08  6EDA               	movwf	fsr2h,c
  1742  007E0A  50DF               	movf	indf2,w,c
  1743  007E0C  6E12               	movwf	??_calculate^0,c
  1744  007E0E  5012               	movf	??_calculate^0,w,c
  1745  007E10  261B               	addwf	calculate@operator1^0,f,c
  1746  007E12  0E00               	movlw	0
  1747  007E14  221C               	addwfc	(calculate@operator1+1)^0,f,c
  1748  007E16  221D               	addwfc	(calculate@operator1+2)^0,f,c
  1749  007E18  221E               	addwfc	(calculate@operator1+3)^0,f,c
  1750  007E1A                     
  1751                           ;main.c: 163:     }
  1752  007E1A  2A19               	incf	calculate@i^0,f,c
  1753  007E1C                     l1438:
  1754  007E1C  500E               	movf	calculate@opIdx1^0,w,c
  1755  007E1E  5C19               	subwf	calculate@i^0,w,c
  1756  007E20  A0D8               	btfss	status,0,c
  1757  007E22  EF15  F03F         	goto	u571
  1758  007E26  EF17  F03F         	goto	u570
  1759  007E2A                     u571:
  1760  007E2A  EFE5  F03E         	goto	l1432
  1761  007E2E                     u570:
  1762  007E2E                     
  1763                           ;main.c: 164:     for (char i = opIdx1; i < opIdx2; i++) {
  1764  007E2E  C00E  F01A         	movff	calculate@opIdx1,calculate@i_307
  1765  007E32  EF44  F03F         	goto	l1446
  1766  007E36                     l1440:
  1767                           
  1768                           ;main.c: 165:         operator2 *= 10;
  1769  007E36  C01F  F001         	movff	calculate@operator2,___lmul@multiplier
  1770  007E3A  C020  F002         	movff	calculate@operator2+1,___lmul@multiplier+1
  1771  007E3E  C021  F003         	movff	calculate@operator2+2,___lmul@multiplier+2
  1772  007E42  C022  F004         	movff	calculate@operator2+3,___lmul@multiplier+3
  1773  007E46  0E0A               	movlw	10
  1774  007E48  6E05               	movwf	___lmul@multiplicand^0,c
  1775  007E4A  0E00               	movlw	0
  1776  007E4C  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  1777  007E4E  0E00               	movlw	0
  1778  007E50  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  1779  007E52  0E00               	movlw	0
  1780  007E54  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  1781  007E56  EC90  F03B         	call	___lmul	;wreg free
  1782  007E5A  C001  F01F         	movff	?___lmul,calculate@operator2
  1783  007E5E  C002  F020         	movff	?___lmul+1,calculate@operator2+1
  1784  007E62  C003  F021         	movff	?___lmul+2,calculate@operator2+2
  1785  007E66  C004  F022         	movff	?___lmul+3,calculate@operator2+3
  1786  007E6A                     
  1787                           ;main.c: 166:         operator2 += operators[i];
  1788  007E6A  501A               	movf	calculate@i_307^0,w,c
  1789  007E6C  2410               	addwf	calculate@operators^0,w,c
  1790  007E6E  6ED9               	movwf	fsr2l,c
  1791  007E70  0E00               	movlw	0
  1792  007E72  2011               	addwfc	(calculate@operators+1)^0,w,c
  1793  007E74  6EDA               	movwf	fsr2h,c
  1794  007E76  50DF               	movf	indf2,w,c
  1795  007E78  6E12               	movwf	??_calculate^0,c
  1796  007E7A  5012               	movf	??_calculate^0,w,c
  1797  007E7C  261F               	addwf	calculate@operator2^0,f,c
  1798  007E7E  0E00               	movlw	0
  1799  007E80  2220               	addwfc	(calculate@operator2+1)^0,f,c
  1800  007E82  2221               	addwfc	(calculate@operator2+2)^0,f,c
  1801  007E84  2222               	addwfc	(calculate@operator2+3)^0,f,c
  1802  007E86                     
  1803                           ;main.c: 167:     }
  1804  007E86  2A1A               	incf	calculate@i_307^0,f,c
  1805  007E88                     l1446:
  1806  007E88  500F               	movf	calculate@opIdx2^0,w,c
  1807  007E8A  5C1A               	subwf	calculate@i_307^0,w,c
  1808  007E8C  A0D8               	btfss	status,0,c
  1809  007E8E  EF4B  F03F         	goto	u581
  1810  007E92  EF4D  F03F         	goto	u580
  1811  007E96                     u581:
  1812  007E96  EF1B  F03F         	goto	l1440
  1813  007E9A                     u580:
  1814  007E9A  EFE2  F03F         	goto	l1478
  1815  007E9E                     l1448:
  1816                           
  1817                           ;main.c: 171:             return operator1 + operator2;
  1818  007E9E  501F               	movf	calculate@operator2^0,w,c
  1819  007EA0  241B               	addwf	calculate@operator1^0,w,c
  1820  007EA2  6E0E               	movwf	?_calculate^0,c
  1821  007EA4  5020               	movf	(calculate@operator2+1)^0,w,c
  1822  007EA6  201C               	addwfc	(calculate@operator1+1)^0,w,c
  1823  007EA8  6E0F               	movwf	(?_calculate+1)^0,c
  1824  007EAA  5021               	movf	(calculate@operator2+2)^0,w,c
  1825  007EAC  201D               	addwfc	(calculate@operator1+2)^0,w,c
  1826  007EAE  6E10               	movwf	(?_calculate+2)^0,c
  1827  007EB0  5022               	movf	(calculate@operator2+3)^0,w,c
  1828  007EB2  201E               	addwfc	(calculate@operator1+3)^0,w,c
  1829  007EB4  6E11               	movwf	(?_calculate+3)^0,c
  1830  007EB6  EFFF  F03F         	goto	l162
  1831  007EBA                     l1452:
  1832                           
  1833                           ;main.c: 173:             if (operator2 > operator1){
  1834  007EBA  501F               	movf	calculate@operator2^0,w,c
  1835  007EBC  5C1B               	subwf	calculate@operator1^0,w,c
  1836  007EBE  5020               	movf	(calculate@operator2+1)^0,w,c
  1837  007EC0  581C               	subwfb	(calculate@operator1+1)^0,w,c
  1838  007EC2  5021               	movf	(calculate@operator2+2)^0,w,c
  1839  007EC4  581D               	subwfb	(calculate@operator1+2)^0,w,c
  1840  007EC6  5022               	movf	(calculate@operator2+3)^0,w,c
  1841  007EC8  581E               	subwfb	(calculate@operator1+3)^0,w,c
  1842  007ECA  B0D8               	btfsc	status,0,c
  1843  007ECC  EF6A  F03F         	goto	u591
  1844  007ED0  EF6C  F03F         	goto	u590
  1845  007ED4                     u591:
  1846  007ED4  EF9C  F03F         	goto	l1464
  1847  007ED8                     u590:
  1848  007ED8                     
  1849                           ;main.c: 174:                 int32_t result = operator2 - operator1;
  1850  007ED8  501B               	movf	calculate@operator1^0,w,c
  1851  007EDA  5C1F               	subwf	calculate@operator2^0,w,c
  1852  007EDC  6E15               	movwf	calculate@result^0,c
  1853  007EDE  501C               	movf	(calculate@operator1+1)^0,w,c
  1854  007EE0  5820               	subwfb	(calculate@operator2+1)^0,w,c
  1855  007EE2  6E16               	movwf	(calculate@result+1)^0,c
  1856  007EE4  501D               	movf	(calculate@operator1+2)^0,w,c
  1857  007EE6  5821               	subwfb	(calculate@operator2+2)^0,w,c
  1858  007EE8  6E17               	movwf	(calculate@result+2)^0,c
  1859  007EEA  501E               	movf	(calculate@operator1+3)^0,w,c
  1860  007EEC  5822               	subwfb	(calculate@operator2+3)^0,w,c
  1861  007EEE  6E18               	movwf	(calculate@result+3)^0,c
  1862  007EF0                     
  1863                           ;main.c: 175:                 result *= -1;
  1864  007EF0  C015  F001         	movff	calculate@result,___lmul@multiplier
  1865  007EF4  C016  F002         	movff	calculate@result+1,___lmul@multiplier+1
  1866  007EF8  C017  F003         	movff	calculate@result+2,___lmul@multiplier+2
  1867  007EFC  C018  F004         	movff	calculate@result+3,___lmul@multiplier+3
  1868  007F00  0EFF               	movlw	255
  1869  007F02  6E05               	movwf	___lmul@multiplicand^0,c
  1870  007F04  0EFF               	movlw	255
  1871  007F06  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  1872  007F08  0EFF               	movlw	255
  1873  007F0A  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  1874  007F0C  0EFF               	movlw	255
  1875  007F0E  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  1876  007F10  EC90  F03B         	call	___lmul	;wreg free
  1877  007F14  C001  F015         	movff	?___lmul,calculate@result
  1878  007F18  C002  F016         	movff	?___lmul+1,calculate@result+1
  1879  007F1C  C003  F017         	movff	?___lmul+2,calculate@result+2
  1880  007F20  C004  F018         	movff	?___lmul+3,calculate@result+3
  1881  007F24                     
  1882                           ;main.c: 176:                 return result;
  1883  007F24  C015  F00E         	movff	calculate@result,?_calculate
  1884  007F28  C016  F00F         	movff	calculate@result+1,?_calculate+1
  1885  007F2C  C017  F010         	movff	calculate@result+2,?_calculate+2
  1886  007F30  C018  F011         	movff	calculate@result+3,?_calculate+3
  1887  007F34  EFFF  F03F         	goto	l162
  1888  007F38                     l1464:
  1889                           
  1890                           ;main.c: 179:                 return operator1 - operator2;
  1891  007F38  501F               	movf	calculate@operator2^0,w,c
  1892  007F3A  5C1B               	subwf	calculate@operator1^0,w,c
  1893  007F3C  6E0E               	movwf	?_calculate^0,c
  1894  007F3E  5020               	movf	(calculate@operator2+1)^0,w,c
  1895  007F40  581C               	subwfb	(calculate@operator1+1)^0,w,c
  1896  007F42  6E0F               	movwf	(?_calculate+1)^0,c
  1897  007F44  5021               	movf	(calculate@operator2+2)^0,w,c
  1898  007F46  581D               	subwfb	(calculate@operator1+2)^0,w,c
  1899  007F48  6E10               	movwf	(?_calculate+2)^0,c
  1900  007F4A  5022               	movf	(calculate@operator2+3)^0,w,c
  1901  007F4C  581E               	subwfb	(calculate@operator1+3)^0,w,c
  1902  007F4E  6E11               	movwf	(?_calculate+3)^0,c
  1903  007F50  EFFF  F03F         	goto	l162
  1904  007F54                     l1468:
  1905                           
  1906                           ;main.c: 181:             return operator1 * operator2;
  1907  007F54  C01B  F001         	movff	calculate@operator1,___lmul@multiplier
  1908  007F58  C01C  F002         	movff	calculate@operator1+1,___lmul@multiplier+1
  1909  007F5C  C01D  F003         	movff	calculate@operator1+2,___lmul@multiplier+2
  1910  007F60  C01E  F004         	movff	calculate@operator1+3,___lmul@multiplier+3
  1911  007F64  C01F  F005         	movff	calculate@operator2,___lmul@multiplicand
  1912  007F68  C020  F006         	movff	calculate@operator2+1,___lmul@multiplicand+1
  1913  007F6C  C021  F007         	movff	calculate@operator2+2,___lmul@multiplicand+2
  1914  007F70  C022  F008         	movff	calculate@operator2+3,___lmul@multiplicand+3
  1915  007F74  EC90  F03B         	call	___lmul	;wreg free
  1916  007F78  C001  F00E         	movff	?___lmul,?_calculate
  1917  007F7C  C002  F00F         	movff	?___lmul+1,?_calculate+1
  1918  007F80  C003  F010         	movff	?___lmul+2,?_calculate+2
  1919  007F84  C004  F011         	movff	?___lmul+3,?_calculate+3
  1920  007F88  EFFF  F03F         	goto	l162
  1921  007F8C                     l1472:
  1922                           
  1923                           ;main.c: 183:             return operator1 / operator2;
  1924  007F8C  C01B  F001         	movff	calculate@operator1,___lldiv@dividend
  1925  007F90  C01C  F002         	movff	calculate@operator1+1,___lldiv@dividend+1
  1926  007F94  C01D  F003         	movff	calculate@operator1+2,___lldiv@dividend+2
  1927  007F98  C01E  F004         	movff	calculate@operator1+3,___lldiv@dividend+3
  1928  007F9C  C01F  F005         	movff	calculate@operator2,___lldiv@divisor
  1929  007FA0  C020  F006         	movff	calculate@operator2+1,___lldiv@divisor+1
  1930  007FA4  C021  F007         	movff	calculate@operator2+2,___lldiv@divisor+2
  1931  007FA8  C022  F008         	movff	calculate@operator2+3,___lldiv@divisor+3
  1932  007FAC  ECC5  F03B         	call	___lldiv	;wreg free
  1933  007FB0  C001  F00E         	movff	?___lldiv,?_calculate
  1934  007FB4  C002  F00F         	movff	?___lldiv+1,?_calculate+1
  1935  007FB8  C003  F010         	movff	?___lldiv+2,?_calculate+2
  1936  007FBC  C004  F011         	movff	?___lldiv+3,?_calculate+3
  1937  007FC0  EFFF  F03F         	goto	l162
  1938  007FC4                     l1478:
  1939  007FC4  5014               	movf	calculate@operation^0,w,c
  1940  007FC6  6E12               	movwf	??_calculate^0,c
  1941  007FC8  6A13               	clrf	(??_calculate+1)^0,c
  1942                           
  1943                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1944                           ; Switch size 1, requested type "simple"
  1945                           ; Number of cases is 1, Range of values is 0 to 0
  1946                           ; switch strategies available:
  1947                           ; Name         Instructions Cycles
  1948                           ; simple_byte            4     3 (average)
  1949                           ;	Chosen strategy is simple_byte
  1950  007FCA  5013               	movf	(??_calculate+1)^0,w,c
  1951  007FCC  0A00               	xorlw	0	; case 0
  1952  007FCE  B4D8               	btfsc	status,2,c
  1953  007FD0  EFEC  F03F         	goto	l1596
  1954  007FD4  EFFF  F03F         	goto	l162
  1955  007FD8                     l1596:
  1956                           
  1957                           ; Switch size 1, requested type "simple"
  1958                           ; Number of cases is 4, Range of values is 42 to 47
  1959                           ; switch strategies available:
  1960                           ; Name         Instructions Cycles
  1961                           ; simple_byte           13     7 (average)
  1962                           ;	Chosen strategy is simple_byte
  1963  007FD8  5012               	movf	??_calculate^0,w,c
  1964  007FDA  0A2A               	xorlw	42	; case 42
  1965  007FDC  B4D8               	btfsc	status,2,c
  1966  007FDE  EFAA  F03F         	goto	l1468
  1967  007FE2  0A01               	xorlw	1	; case 43
  1968  007FE4  B4D8               	btfsc	status,2,c
  1969  007FE6  EF4F  F03F         	goto	l1448
  1970  007FEA  0A06               	xorlw	6	; case 45
  1971  007FEC  B4D8               	btfsc	status,2,c
  1972  007FEE  EF5D  F03F         	goto	l1452
  1973  007FF2  0A02               	xorlw	2	; case 47
  1974  007FF4  B4D8               	btfsc	status,2,c
  1975  007FF6  EFC6  F03F         	goto	l1472
  1976  007FFA  EFFF  F03F         	goto	l162
  1977  007FFE                     l162:
  1978  007FFE  0012               	return		;funcret
  1979  008000                     __end_of_calculate:
  1980                           	opt callstack 0
  1981                           
  1982 ;; *************** function ___lmul *****************
  1983 ;; Defined at:
  1984 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul32.c"
  1985 ;; Parameters:    Size  Location     Type
  1986 ;;  multiplier      4    0[COMRAM] unsigned long 
  1987 ;;  multiplicand    4    4[COMRAM] unsigned long 
  1988 ;; Auto vars:     Size  Location     Type
  1989 ;;  product         4    8[COMRAM] unsigned long 
  1990 ;; Return value:  Size  Location     Type
  1991 ;;                  4    0[COMRAM] unsigned long 
  1992 ;; Registers used:
  1993 ;;		wreg, status,2, status,0
  1994 ;; Tracked objects:
  1995 ;;		On entry : 0/0
  1996 ;;		On exit  : 0/0
  1997 ;;		Unchanged: 0/0
  1998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1999 ;;      Params:         8       0       0       0       0       0       0       0       0
  2000 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2001 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2002 ;;      Totals:        12       0       0       0       0       0       0       0       0
  2003 ;;Total ram usage:       12 bytes
  2004 ;; Hardware stack levels used:    1
  2005 ;; This function calls:
  2006 ;;		Nothing
  2007 ;; This function is called by:
  2008 ;;		_printCalcResult
  2009 ;;		_calculate
  2010 ;; This function uses a non-reentrant model
  2011 ;;
  2012                           
  2013                           	psect	text11
  2014  007720                     __ptext11:
  2015                           	opt callstack 0
  2016  007720                     ___lmul:
  2017                           	opt callstack 29
  2018  007720  0E00               	movlw	0
  2019  007722  6E09               	movwf	___lmul@product^0,c
  2020  007724  0E00               	movlw	0
  2021  007726  6E0A               	movwf	(___lmul@product+1)^0,c
  2022  007728  0E00               	movlw	0
  2023  00772A  6E0B               	movwf	(___lmul@product+2)^0,c
  2024  00772C  0E00               	movlw	0
  2025  00772E  6E0C               	movwf	(___lmul@product+3)^0,c
  2026  007730                     l1282:
  2027  007730  A001               	btfss	___lmul@multiplier^0,0,c
  2028  007732  EF9D  F03B         	goto	u371
  2029  007736  EF9F  F03B         	goto	u370
  2030  00773A                     u371:
  2031  00773A  EFA7  F03B         	goto	l1286
  2032  00773E                     u370:
  2033  00773E  5005               	movf	___lmul@multiplicand^0,w,c
  2034  007740  2609               	addwf	___lmul@product^0,f,c
  2035  007742  5006               	movf	(___lmul@multiplicand+1)^0,w,c
  2036  007744  220A               	addwfc	(___lmul@product+1)^0,f,c
  2037  007746  5007               	movf	(___lmul@multiplicand+2)^0,w,c
  2038  007748  220B               	addwfc	(___lmul@product+2)^0,f,c
  2039  00774A  5008               	movf	(___lmul@multiplicand+3)^0,w,c
  2040  00774C  220C               	addwfc	(___lmul@product+3)^0,f,c
  2041  00774E                     l1286:
  2042  00774E  90D8               	bcf	status,0,c
  2043  007750  3605               	rlcf	___lmul@multiplicand^0,f,c
  2044  007752  3606               	rlcf	(___lmul@multiplicand+1)^0,f,c
  2045  007754  3607               	rlcf	(___lmul@multiplicand+2)^0,f,c
  2046  007756  3608               	rlcf	(___lmul@multiplicand+3)^0,f,c
  2047  007758  90D8               	bcf	status,0,c
  2048  00775A  3204               	rrcf	(___lmul@multiplier+3)^0,f,c
  2049  00775C  3203               	rrcf	(___lmul@multiplier+2)^0,f,c
  2050  00775E  3202               	rrcf	(___lmul@multiplier+1)^0,f,c
  2051  007760  3201               	rrcf	___lmul@multiplier^0,f,c
  2052  007762  5001               	movf	___lmul@multiplier^0,w,c
  2053  007764  1002               	iorwf	(___lmul@multiplier+1)^0,w,c
  2054  007766  1003               	iorwf	(___lmul@multiplier+2)^0,w,c
  2055  007768  1004               	iorwf	(___lmul@multiplier+3)^0,w,c
  2056  00776A  A4D8               	btfss	status,2,c
  2057  00776C  EFBA  F03B         	goto	u381
  2058  007770  EFBC  F03B         	goto	u380
  2059  007774                     u381:
  2060  007774  EF98  F03B         	goto	l1282
  2061  007778                     u380:
  2062  007778  C009  F001         	movff	___lmul@product,?___lmul
  2063  00777C  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  2064  007780  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  2065  007784  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  2066  007788  0012               	return		;funcret
  2067  00778A                     __end_of___lmul:
  2068                           	opt callstack 0
  2069                           
  2070 ;; *************** function ___lldiv *****************
  2071 ;; Defined at:
  2072 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\__lldiv.c"
  2073 ;; Parameters:    Size  Location     Type
  2074 ;;  dividend        4    0[COMRAM] unsigned long 
  2075 ;;  divisor         4    4[COMRAM] unsigned long 
  2076 ;; Auto vars:     Size  Location     Type
  2077 ;;  quotient        4    8[COMRAM] unsigned long 
  2078 ;;  counter         1   12[COMRAM] unsigned char 
  2079 ;; Return value:  Size  Location     Type
  2080 ;;                  4    0[COMRAM] unsigned long 
  2081 ;; Registers used:
  2082 ;;		wreg, status,2, status,0
  2083 ;; Tracked objects:
  2084 ;;		On entry : 0/0
  2085 ;;		On exit  : 0/0
  2086 ;;		Unchanged: 0/0
  2087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2088 ;;      Params:         8       0       0       0       0       0       0       0       0
  2089 ;;      Locals:         5       0       0       0       0       0       0       0       0
  2090 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2091 ;;      Totals:        13       0       0       0       0       0       0       0       0
  2092 ;;Total ram usage:       13 bytes
  2093 ;; Hardware stack levels used:    1
  2094 ;; This function calls:
  2095 ;;		Nothing
  2096 ;; This function is called by:
  2097 ;;		_calculate
  2098 ;; This function uses a non-reentrant model
  2099 ;;
  2100                           
  2101                           	psect	text12
  2102  00778A                     __ptext12:
  2103                           	opt callstack 0
  2104  00778A                     ___lldiv:
  2105                           	opt callstack 29
  2106  00778A  0E00               	movlw	0
  2107  00778C  6E09               	movwf	___lldiv@quotient^0,c
  2108  00778E  0E00               	movlw	0
  2109  007790  6E0A               	movwf	(___lldiv@quotient+1)^0,c
  2110  007792  0E00               	movlw	0
  2111  007794  6E0B               	movwf	(___lldiv@quotient+2)^0,c
  2112  007796  0E00               	movlw	0
  2113  007798  6E0C               	movwf	(___lldiv@quotient+3)^0,c
  2114  00779A  5005               	movf	___lldiv@divisor^0,w,c
  2115  00779C  1006               	iorwf	(___lldiv@divisor+1)^0,w,c
  2116  00779E  1007               	iorwf	(___lldiv@divisor+2)^0,w,c
  2117  0077A0  1008               	iorwf	(___lldiv@divisor+3)^0,w,c
  2118  0077A2  B4D8               	btfsc	status,2,c
  2119  0077A4  EFD6  F03B         	goto	u391
  2120  0077A8  EFD8  F03B         	goto	u390
  2121  0077AC                     u391:
  2122  0077AC  EF0E  F03C         	goto	l198
  2123  0077B0                     u390:
  2124  0077B0  0E01               	movlw	1
  2125  0077B2  6E0D               	movwf	___lldiv@counter^0,c
  2126  0077B4  EFE2  F03B         	goto	l1298
  2127  0077B8                     l1296:
  2128  0077B8  90D8               	bcf	status,0,c
  2129  0077BA  3605               	rlcf	___lldiv@divisor^0,f,c
  2130  0077BC  3606               	rlcf	(___lldiv@divisor+1)^0,f,c
  2131  0077BE  3607               	rlcf	(___lldiv@divisor+2)^0,f,c
  2132  0077C0  3608               	rlcf	(___lldiv@divisor+3)^0,f,c
  2133  0077C2  2A0D               	incf	___lldiv@counter^0,f,c
  2134  0077C4                     l1298:
  2135  0077C4  AE08               	btfss	(___lldiv@divisor+3)^0,7,c
  2136  0077C6  EFE7  F03B         	goto	u401
  2137  0077CA  EFE9  F03B         	goto	u400
  2138  0077CE                     u401:
  2139  0077CE  EFDC  F03B         	goto	l1296
  2140  0077D2                     u400:
  2141  0077D2                     l1300:
  2142  0077D2  90D8               	bcf	status,0,c
  2143  0077D4  3609               	rlcf	___lldiv@quotient^0,f,c
  2144  0077D6  360A               	rlcf	(___lldiv@quotient+1)^0,f,c
  2145  0077D8  360B               	rlcf	(___lldiv@quotient+2)^0,f,c
  2146  0077DA  360C               	rlcf	(___lldiv@quotient+3)^0,f,c
  2147  0077DC  5005               	movf	___lldiv@divisor^0,w,c
  2148  0077DE  5C01               	subwf	___lldiv@dividend^0,w,c
  2149  0077E0  5006               	movf	(___lldiv@divisor+1)^0,w,c
  2150  0077E2  5802               	subwfb	(___lldiv@dividend+1)^0,w,c
  2151  0077E4  5007               	movf	(___lldiv@divisor+2)^0,w,c
  2152  0077E6  5803               	subwfb	(___lldiv@dividend+2)^0,w,c
  2153  0077E8  5008               	movf	(___lldiv@divisor+3)^0,w,c
  2154  0077EA  5804               	subwfb	(___lldiv@dividend+3)^0,w,c
  2155  0077EC  A0D8               	btfss	status,0,c
  2156  0077EE  EFFB  F03B         	goto	u411
  2157  0077F2  EFFD  F03B         	goto	u410
  2158  0077F6                     u411:
  2159  0077F6  EF06  F03C         	goto	l1308
  2160  0077FA                     u410:
  2161  0077FA  5005               	movf	___lldiv@divisor^0,w,c
  2162  0077FC  5E01               	subwf	___lldiv@dividend^0,f,c
  2163  0077FE  5006               	movf	(___lldiv@divisor+1)^0,w,c
  2164  007800  5A02               	subwfb	(___lldiv@dividend+1)^0,f,c
  2165  007802  5007               	movf	(___lldiv@divisor+2)^0,w,c
  2166  007804  5A03               	subwfb	(___lldiv@dividend+2)^0,f,c
  2167  007806  5008               	movf	(___lldiv@divisor+3)^0,w,c
  2168  007808  5A04               	subwfb	(___lldiv@dividend+3)^0,f,c
  2169  00780A  8009               	bsf	___lldiv@quotient^0,0,c
  2170  00780C                     l1308:
  2171  00780C  90D8               	bcf	status,0,c
  2172  00780E  3208               	rrcf	(___lldiv@divisor+3)^0,f,c
  2173  007810  3207               	rrcf	(___lldiv@divisor+2)^0,f,c
  2174  007812  3206               	rrcf	(___lldiv@divisor+1)^0,f,c
  2175  007814  3205               	rrcf	___lldiv@divisor^0,f,c
  2176  007816  2E0D               	decfsz	___lldiv@counter^0,f,c
  2177  007818  EFE9  F03B         	goto	l1300
  2178  00781C                     l198:
  2179  00781C  C009  F001         	movff	___lldiv@quotient,?___lldiv
  2180  007820  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  2181  007824  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  2182  007828  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  2183  00782C  0012               	return		;funcret
  2184  00782E                     __end_of___lldiv:
  2185                           	opt callstack 0
  2186                           
  2187 ;; *************** function _LCD_init *****************
  2188 ;; Defined at:
  2189 ;;		line 44 in file "./lcd.h"
  2190 ;; Parameters:    Size  Location     Type
  2191 ;;		None
  2192 ;; Auto vars:     Size  Location     Type
  2193 ;;		None
  2194 ;; Return value:  Size  Location     Type
  2195 ;;                  1    wreg      void 
  2196 ;; Registers used:
  2197 ;;		wreg, status,2, status,0, cstack
  2198 ;; Tracked objects:
  2199 ;;		On entry : 0/0
  2200 ;;		On exit  : 0/0
  2201 ;;		Unchanged: 0/0
  2202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2203 ;;      Params:         0       0       0       0       0       0       0       0       0
  2204 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2205 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2206 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2207 ;;Total ram usage:        0 bytes
  2208 ;; Hardware stack levels used:    1
  2209 ;; Hardware stack levels required when called:    3
  2210 ;; This function calls:
  2211 ;;		_LCD_clear
  2212 ;;		_LCD_dispControl
  2213 ;;		_LCD_entryMode
  2214 ;;		_LCD_functionSet
  2215 ;; This function is called by:
  2216 ;;		_main
  2217 ;; This function uses a non-reentrant model
  2218 ;;
  2219                           
  2220                           	psect	text13
  2221  0076CE                     __ptext13:
  2222                           	opt callstack 0
  2223  0076CE                     _LCD_init:
  2224                           	opt callstack 27
  2225  0076CE                     
  2226                           ;./lcd.h: 45:     LCD_clear();
  2227  0076CE  ECB4  F03A         	call	_LCD_clear	;wreg free
  2228                           
  2229                           ;./lcd.h: 46:     LCD_functionSet(1, 1, 0);
  2230  0076D2  0E00               	movlw	0
  2231  0076D4  6E04               	movwf	(LCD_functionSet@DL+1)^0,c
  2232  0076D6  0E01               	movlw	1
  2233  0076D8  6E03               	movwf	LCD_functionSet@DL^0,c
  2234  0076DA  0E00               	movlw	0
  2235  0076DC  6E06               	movwf	(LCD_functionSet@N+1)^0,c
  2236  0076DE  0E01               	movlw	1
  2237  0076E0  6E05               	movwf	LCD_functionSet@N^0,c
  2238  0076E2  0E00               	movlw	0
  2239  0076E4  6E08               	movwf	(LCD_functionSet@F+1)^0,c
  2240  0076E6  0E00               	movlw	0
  2241  0076E8  6E07               	movwf	LCD_functionSet@F^0,c
  2242  0076EA  EC18  F03B         	call	_LCD_functionSet	;wreg free
  2243                           
  2244                           ;./lcd.h: 47:     LCD_dispControl(1, 1, 1);
  2245  0076EE  0E00               	movlw	0
  2246  0076F0  6E04               	movwf	(LCD_dispControl@D+1)^0,c
  2247  0076F2  0E01               	movlw	1
  2248  0076F4  6E03               	movwf	LCD_dispControl@D^0,c
  2249  0076F6  0E00               	movlw	0
  2250  0076F8  6E06               	movwf	(LCD_dispControl@C+1)^0,c
  2251  0076FA  0E01               	movlw	1
  2252  0076FC  6E05               	movwf	LCD_dispControl@C^0,c
  2253  0076FE  0E00               	movlw	0
  2254  007700  6E08               	movwf	(LCD_dispControl@B+1)^0,c
  2255  007702  0E01               	movlw	1
  2256  007704  6E07               	movwf	LCD_dispControl@B^0,c
  2257  007706  ECCF  F03A         	call	_LCD_dispControl	;wreg free
  2258                           
  2259                           ;./lcd.h: 48:     LCD_entryMode(1, 0);
  2260  00770A  0E00               	movlw	0
  2261  00770C  6E04               	movwf	(LCD_entryMode@ID+1)^0,c
  2262  00770E  0E01               	movlw	1
  2263  007710  6E03               	movwf	LCD_entryMode@ID^0,c
  2264  007712  0E00               	movlw	0
  2265  007714  6E06               	movwf	(LCD_entryMode@SH+1)^0,c
  2266  007716  0E00               	movlw	0
  2267  007718  6E05               	movwf	LCD_entryMode@SH^0,c
  2268  00771A  ECC0  F03A         	call	_LCD_entryMode	;wreg free
  2269  00771E  0012               	return		;funcret
  2270  007720                     __end_of_LCD_init:
  2271                           	opt callstack 0
  2272                           
  2273 ;; *************** function _LCD_functionSet *****************
  2274 ;; Defined at:
  2275 ;;		line 71 in file "./lcd.h"
  2276 ;; Parameters:    Size  Location     Type
  2277 ;;  DL              2    2[COMRAM] short 
  2278 ;;  N               2    4[COMRAM] short 
  2279 ;;  F               2    6[COMRAM] short 
  2280 ;; Auto vars:     Size  Location     Type
  2281 ;;		None
  2282 ;; Return value:  Size  Location     Type
  2283 ;;                  1    wreg      void 
  2284 ;; Registers used:
  2285 ;;		wreg, status,2, status,0, cstack
  2286 ;; Tracked objects:
  2287 ;;		On entry : 0/0
  2288 ;;		On exit  : 0/0
  2289 ;;		Unchanged: 0/0
  2290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2291 ;;      Params:         6       0       0       0       0       0       0       0       0
  2292 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2293 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2294 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2295 ;;Total ram usage:        8 bytes
  2296 ;; Hardware stack levels used:    1
  2297 ;; Hardware stack levels required when called:    2
  2298 ;; This function calls:
  2299 ;;		_LCD_cmd
  2300 ;; This function is called by:
  2301 ;;		_LCD_init
  2302 ;; This function uses a non-reentrant model
  2303 ;;
  2304                           
  2305                           	psect	text14
  2306  007630                     __ptext14:
  2307                           	opt callstack 0
  2308  007630                     _LCD_functionSet:
  2309                           	opt callstack 27
  2310  007630                     
  2311                           ;./lcd.h: 72:     LCD_cmd(0b00100000 | DL << 4 | N << 3 | F << 2);
  2312  007630  C007  F009         	movff	LCD_functionSet@F,??_LCD_functionSet
  2313  007634  90D8               	bcf	status,0,c
  2314  007636  3609               	rlcf	??_LCD_functionSet^0,f,c
  2315  007638  90D8               	bcf	status,0,c
  2316  00763A  3609               	rlcf	??_LCD_functionSet^0,f,c
  2317  00763C  C005  F00A         	movff	LCD_functionSet@N,??_LCD_functionSet+1
  2318  007640  90D8               	bcf	status,0,c
  2319  007642  360A               	rlcf	(??_LCD_functionSet+1)^0,f,c
  2320  007644  90D8               	bcf	status,0,c
  2321  007646  360A               	rlcf	(??_LCD_functionSet+1)^0,f,c
  2322  007648  90D8               	bcf	status,0,c
  2323  00764A  360A               	rlcf	(??_LCD_functionSet+1)^0,f,c
  2324  00764C  3803               	swapf	LCD_functionSet@DL^0,w,c
  2325  00764E  0BF0               	andlw	240
  2326  007650  100A               	iorwf	(??_LCD_functionSet+1)^0,w,c
  2327  007652  1009               	iorwf	??_LCD_functionSet^0,w,c
  2328  007654  0920               	iorlw	32
  2329  007656  ECDB  F03A         	call	_LCD_cmd
  2330  00765A  0012               	return		;funcret
  2331  00765C                     __end_of_LCD_functionSet:
  2332                           	opt callstack 0
  2333                           
  2334 ;; *************** function _LCD_entryMode *****************
  2335 ;; Defined at:
  2336 ;;		line 59 in file "./lcd.h"
  2337 ;; Parameters:    Size  Location     Type
  2338 ;;  ID              2    2[COMRAM] short 
  2339 ;;  SH              2    4[COMRAM] short 
  2340 ;; Auto vars:     Size  Location     Type
  2341 ;;		None
  2342 ;; Return value:  Size  Location     Type
  2343 ;;                  1    wreg      void 
  2344 ;; Registers used:
  2345 ;;		wreg, status,2, status,0, cstack
  2346 ;; Tracked objects:
  2347 ;;		On entry : 0/0
  2348 ;;		On exit  : 0/0
  2349 ;;		Unchanged: 0/0
  2350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2351 ;;      Params:         4       0       0       0       0       0       0       0       0
  2352 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2353 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2354 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2355 ;;Total ram usage:        4 bytes
  2356 ;; Hardware stack levels used:    1
  2357 ;; Hardware stack levels required when called:    2
  2358 ;; This function calls:
  2359 ;;		_LCD_cmd
  2360 ;; This function is called by:
  2361 ;;		_LCD_init
  2362 ;;		_printCalcResult
  2363 ;; This function uses a non-reentrant model
  2364 ;;
  2365                           
  2366                           	psect	text15
  2367  007580                     __ptext15:
  2368                           	opt callstack 0
  2369  007580                     _LCD_entryMode:
  2370                           	opt callstack 27
  2371  007580                     
  2372                           ;./lcd.h: 60:     LCD_cmd(0b00000100 | ID << 1 | SH);
  2373  007580  5003               	movf	LCD_entryMode@ID^0,w,c
  2374  007582  2403               	addwf	LCD_entryMode@ID^0,w,c
  2375  007584  1005               	iorwf	LCD_entryMode@SH^0,w,c
  2376  007586  0904               	iorlw	4
  2377  007588  ECDB  F03A         	call	_LCD_cmd
  2378  00758C  0012               	return		;funcret
  2379  00758E                     __end_of_LCD_entryMode:
  2380                           	opt callstack 0
  2381                           
  2382 ;; *************** function _LCD_dispControl *****************
  2383 ;; Defined at:
  2384 ;;		line 63 in file "./lcd.h"
  2385 ;; Parameters:    Size  Location     Type
  2386 ;;  D               2    2[COMRAM] short 
  2387 ;;  C               2    4[COMRAM] short 
  2388 ;;  B               2    6[COMRAM] short 
  2389 ;; Auto vars:     Size  Location     Type
  2390 ;;		None
  2391 ;; Return value:  Size  Location     Type
  2392 ;;                  1    wreg      void 
  2393 ;; Registers used:
  2394 ;;		wreg, status,2, status,0, cstack
  2395 ;; Tracked objects:
  2396 ;;		On entry : 0/0
  2397 ;;		On exit  : 0/0
  2398 ;;		Unchanged: 0/0
  2399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2400 ;;      Params:         6       0       0       0       0       0       0       0       0
  2401 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2402 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2403 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2404 ;;Total ram usage:        7 bytes
  2405 ;; Hardware stack levels used:    1
  2406 ;; Hardware stack levels required when called:    2
  2407 ;; This function calls:
  2408 ;;		_LCD_cmd
  2409 ;; This function is called by:
  2410 ;;		_LCD_init
  2411 ;;		_printCalcResult
  2412 ;; This function uses a non-reentrant model
  2413 ;;
  2414                           
  2415                           	psect	text16
  2416  00759E                     __ptext16:
  2417                           	opt callstack 0
  2418  00759E                     _LCD_dispControl:
  2419                           	opt callstack 27
  2420  00759E                     
  2421                           ;./lcd.h: 64:     LCD_cmd(0b00001000 | D << 2 | C << 1 | B);
  2422  00759E  90D8               	bcf	status,0,c
  2423  0075A0  3405               	rlcf	LCD_dispControl@C^0,w,c
  2424  0075A2  6E09               	movwf	??_LCD_dispControl^0,c
  2425  0075A4  4403               	rlncf	LCD_dispControl@D^0,w,c
  2426  0075A6  46E8               	rlncf	wreg,f,c
  2427  0075A8  0BFC               	andlw	252
  2428  0075AA  1009               	iorwf	??_LCD_dispControl^0,w,c
  2429  0075AC  1007               	iorwf	LCD_dispControl@B^0,w,c
  2430  0075AE  0908               	iorlw	8
  2431  0075B0  ECDB  F03A         	call	_LCD_cmd
  2432  0075B4  0012               	return		;funcret
  2433  0075B6                     __end_of_LCD_dispControl:
  2434                           	opt callstack 0
  2435                           
  2436 ;; *************** function _LCD_clear *****************
  2437 ;; Defined at:
  2438 ;;		line 51 in file "./lcd.h"
  2439 ;; Parameters:    Size  Location     Type
  2440 ;;		None
  2441 ;; Auto vars:     Size  Location     Type
  2442 ;;		None
  2443 ;; Return value:  Size  Location     Type
  2444 ;;                  1    wreg      void 
  2445 ;; Registers used:
  2446 ;;		wreg, status,2, status,0, cstack
  2447 ;; Tracked objects:
  2448 ;;		On entry : 0/0
  2449 ;;		On exit  : 0/0
  2450 ;;		Unchanged: 0/0
  2451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2452 ;;      Params:         0       0       0       0       0       0       0       0       0
  2453 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2454 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2455 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2456 ;;Total ram usage:        0 bytes
  2457 ;; Hardware stack levels used:    1
  2458 ;; Hardware stack levels required when called:    2
  2459 ;; This function calls:
  2460 ;;		_LCD_cmd
  2461 ;; This function is called by:
  2462 ;;		_LCD_init
  2463 ;; This function uses a non-reentrant model
  2464 ;;
  2465                           
  2466                           	psect	text17
  2467  007568                     __ptext17:
  2468                           	opt callstack 0
  2469  007568                     _LCD_clear:
  2470                           	opt callstack 27
  2471  007568                     
  2472                           ;./lcd.h: 52:     LCD_cmd(0b00000001);
  2473  007568  0E01               	movlw	1
  2474  00756A  ECDB  F03A         	call	_LCD_cmd
  2475  00756E  0012               	return		;funcret
  2476  007570                     __end_of_LCD_clear:
  2477                           	opt callstack 0
  2478                           
  2479 ;; *************** function _LCD_cmd *****************
  2480 ;; Defined at:
  2481 ;;		line 79 in file "./lcd.h"
  2482 ;; Parameters:    Size  Location     Type
  2483 ;;  cmd             1    wreg     unsigned char 
  2484 ;; Auto vars:     Size  Location     Type
  2485 ;;  cmd             1    1[COMRAM] unsigned char 
  2486 ;; Return value:  Size  Location     Type
  2487 ;;                  1    wreg      void 
  2488 ;; Registers used:
  2489 ;;		wreg, status,2, status,0, cstack
  2490 ;; Tracked objects:
  2491 ;;		On entry : 0/0
  2492 ;;		On exit  : 0/0
  2493 ;;		Unchanged: 0/0
  2494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2495 ;;      Params:         0       0       0       0       0       0       0       0       0
  2496 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2497 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2498 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2499 ;;Total ram usage:        1 bytes
  2500 ;; Hardware stack levels used:    1
  2501 ;; Hardware stack levels required when called:    1
  2502 ;; This function calls:
  2503 ;;		_LCD_rdy
  2504 ;; This function is called by:
  2505 ;;		_LCD_clear
  2506 ;;		_LCD_entryMode
  2507 ;;		_LCD_dispControl
  2508 ;;		_LCD_cursor
  2509 ;;		_LCD_functionSet
  2510 ;;		_LCD_newLine
  2511 ;;		_LCD_returnHome
  2512 ;; This function uses a non-reentrant model
  2513 ;;
  2514                           
  2515                           	psect	text18
  2516  0075B6                     __ptext18:
  2517                           	opt callstack 0
  2518  0075B6                     _LCD_cmd:
  2519                           	opt callstack 27
  2520                           
  2521                           ;incstack = 0
  2522                           ;LCD_cmd@cmd stored from wreg
  2523  0075B6  6E02               	movwf	LCD_cmd@cmd^0,c
  2524  0075B8                     
  2525                           ;./lcd.h: 80:     LCD_rdy();
  2526  0075B8  EC2E  F03B         	call	_LCD_rdy	;wreg free
  2527  0075BC                     
  2528                           ;./lcd.h: 81:     PORTCbits.RC2=0;
  2529  0075BC  9482               	bcf	130,2,c	;volatile
  2530  0075BE                     
  2531                           ;./lcd.h: 82:     PORTCbits.RC1=0;
  2532  0075BE  9282               	bcf	130,1,c	;volatile
  2533  0075C0                     
  2534                           ;./lcd.h: 83:     PORTCbits.RC0=1;
  2535  0075C0  8082               	bsf	130,0,c	;volatile
  2536  0075C2                     
  2537                           ;./lcd.h: 84:     __nop();
  2538  0075C2  F000               	nop	
  2539  0075C4                     
  2540                           ;./lcd.h: 85:     LATD = cmd;
  2541  0075C4  C002  FF8C         	movff	LCD_cmd@cmd,3980	;volatile
  2542  0075C8                     
  2543                           ;./lcd.h: 86:     __nop();
  2544  0075C8  F000               	nop	
  2545  0075CA                     
  2546                           ;./lcd.h: 87:     PORTCbits.RC0=0;
  2547  0075CA  9082               	bcf	130,0,c	;volatile
  2548  0075CC                     
  2549                           ;./lcd.h: 88:     __nop();
  2550  0075CC  F000               	nop	
  2551  0075CE  0012               	return		;funcret
  2552  0075D0                     __end_of_LCD_cmd:
  2553                           	opt callstack 0
  2554                           
  2555 ;; *************** function _LCD_rdy *****************
  2556 ;; Defined at:
  2557 ;;		line 91 in file "./lcd.h"
  2558 ;; Parameters:    Size  Location     Type
  2559 ;;		None
  2560 ;; Auto vars:     Size  Location     Type
  2561 ;;  busy            1    0[COMRAM] unsigned char 
  2562 ;; Return value:  Size  Location     Type
  2563 ;;                  1    wreg      void 
  2564 ;; Registers used:
  2565 ;;		wreg, status,2, status,0
  2566 ;; Tracked objects:
  2567 ;;		On entry : 0/0
  2568 ;;		On exit  : 0/0
  2569 ;;		Unchanged: 0/0
  2570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2571 ;;      Params:         0       0       0       0       0       0       0       0       0
  2572 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2573 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2574 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2575 ;;Total ram usage:        1 bytes
  2576 ;; Hardware stack levels used:    1
  2577 ;; This function calls:
  2578 ;;		Nothing
  2579 ;; This function is called by:
  2580 ;;		_LCD_cmd
  2581 ;;		_LCD_writeChar
  2582 ;;		_LCD_writeStr
  2583 ;; This function uses a non-reentrant model
  2584 ;;
  2585                           
  2586                           	psect	text19
  2587  00765C                     __ptext19:
  2588                           	opt callstack 0
  2589  00765C                     _LCD_rdy:
  2590                           	opt callstack 28
  2591  00765C                     
  2592                           ;./lcd.h: 92:     char busy = 0x80;
  2593  00765C  0E80               	movlw	128
  2594  00765E  6E01               	movwf	LCD_rdy@busy^0,c
  2595  007660                     
  2596                           ;./lcd.h: 93:     TRISD = 0b11111111;
  2597  007660  6895               	setf	149,c	;volatile
  2598  007662                     
  2599                           ;./lcd.h: 94:     PORTCbits.RC2 = 0;
  2600  007662  9482               	bcf	130,2,c	;volatile
  2601  007664                     
  2602                           ;./lcd.h: 95:     PORTCbits.RC1 = 1;
  2603  007664  8282               	bsf	130,1,c	;volatile
  2604                           
  2605                           ;./lcd.h: 98:     while (busy) {
  2606  007666  EF3D  F03B         	goto	l866
  2607  00766A                     l93:
  2608                           
  2609                           ;./lcd.h: 99:         PORTCbits.RC0 = 1;
  2610  00766A  8082               	bsf	130,0,c	;volatile
  2611                           
  2612                           ;./lcd.h: 100:         __nop();
  2613  00766C  F000               	nop	
  2614  00766E                     
  2615                           ;./lcd.h: 101:         busy = PORTD & 0x80;
  2616  00766E  5083               	movf	131,w,c	;volatile
  2617  007670  0B80               	andlw	128
  2618  007672  6E01               	movwf	LCD_rdy@busy^0,c
  2619  007674                     
  2620                           ;./lcd.h: 102:         __nop();
  2621  007674  F000               	nop	
  2622  007676                     
  2623                           ;./lcd.h: 103:         PORTCbits.RC0 = 0;
  2624  007676  9082               	bcf	130,0,c	;volatile
  2625  007678                     
  2626                           ;./lcd.h: 104:         __nop();
  2627  007678  F000               	nop	
  2628  00767A                     l866:
  2629                           
  2630                           ;./lcd.h: 98:     while (busy) {
  2631  00767A  5001               	movf	LCD_rdy@busy^0,w,c
  2632  00767C  A4D8               	btfss	status,2,c
  2633  00767E  EF43  F03B         	goto	u11
  2634  007682  EF45  F03B         	goto	u10
  2635  007686                     u11:
  2636  007686  EF35  F03B         	goto	l93
  2637  00768A                     u10:
  2638  00768A                     
  2639                           ;./lcd.h: 107:     TRISD = 0b00000000;
  2640  00768A  0E00               	movlw	0
  2641  00768C  6E95               	movwf	149,c	;volatile
  2642  00768E  0012               	return		;funcret
  2643  007690                     __end_of_LCD_rdy:
  2644                           	opt callstack 0
  2645  0000                     
  2646                           	psect	rparam
  2647  0000                     tosu	equ	0xFFF
  2648                           tosh	equ	0xFFE
  2649                           tosl	equ	0xFFD
  2650                           stkptr	equ	0xFFC
  2651                           pclatu	equ	0xFFB
  2652                           pclath	equ	0xFFA
  2653                           pcl	equ	0xFF9
  2654                           tblptru	equ	0xFF8
  2655                           tblptrh	equ	0xFF7
  2656                           tblptrl	equ	0xFF6
  2657                           tablat	equ	0xFF5
  2658                           prodh	equ	0xFF4
  2659                           prodl	equ	0xFF3
  2660                           indf0	equ	0xFEF
  2661                           postinc0	equ	0xFEE
  2662                           postdec0	equ	0xFED
  2663                           preinc0	equ	0xFEC
  2664                           plusw0	equ	0xFEB
  2665                           fsr0h	equ	0xFEA
  2666                           fsr0l	equ	0xFE9
  2667                           wreg	equ	0xFE8
  2668                           indf1	equ	0xFE7
  2669                           postinc1	equ	0xFE6
  2670                           postdec1	equ	0xFE5
  2671                           preinc1	equ	0xFE4
  2672                           plusw1	equ	0xFE3
  2673                           fsr1h	equ	0xFE2
  2674                           fsr1l	equ	0xFE1
  2675                           bsr	equ	0xFE0
  2676                           indf2	equ	0xFDF
  2677                           postinc2	equ	0xFDE
  2678                           postdec2	equ	0xFDD
  2679                           preinc2	equ	0xFDC
  2680                           plusw2	equ	0xFDB
  2681                           fsr2h	equ	0xFDA
  2682                           fsr2l	equ	0xFD9
  2683                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        16
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     58      74
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    calculate@operators	PTR unsigned char  size(2) Largest target is 14
		 -> main@operators(COMRAM[14]), 

    getKey@key_vals	PTR unsigned char [4] size(2) Largest target is 16
		 -> main@key_vals(COMRAM[16]), 


Critical Paths under _main in COMRAM

    _main->_calculate
    _printCalcResult->___aldiv
    _LCD_writeChar->_LCD_rdy
    _LCD_newLine->_LCD_cmd
    _LCD_cursor->_LCD_cmd
    _calculate->___lldiv
    _LCD_init->_LCD_functionSet
    _LCD_functionSet->_LCD_cmd
    _LCD_entryMode->_LCD_cmd
    _LCD_dispControl->_LCD_cmd
    _LCD_clear->_LCD_cmd
    _LCD_cmd->_LCD_rdy

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                24    24      0    7750
                                             34 COMRAM    24    24      0
                           _LCD_init
                      _LCD_writeChar
                          _calculate
                             _getKey
                             _getVal
                         _ports_init
                    _printCalcResult
 ---------------------------------------------------------------------------------
 (1) _printCalcResult                                      8     4      4    3376
                                             14 COMRAM     8     4      4
                         _LCD_cursor
                    _LCD_dispControl
                      _LCD_entryMode
                        _LCD_newLine
                      _LCD_writeChar
                            ___aldiv
                            ___almod
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___almod                                             10     2      8     448
                                              0 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     452
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (2) _LCD_writeChar                                        1     1      0      30
                                              1 COMRAM     1     1      0
                            _LCD_rdy
 ---------------------------------------------------------------------------------
 (2) _LCD_newLine                                          0     0      0      30
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_cursor                                           5     1      4     226
                                              2 COMRAM     5     1      4
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (1) _ports_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getVal                                               1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _getKey                                              15    13      2     417
                                              0 COMRAM    15    13      2
 ---------------------------------------------------------------------------------
 (1) _calculate                                           21    17      4    2104
                                             13 COMRAM    21    17      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     978
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             0     0      0    1284
                          _LCD_clear
                    _LCD_dispControl
                      _LCD_entryMode
                    _LCD_functionSet
 ---------------------------------------------------------------------------------
 (2) _LCD_functionSet                                      8     2      6     324
                                              2 COMRAM     8     2      6
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_entryMode                                        4     0      4     378
                                              2 COMRAM     4     0      4
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_dispControl                                      7     1      6     552
                                              2 COMRAM     7     1      6
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_clear                                            0     0      0      30
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (3) _LCD_cmd                                              1     1      0      30
                                              1 COMRAM     1     1      0
                            _LCD_rdy
 ---------------------------------------------------------------------------------
 (3) _LCD_rdy                                              1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_init
     _LCD_clear
       _LCD_cmd
         _LCD_rdy
     _LCD_dispControl
       _LCD_cmd
         _LCD_rdy
     _LCD_entryMode
       _LCD_cmd
         _LCD_rdy
     _LCD_functionSet
       _LCD_cmd
         _LCD_rdy
   _LCD_writeChar
     _LCD_rdy
   _calculate
     ___lldiv
     ___lmul
   _getKey
   _getVal
   _ports_init
   _printCalcResult
     _LCD_cursor
       _LCD_cmd
         _LCD_rdy
     _LCD_dispControl
       _LCD_cmd
         _LCD_rdy
     _LCD_entryMode
       _LCD_cmd
         _LCD_rdy
     _LCD_newLine
       _LCD_cmd
         _LCD_rdy
     _LCD_writeChar
       _LCD_rdy
     ___aldiv
     ___almod
     ___lmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     3A      4A       1       77.9%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      4A       6        0.0%
DATA                 0      0      4A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sun Nov 29 23:31:28 2020

                         l80 7604                           l65 771E                           l74 758C  
                         l83 765A                           l68 756E                           l93 766A  
                         l77 75B4                           l86 757E                           l95 768E  
                         l89 75CE                           u10 768A                           u11 7686  
               __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000  
               __CFG_CP3$OFF 000000                  __CFG_LVP$ON 000000                          l104 75E8  
                        l140 782E                          l205 782C                          l151 7576  
                        l127 76CC                          l136 7D82                          l137 7D9E  
                        l162 7FFE                          l146 7908                          l250 7B00  
                        l156 7E2E                          l182 7778                          l183 7788  
                        l263 79F4                          l198 781C                          l900 75D2  
                        l910 75DE                          l902 75D6                          l912 75E2  
                        l904 75D8                          l850 765C                          l914 75E4  
                        l906 75DA                          l860 7674                          l852 7660  
                        l916 75E6                          l908 75DC                          l862 7676  
                        l854 7662                          l870 75B8                          l864 7678  
                        l856 7664                          l880 75C4                          l872 75BC  
                        l858 766E                          l866 767A                          l882 75C8  
                        l874 75BE                          l868 768A                          l884 75CA  
                        l876 75C0                          l886 75CC                          l878 75C2  
                        l888 7568                          l898 7578                 __CFG_CPB$OFF 000000  
                        u400 77D2                          u401 77CE                          u410 77FA  
                        u411 77F6                          u420 7A08                          u500 7964  
                        u421 7A04                          u501 7960                          u430 7A2A  
                        u510 7986                          u431 7A26                          u511 7982  
                        u440 7A64                          u520 79A4                          u600 7C8E  
                        u441 7A60                          u521 79A0                          u601 7C8A  
                        u370 773E                          u450 7A86                          u530 79D4  
                        u610 7CB4                 __CFG_CPD$OFF 000000                          u371 773A  
                        u451 7A82                          u531 79D0                          u611 7CB0  
                        u380 7778                          u540 7874                          u460 7AAE  
                        u620 7D6C                          u700 7C0E                          u381 7774  
                        u541 7870                          u461 7AAA                          u621 7D68  
                        u701 7C0A                          u390 77B0                          u550 78DE  
                        u470 7AE0                          u630 7D7C                          u391 77AC  
                        u551 78DA                          u471 7ADC                          u631 7D78  
                        u560 7904                          u480 791C                          u640 7B3A  
                        u561 7900                          u481 7918                          u641 7B36  
                        u570 7E2E                          u490 793E                          u650 7B4C  
                        u571 7E2A                          u491 793A                          u651 7B48  
                        u580 7E9A                          u660 7B5E                          u581 7E96  
                        u717 7C3C                          u661 7B5A                          u590 7ED8  
                        u670 7B70                          u591 7ED4                          u671 7B6C  
                        u680 7B94                          u681 7B90                          u690 7BE4  
                        u691 7BE0                  ?_LCD_cursor 0003                          wreg 000FE8  
     __size_of_LCD_entryMode 000E     __size_of_LCD_dispControl 0018              __end_of_LCD_cmd 75D0  
            __end_of_LCD_rdy 7690                         l1032 7690                         l1034 76B6  
                       l1300 77D2                         l1036 76B8                         l1310 7816  
                       l1302 77DC                         l1038 76BA                         l1304 77FA  
                       l1400 783A                         l1320 7A1C                         l1312 79F6  
                       l1306 780A                         l1410 7854                         l1402 7842  
                       l1330 7A64                         l1322 7A2A                         l1314 79FA  
                       l1308 780C                         l1420 78BE                         l1412 7874  
                       l1404 7846                         l1076 7572                         l1340 7AAE  
                       l1332 7A6C                         l1324 7A3A                         l1316 7A08  
                       l1500 7CA2                         l1430 7DA2                         l1422 78C2  
                       l1414 7882                         l1350 7AE0                         l1342 7ABE  
                       l1334 7A78                         l1326 7A3E                         l1318 7A18  
                       l1510 7D18                         l1502 7CA6                         l1272 7630  
                       l1280 7720                         l1440 7E36                         l1432 7DCA  
                       l1424 78DE                         l1352 7AF0                         l1344 7AC0  
                       l1336 7A86                         l1328 7A4E                         l1360 791C  
                       l1520 7D7C                         l1512 7D1C                         l1504 7CB4  
                       l1274 759E                         l1290 778A                         l1282 7730  
                       l1442 7E6A                         l1434 7DFE                         l1426 78E4  
                       l1418 78B8                         l1346 7ACA                         l1338 7A90  
                       l1370 7964                         l1362 792C                         l1514 7D22  
                       l1506 7CE8                         l1530 7B20                         l1522 7B02  
                       l1276 7580                         l1292 779A                         l1284 773E  
                       l1452 7EBA                         l1444 7E86                         l1436 7E1A  
                       l1428 78E8                         l1348 7AD0                         l1380 79B4  
                       l1372 796C                         l1364 7930                         l1356 790A  
                       l1508 7CF0                         l1516 7D56                         l1540 7B70  
                       l1532 7B28                         l1524 7B0A                         l1294 77B0  
                       l1286 774E                         l1454 7ED8                         l1446 7E88  
                       l1438 7E1C                         l1278 75EA                         l1382 79BE  
                       l1374 7978                         l1366 793E                         l1358 790E  
                       l1518 7D6C                         l1550 7BBA                         l1542 7B76  
                       l1534 7B3A                         l1526 7B0E                         l1392 76CE  
                       l1296 77B8                         l1288 7758                         l1472 7F8C  
                       l1456 7EF0                         l1464 7F38                         l1448 7E9E  
                       l1376 7986                         l1384 79C4                         l1368 794E  
                       l1560 7BF0                         l1552 7BD2                         l1544 7B7A  
                       l1536 7B4C                         l1528 7B12                         l1298 77C4  
                       l1458 7F24                         l1394 782E                         l1386 79D4  
                       l1378 79A4                         l1570 7C24                         l1554 7BE4  
                       l1562 7BF8                         l1546 7B82                         l1538 7B5E  
                       l1468 7F54                         l1388 79E4                         l1492 7C5A  
                       l1484 7C4E                         l1572 7C34                         l1564 7BFE  
                       l1556 7BE8                         l1548 7B94                         l1478 7FC4  
                       l1494 7C6E                         l1486 7C52                         l1566 7C0E  
                       l1558 7BEC                         l1574 7C36                         l1496 7C72  
                       l1568 7C1E                         l1498 7C8E                         l1596 7FD8  
                       _LATA 000F89                         _LATB 000F8A                         _LATC 000F8B  
                       _LATD 000F8C     __size_of_printCalcResult 0152                         _WPUB 000F85  
               ?_LCD_newLine 0001                         _main 7B02                         indf2 000FDF  
                       fsr1l 000FE1                         fsr2l 000FD9                __CFG_BORV$190 000000  
                       start 0000                __CFG_IESO$OFF 000000           __size_of_LCD_clear 0008  
              __CFG_MCLRE$ON 000000                 ___param_bank 000000             __end_of_LCD_init 7720  
            __end_of___aldiv 7B02              __end_of___almod 79F6                        ?_main 0001  
            __end_of___lldiv 782E                        _PORTB 000F81                        _PORTD 000F83  
                      _TRISA 000F92                        _TRISB 000F93                        _TRISD 000F95  
               main@key_vals 003B                __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000  
              __CFG_WRT2$OFF 000000          ___lmul@multiplicand 0005                __CFG_WRT3$OFF 000000  
             __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000  
             __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000  
              __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000       __size_of_LCD_writeChar 001A  
             __CFG_EBTRB$OFF 000000                        tablat 000FF5                        status 000FD8  
             __CFG_T3CMX$RC0 000000               __CFG_ICPRT$OFF 000000               __CFG_PBADEN$ON 000000  
        __size_of_LCD_cursor 001C                _LCD_entryMode 7580              __initialization 7606  
               __end_of_main 7C4E                  LCD_rdy@busy 0001               __CFG_PCLKEN$ON 000000  
            LCD_entryMode@ID 0003              LCD_entryMode@SH 0005                       ??_main 0023  
              __activetblptr 000002                    ??_LCD_cmd 0002                    ??_LCD_rdy 0001  
          __end_of_LCD_clear 7570               __CFG_SDOMX$RB3 000000              __CFG_CCP2MX$RC1 000000  
   __size_of_LCD_functionSet 002C                       _ANSELA 000F5B                       _ANSELB 000F5C  
                     _ANSELC 000F5D                       _ANSELD 000F5E  printCalcResult@negativeFlag 0013  
             __CFG_WDTEN$OFF 000000            ??_LCD_dispControl 0009            ??_printCalcResult 0013  
             ?_LCD_entryMode 0003               __CFG_XINST$OFF 000000                _LCD_writeChar 75D0  
                     ___lmul 7720                    ??___aldiv 0009                    ??___almod 0009  
             __CFG_STVREN$ON 000000                    ??___lldiv 0009                       _getKey 782E  
                     _getVal 7570                main@operation 0037                main@operators 0024  
               __pdataCOMRAM 003B                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8         __CFG_LS48MHZ$SYS24X4 000000                   __accesstop 0060  
    __end_of__initialization 7626                    ?_LCD_init 0001                ___rparam_used 000001  
       __size_of_LCD_newLine 0008               ?_LCD_writeChar 0001               __pcstackCOMRAM 0001  
           __CFG_nPWRTEN$OFF 000000                 LCD_cursor@SC 0003                 LCD_cursor@RL 0005  
         __size_of_calculate 0260                 ??_LCD_cursor 0007            ??_LCD_functionSet 0009  
                 ??_LCD_init 000B              ??_LCD_entryMode 0007           __end_of_LCD_cursor 7606  
          __CFG_PLLSEL$PLL4X 000000                      ?___lmul 0001                      ?_getKey 0001  
                    ?_getVal 0001               ___lmul@product 0009               calculate@i_307 001A  
                    _INTCON2 000FF1                      _LCD_cmd 75B6                      _LCD_rdy 765C  
          __end_of_calculate 8000              ??_LCD_writeChar 0002                      __Hparam 0000  
                 calculate@i 0019                      __Lparam 0000               getKey@bit_cols 000B  
                    ___aldiv 79F6                      ___almod 790A              __size_of___lmul 006A  
             getKey@bit_rows 000A                      ___lldiv 778A              __size_of_getKey 00DC  
            __size_of_getVal 0008             LCD_functionSet@F 0007             LCD_functionSet@N 0005  
                    __pcinit 7606                      __ramtop 0800                      __ptext0 7B02  
                    __ptext1 7C4E                      __ptext2 790A                      __ptext3 79F6  
                    __ptext4 75D0                      __ptext5 7578                      __ptext6 75EA  
                    __ptext7 7690                      __ptext8 7570                      __ptext9 782E  
             getKey@key_vals 0001             ___aldiv@dividend 0001              _LCD_dispControl 759E  
                    getKey@i 000C                      getKey@j 000E              _printCalcResult 7C4E  
                    main@key 003A                      main@val 0036                    _LCD_clear 7568  
       end_of_initialization 7626                __Lmediumconst 0000              ___lldiv@divisor 0005  
                 getKey@cols 0008              ___lldiv@counter 000D                   getKey@rows 0009  
      printCalcResult@modulo 0014        printCalcResult@result 000F             ___aldiv@quotient 000B  
                    postdec1 000FE5                      postinc0 000FEE                    _PORTCbits 000F82  
                  _TRISCbits 000F94                   _ports_init 7690                   ?_LCD_clear 0001  
                 main@opIdx1 0039                   main@opIdx2 0038                   main@result 0032  
          __size_of_LCD_init 0052               __end_of___lmul 778A      __end_of_LCD_dispControl 75B6  
              __pidataCOMRAM 758E               __end_of_getKey 790A               __end_of_getVal 7578  
                 LCD_cmd@cmd 0002      __end_of_printCalcResult 7DA0          start_initialization 7606  
            _LCD_functionSet 7630                ??_LCD_newLine 0003              __CFG_nLPBOR$OFF 000000  
                   ??___lmul 0009                     ??_getKey 0003                     ??_getVal 0001  
                   ?_LCD_cmd 0001                     ?_LCD_rdy 0001                  ?_ports_init 0001  
                ??_LCD_clear 0003                    _calculate 7DA0        __end_of_LCD_entryMode 758E  
        __end_of_LCD_newLine 7580                     ?___aldiv 0001                     ?___almod 0001  
                   ?___lldiv 0001      __end_of_LCD_functionSet 765C             ?_LCD_dispControl 0003  
           ___almod@dividend 0001             ?_printCalcResult 000F              ___aldiv@divisor 0005  
            ___aldiv@counter 0009                   ?_calculate 000E              calculate@opIdx1 000E  
            calculate@opIdx2 000F                     _LCD_init 76CE              calculate@result 0015  
      __end_of_LCD_writeChar 75EA             __CFG_WDTPS$32768 000000                    getVal@key 0001  
          LCD_writeChar@data 0002          __size_of_ports_init 003E            __CFG_CFGPLLEN$OFF 000000  
           __size_of_LCD_cmd 001A             __size_of_LCD_rdy 0034            ___lmul@multiplier 0001  
                  copy_data0 761A                  _LCD_newLine 7578                     __Hrparam 0000  
                   __Lrparam 0000           __CFG_BOREN$SBORDIS 000000           calculate@operator1 001B  
         calculate@operator2 001F           calculate@operation 0014           calculate@operators 0010  
           __size_of___aldiv 010C             __size_of___almod 00EC             __size_of___lldiv 00A4  
           ?_LCD_functionSet 0003            LCD_functionSet@DL 0003                     __ptext10 7DA0  
                   __ptext11 7720                     __ptext12 778A                     __ptext13 76CE  
                   __ptext14 7630                     __ptext15 7580                     __ptext16 759E  
                   __ptext17 7568                     __ptext18 75B6                     __ptext19 765C  
            ___almod@divisor 0005              ___almod@counter 0009                  ??_calculate 0012  
              __size_of_main 014C             LCD_dispControl@B 0007             LCD_dispControl@C 0005  
           LCD_dispControl@D 0003                   _LCD_cursor 75EA                 ??_ports_init 0001  
           ___lldiv@dividend 0001             printCalcResult@i 0015                  getKey@value 0007  
       __CFG_CPUDIV$NOCLKDIV 000000           __end_of_ports_init 76CE             ___lldiv@quotient 0009  
               ___aldiv@sign 000A           __CFG_FOSC$INTOSCIO 000000                 ___almod@sign 000A  
