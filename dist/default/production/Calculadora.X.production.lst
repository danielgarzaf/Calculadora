

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sun Nov 29 12:59:33 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    29  0000                     
    30                           ; Version 2.10
    31                           ; Generated 31/07/2019 GMT
    32                           ; 
    33                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC18F45K50 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     
    65                           	psect	idataCOMRAM
    66  000D72                     __pidataCOMRAM:
    67                           	opt callstack 0
    68                           
    69                           ;initializer for main@key_vals
    70  000D72  01                 	db	1
    71  000D73  02                 	db	2
    72  000D74  03                 	db	3
    73  000D75  0A                 	db	10
    74  000D76  04                 	db	4
    75  000D77  05                 	db	5
    76  000D78  06                 	db	6
    77  000D79  0B                 	db	11
    78  000D7A  07                 	db	7
    79  000D7B  08                 	db	8
    80  000D7C  09                 	db	9
    81  000D7D  0C                 	db	12
    82  000D7E  0E                 	db	14
    83  000D7F  00                 	db	0
    84  000D80  0F                 	db	15
    85  000D81  0D                 	db	13
    86  0000                     _ANSELD	set	3934
    87  0000                     _ANSELC	set	3933
    88  0000                     _ANSELB	set	3932
    89  0000                     _ANSELA	set	3931
    90  0000                     _LATC	set	3979
    91  0000                     _TRISCbits	set	3988
    92  0000                     _LATB	set	3978
    93  0000                     _TRISB	set	3987
    94  0000                     _LATA	set	3977
    95  0000                     _TRISA	set	3986
    96  0000                     _PORTD	set	3971
    97  0000                     _TRISD	set	3989
    98  0000                     _LATD	set	3980
    99  0000                     _PORTCbits	set	3970
   100                           
   101                           	psect	smallconst
   102  000800                     __psmallconst:
   103                           	opt callstack 0
   104  000800  00                 	db	0
   105  000801                     STR_1:
   106  000801  31                 	db	49	;'1'
   107  000802  32                 	db	50	;'2'
   108  000803  33                 	db	51	;'3'
   109  000804  34                 	db	52	;'4'
   110  000805  2A                 	db	42
   111  000806  35                 	db	53	;'5'
   112  000807  36                 	db	54	;'6'
   113  000808  37                 	db	55	;'7'
   114  000809  38                 	db	56	;'8'
   115  00080A  00                 	db	0
   116                           
   117                           ; #config settings
   118  00080B  00                 	db	0	; dummy byte at the end
   119  0000                     
   120                           	psect	cinit
   121  000CB0                     __pcinit:
   122                           	opt callstack 0
   123  000CB0                     start_initialization:
   124                           	opt callstack 0
   125  000CB0                     __initialization:
   126                           	opt callstack 0
   127                           
   128                           ; Initialize objects allocated to COMRAM (16 bytes)
   129                           ; load TBLPTR registers with __pidataCOMRAM
   130  000CB0  0E72               	movlw	low __pidataCOMRAM
   131  000CB2  6EF6               	movwf	tblptrl,c
   132  000CB4  0E0D               	movlw	high __pidataCOMRAM
   133  000CB6  6EF7               	movwf	tblptrh,c
   134  000CB8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   135  000CBA  6EF8               	movwf	tblptru,c
   136  000CBC  EE00  F018         	lfsr	0,__pdataCOMRAM
   137  000CC0  EE10 F010          	lfsr	1,16
   138  000CC4                     copy_data0:
   139  000CC4  0009               	tblrd		*+
   140  000CC6  CFF5 FFEE          	movff	tablat,postinc0
   141  000CCA  50E5               	movf	postdec1,w,c
   142  000CCC  50E1               	movf	fsr1l,w,c
   143  000CCE  E1FA               	bnz	copy_data0
   144  000CD0                     end_of_initialization:
   145                           	opt callstack 0
   146  000CD0                     __end_of__initialization:
   147                           	opt callstack 0
   148  000CD0  0E00               	movlw	low (__Lsmallconst shr (0+16))
   149  000CD2  6EF8               	movwf	tblptru,c
   150  000CD4  0E08               	movlw	high __Lsmallconst
   151  000CD6  6EF7               	movwf	tblptrh,c
   152  000CD8  0100               	movlb	0
   153  000CDA  EF24  F006         	goto	_main	;jump to C main() function
   154                           
   155                           	psect	dataCOMRAM
   156  000018                     __pdataCOMRAM:
   157                           	opt callstack 0
   158  000018                     	ds	16
   159                           
   160                           	psect	cstackCOMRAM
   161  000001                     __pcstackCOMRAM:
   162                           	opt callstack 0
   163  000001                     ?_strlen:
   164                           	opt callstack 0
   165  000001                     ?___aldiv:
   166                           	opt callstack 0
   167  000001                     ?___almod:
   168                           	opt callstack 0
   169  000001                     LCD_rdy@busy:
   170                           	opt callstack 0
   171  000001                     strlen@s:
   172                           	opt callstack 0
   173  000001                     ___aldiv@dividend:
   174                           	opt callstack 0
   175  000001                     ___almod@dividend:
   176                           	opt callstack 0
   177                           
   178                           ; 4 bytes @ 0x0
   179  000001                     	ds	1
   180  000002                     LCD_cmd@cmd:
   181                           	opt callstack 0
   182  000002                     LCD_writeChar@data:
   183                           	opt callstack 0
   184                           
   185                           ; 1 bytes @ 0x1
   186  000002                     	ds	1
   187  000003                     LCD_entryMode@ID:
   188                           	opt callstack 0
   189  000003                     LCD_dispControl@D:
   190                           	opt callstack 0
   191  000003                     LCD_cursor@SC:
   192                           	opt callstack 0
   193  000003                     LCD_functionSet@DL:
   194                           	opt callstack 0
   195  000003                     strlen@a:
   196                           	opt callstack 0
   197                           
   198                           ; 2 bytes @ 0x2
   199  000003                     	ds	2
   200  000005                     LCD_entryMode@SH:
   201                           	opt callstack 0
   202  000005                     LCD_dispControl@C:
   203                           	opt callstack 0
   204  000005                     LCD_cursor@RL:
   205                           	opt callstack 0
   206  000005                     LCD_functionSet@N:
   207                           	opt callstack 0
   208  000005                     LCD_writeStr@data:
   209                           	opt callstack 0
   210  000005                     ___aldiv@divisor:
   211                           	opt callstack 0
   212  000005                     ___almod@divisor:
   213                           	opt callstack 0
   214                           
   215                           ; 4 bytes @ 0x4
   216  000005                     	ds	2
   217  000007                     ??_LCD_cursor:
   218  000007                     ??_LCD_writeStr:
   219  000007                     LCD_dispControl@B:
   220                           	opt callstack 0
   221  000007                     LCD_functionSet@F:
   222                           	opt callstack 0
   223                           
   224                           ; 2 bytes @ 0x6
   225  000007                     	ds	2
   226  000009                     ??_LCD_functionSet:
   227  000009                     ??_LCD_dispControl:
   228  000009                     ___aldiv@counter:
   229                           	opt callstack 0
   230  000009                     ___almod@counter:
   231                           	opt callstack 0
   232  000009                     LCD_writeStr@length:
   233                           	opt callstack 0
   234                           
   235                           ; 2 bytes @ 0x8
   236  000009                     	ds	1
   237  00000A                     ___aldiv@sign:
   238                           	opt callstack 0
   239  00000A                     ___almod@sign:
   240                           	opt callstack 0
   241                           
   242                           ; 1 bytes @ 0x9
   243  00000A                     	ds	1
   244  00000B                     LCD_writeStr@i:
   245                           	opt callstack 0
   246  00000B                     ___aldiv@quotient:
   247                           	opt callstack 0
   248                           
   249                           ; 4 bytes @ 0xA
   250  00000B                     	ds	4
   251  00000F                     printCalcResult@result:
   252                           	opt callstack 0
   253                           
   254                           ; 4 bytes @ 0xE
   255  00000F                     	ds	4
   256  000013                     ??_printCalcResult:
   257                           
   258                           ; 1 bytes @ 0x12
   259  000013                     	ds	2
   260  000015                     printCalcResult@modulo:
   261                           	opt callstack 0
   262                           
   263                           ; 1 bytes @ 0x14
   264  000015                     	ds	1
   265  000016                     printCalcResult@i:
   266                           	opt callstack 0
   267                           
   268                           ; 2 bytes @ 0x15
   269  000016                     	ds	2
   270  000018                     
   271                           ; 1 bytes @ 0x17
   272 ;;
   273 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   274 ;;
   275 ;; *************** function _main *****************
   276 ;; Defined at:
   277 ;;		line 29 in file "main.c"
   278 ;; Parameters:    Size  Location     Type
   279 ;;		None
   280 ;; Auto vars:     Size  Location     Type
   281 ;;  result          4    0        long 
   282 ;; Return value:  Size  Location     Type
   283 ;;                  1    wreg      void 
   284 ;; Registers used:
   285 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   286 ;; Tracked objects:
   287 ;;		On entry : 0/0
   288 ;;		On exit  : 0/0
   289 ;;		Unchanged: 0/0
   290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   291 ;;      Params:         0       0       0       0       0       0       0       0       0
   292 ;;      Locals:         4       0       0       0       0       0       0       0       0
   293 ;;      Temps:          0       0       0       0       0       0       0       0       0
   294 ;;      Totals:         4       0       0       0       0       0       0       0       0
   295 ;;Total ram usage:        4 bytes
   296 ;; Hardware stack levels required when called:    4
   297 ;; This function calls:
   298 ;;		_LCD_init
   299 ;;		_LCD_newLine
   300 ;;		_LCD_writeStr
   301 ;;		_ports_init
   302 ;;		_printCalcResult
   303 ;; This function is called by:
   304 ;;		Startup code after reset
   305 ;; This function uses a non-reentrant model
   306 ;;
   307                           
   308                           	psect	text0
   309  000C48                     __ptext0:
   310                           	opt callstack 0
   311  000C48                     _main:
   312                           	opt callstack 27
   313  000C48                     
   314                           ;main.c: 30:     static char key_vals[4][4] = {{1, 2, 3, 10}, {4, 5, 6, 11}, {7, 8, 9, 1
      +                          2},;main.c: 32:     ports_init();
   315  000C48  EC09  F006         	call	_ports_init	;wreg free
   316  000C4C                     l1185:
   317                           
   318                           ;main.c: 33:     LCD_init();
   319  000C4C  ECC3  F005         	call	_LCD_init	;wreg free
   320  000C50                     
   321                           ;main.c: 37:         LCD_writeStr("1234*5678");
   322  000C50  0E01               	movlw	low STR_1
   323  000C52  6E05               	movwf	LCD_writeStr@data^0,c
   324  000C54  0E08               	movlw	high STR_1
   325  000C56  6E06               	movwf	(LCD_writeStr@data+1)^0,c
   326  000C58  EC84  F005         	call	_LCD_writeStr	;wreg free
   327  000C5C                     
   328                           ;main.c: 38:         LCD_newLine();
   329  000C5C  ECC8  F006         	call	_LCD_newLine	;wreg free
   330  000C60                     
   331                           ;main.c: 42:         printCalcResult(result);
   332  000C60  0EBC               	movlw	188
   333  000C62  6E0F               	movwf	printCalcResult@result^0,c
   334  000C64  0EE9               	movlw	233
   335  000C66  6E10               	movwf	(printCalcResult@result+1)^0,c
   336  000C68  0E6A               	movlw	106
   337  000C6A  6E11               	movwf	(printCalcResult@result+2)^0,c
   338  000C6C  0E00               	movlw	0
   339  000C6E  6E12               	movwf	(printCalcResult@result+3)^0,c
   340  000C70  EC8C  F004         	call	_printCalcResult	;wreg free
   341  000C74  EF26  F006         	goto	l1185
   342  000C78  EF00  F000         	goto	start
   343  000C7C                     __end_of_main:
   344                           	opt callstack 0
   345                           
   346 ;; *************** function _printCalcResult *****************
   347 ;; Defined at:
   348 ;;		line 70 in file "main.c"
   349 ;; Parameters:    Size  Location     Type
   350 ;;  result          4   14[COMRAM] long 
   351 ;; Auto vars:     Size  Location     Type
   352 ;;  modulo          1   20[COMRAM] unsigned char 
   353 ;;  i               2   21[COMRAM] int 
   354 ;; Return value:  Size  Location     Type
   355 ;;                  1    wreg      void 
   356 ;; Registers used:
   357 ;;		wreg, status,2, status,0, cstack
   358 ;; Tracked objects:
   359 ;;		On entry : 0/0
   360 ;;		On exit  : 0/0
   361 ;;		Unchanged: 0/0
   362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   363 ;;      Params:         4       0       0       0       0       0       0       0       0
   364 ;;      Locals:         3       0       0       0       0       0       0       0       0
   365 ;;      Temps:          2       0       0       0       0       0       0       0       0
   366 ;;      Totals:         9       0       0       0       0       0       0       0       0
   367 ;;Total ram usage:        9 bytes
   368 ;; Hardware stack levels used:    1
   369 ;; Hardware stack levels required when called:    3
   370 ;; This function calls:
   371 ;;		_LCD_cursor
   372 ;;		_LCD_dispControl
   373 ;;		_LCD_entryMode
   374 ;;		_LCD_writeChar
   375 ;;		___aldiv
   376 ;;		___almod
   377 ;; This function is called by:
   378 ;;		_main
   379 ;; This function uses a non-reentrant model
   380 ;;
   381                           
   382                           	psect	text1
   383  000918                     __ptext1:
   384                           	opt callstack 0
   385  000918                     _printCalcResult:
   386                           	opt callstack 27
   387  000918                     
   388                           ;main.c: 72:     for (int i = 0; i < 15; i++) {
   389  000918  0E00               	movlw	0
   390  00091A  6E17               	movwf	(printCalcResult@i+1)^0,c
   391  00091C  0E00               	movlw	0
   392  00091E  6E16               	movwf	printCalcResult@i^0,c
   393  000920                     l1161:
   394                           
   395                           ;main.c: 73:         LCD_cursor(0, 1);
   396  000920  0E00               	movlw	0
   397  000922  6E04               	movwf	(LCD_cursor@SC+1)^0,c
   398  000924  0E00               	movlw	0
   399  000926  6E03               	movwf	LCD_cursor@SC^0,c
   400  000928  0E00               	movlw	0
   401  00092A  6E06               	movwf	(LCD_cursor@RL+1)^0,c
   402  00092C  0E01               	movlw	1
   403  00092E  6E05               	movwf	LCD_cursor@RL^0,c
   404  000930  EC85  F006         	call	_LCD_cursor	;wreg free
   405  000934                     
   406                           ;main.c: 74:     }
   407  000934  4A16               	infsnz	printCalcResult@i^0,f,c
   408  000936  2A17               	incf	(printCalcResult@i+1)^0,f,c
   409  000938  BE17               	btfsc	(printCalcResult@i+1)^0,7,c
   410  00093A  EFA8  F004         	goto	u321
   411  00093E  5017               	movf	(printCalcResult@i+1)^0,w,c
   412  000940  E109               	bnz	u320
   413  000942  0E0F               	movlw	15
   414  000944  5C16               	subwf	printCalcResult@i^0,w,c
   415  000946  A0D8               	btfss	status,0,c
   416  000948  EFA8  F004         	goto	u321
   417  00094C  EFAA  F004         	goto	u320
   418  000950                     u321:
   419  000950  EF90  F004         	goto	l1161
   420  000954                     u320:
   421  000954                     
   422                           ;main.c: 75:     LCD_entryMode(0,0);
   423  000954  0E00               	movlw	0
   424  000956  6E04               	movwf	(LCD_entryMode@ID+1)^0,c
   425  000958  0E00               	movlw	0
   426  00095A  6E03               	movwf	LCD_entryMode@ID^0,c
   427  00095C  0E00               	movlw	0
   428  00095E  6E06               	movwf	(LCD_entryMode@SH+1)^0,c
   429  000960  0E00               	movlw	0
   430  000962  6E05               	movwf	LCD_entryMode@SH^0,c
   431  000964  ECC1  F006         	call	_LCD_entryMode	;wreg free
   432                           
   433                           ;main.c: 76:     while (result) {
   434  000968  EFE9  F004         	goto	l1177
   435  00096C                     l1169:
   436                           
   437                           ;main.c: 77:         char modulo = result % 10;
   438  00096C  C00F  F001         	movff	printCalcResult@result,___almod@dividend
   439  000970  C010  F002         	movff	printCalcResult@result+1,___almod@dividend+1
   440  000974  C011  F003         	movff	printCalcResult@result+2,___almod@dividend+2
   441  000978  C012  F004         	movff	printCalcResult@result+3,___almod@dividend+3
   442  00097C  0E0A               	movlw	10
   443  00097E  6E05               	movwf	___almod@divisor^0,c
   444  000980  0E00               	movlw	0
   445  000982  6E06               	movwf	(___almod@divisor+1)^0,c
   446  000984  0E00               	movlw	0
   447  000986  6E07               	movwf	(___almod@divisor+2)^0,c
   448  000988  0E00               	movlw	0
   449  00098A  6E08               	movwf	(___almod@divisor+3)^0,c
   450  00098C  EC0E  F005         	call	___almod	;wreg free
   451  000990  5001               	movf	?___almod^0,w,c
   452  000992  6E15               	movwf	printCalcResult@modulo^0,c
   453  000994                     
   454                           ;main.c: 78:         modulo += 48;
   455  000994  0E30               	movlw	48
   456  000996  2615               	addwf	printCalcResult@modulo^0,f,c
   457  000998                     
   458                           ;main.c: 79:         LCD_writeChar(modulo);
   459  000998  5015               	movf	printCalcResult@modulo^0,w,c
   460  00099A  EC93  F006         	call	_LCD_writeChar
   461  00099E                     
   462                           ;main.c: 80:         result /= 10;
   463  00099E  C00F  F001         	movff	printCalcResult@result,___aldiv@dividend
   464  0009A2  C010  F002         	movff	printCalcResult@result+1,___aldiv@dividend+1
   465  0009A6  C011  F003         	movff	printCalcResult@result+2,___aldiv@dividend+2
   466  0009AA  C012  F004         	movff	printCalcResult@result+3,___aldiv@dividend+3
   467  0009AE  0E0A               	movlw	10
   468  0009B0  6E05               	movwf	___aldiv@divisor^0,c
   469  0009B2  0E00               	movlw	0
   470  0009B4  6E06               	movwf	(___aldiv@divisor+1)^0,c
   471  0009B6  0E00               	movlw	0
   472  0009B8  6E07               	movwf	(___aldiv@divisor+2)^0,c
   473  0009BA  0E00               	movlw	0
   474  0009BC  6E08               	movwf	(___aldiv@divisor+3)^0,c
   475  0009BE  EC06  F004         	call	___aldiv	;wreg free
   476  0009C2  C001  F00F         	movff	?___aldiv,printCalcResult@result
   477  0009C6  C002  F010         	movff	?___aldiv+1,printCalcResult@result+1
   478  0009CA  C003  F011         	movff	?___aldiv+2,printCalcResult@result+2
   479  0009CE  C004  F012         	movff	?___aldiv+3,printCalcResult@result+3
   480  0009D2                     l1177:
   481                           
   482                           ;main.c: 76:     while (result) {
   483  0009D2  500F               	movf	printCalcResult@result^0,w,c
   484  0009D4  1010               	iorwf	(printCalcResult@result+1)^0,w,c
   485  0009D6  1011               	iorwf	(printCalcResult@result+2)^0,w,c
   486  0009D8  1012               	iorwf	(printCalcResult@result+3)^0,w,c
   487  0009DA  A4D8               	btfss	status,2,c
   488  0009DC  EFF2  F004         	goto	u331
   489  0009E0  EFF4  F004         	goto	u330
   490  0009E4                     u331:
   491  0009E4  EFB6  F004         	goto	l1169
   492  0009E8                     u330:
   493  0009E8                     
   494                           ;main.c: 82:     LCD_dispControl(1,0,0);
   495  0009E8  0E00               	movlw	0
   496  0009EA  6E04               	movwf	(LCD_dispControl@D+1)^0,c
   497  0009EC  0E01               	movlw	1
   498  0009EE  6E03               	movwf	LCD_dispControl@D^0,c
   499  0009F0  0E00               	movlw	0
   500  0009F2  6E06               	movwf	(LCD_dispControl@C+1)^0,c
   501  0009F4  0E00               	movlw	0
   502  0009F6  6E05               	movwf	LCD_dispControl@C^0,c
   503  0009F8  0E00               	movlw	0
   504  0009FA  6E08               	movwf	(LCD_dispControl@B+1)^0,c
   505  0009FC  0E00               	movlw	0
   506  0009FE  6E07               	movwf	LCD_dispControl@B^0,c
   507  000A00  ECAD  F006         	call	_LCD_dispControl	;wreg free
   508  000A04                     
   509                           ;main.c: 83:     _delay((unsigned long)((2000)*(1000000/4000.0)));
   510  000A04  0E03               	movlw	3
   511  000A06  6E14               	movwf	(??_printCalcResult+1)^0,c
   512  000A08  0E8A               	movlw	138
   513  000A0A  6E13               	movwf	??_printCalcResult^0,c
   514  000A0C  0E56               	movlw	86
   515  000A0E                     u347:
   516  000A0E  2EE8               	decfsz	wreg,f,c
   517  000A10  D7FE               	bra	u347
   518  000A12  2E13               	decfsz	??_printCalcResult^0,f,c
   519  000A14  D7FC               	bra	u347
   520  000A16  2E14               	decfsz	(??_printCalcResult+1)^0,f,c
   521  000A18  D7FA               	bra	u347
   522  000A1A  0012               	return		;funcret
   523  000A1C                     __end_of_printCalcResult:
   524                           	opt callstack 0
   525                           
   526 ;; *************** function ___almod *****************
   527 ;; Defined at:
   528 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\almod.c"
   529 ;; Parameters:    Size  Location     Type
   530 ;;  dividend        4    0[COMRAM] long 
   531 ;;  divisor         4    4[COMRAM] long 
   532 ;; Auto vars:     Size  Location     Type
   533 ;;  sign            1    9[COMRAM] unsigned char 
   534 ;;  counter         1    8[COMRAM] unsigned char 
   535 ;; Return value:  Size  Location     Type
   536 ;;                  4    0[COMRAM] long 
   537 ;; Registers used:
   538 ;;		wreg, status,2, status,0
   539 ;; Tracked objects:
   540 ;;		On entry : 0/0
   541 ;;		On exit  : 0/0
   542 ;;		Unchanged: 0/0
   543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   544 ;;      Params:         8       0       0       0       0       0       0       0       0
   545 ;;      Locals:         2       0       0       0       0       0       0       0       0
   546 ;;      Temps:          0       0       0       0       0       0       0       0       0
   547 ;;      Totals:        10       0       0       0       0       0       0       0       0
   548 ;;Total ram usage:       10 bytes
   549 ;; Hardware stack levels used:    1
   550 ;; This function calls:
   551 ;;		Nothing
   552 ;; This function is called by:
   553 ;;		_printCalcResult
   554 ;; This function uses a non-reentrant model
   555 ;;
   556                           
   557                           	psect	text2
   558  000A1C                     __ptext2:
   559                           	opt callstack 0
   560  000A1C                     ___almod:
   561                           	opt callstack 29
   562  000A1C  0E00               	movlw	0
   563  000A1E  6E0A               	movwf	___almod@sign^0,c
   564  000A20  BE04               	btfsc	(___almod@dividend+3)^0,7,c
   565  000A22  EF17  F005         	goto	u250
   566  000A26  EF15  F005         	goto	u251
   567  000A2A                     u251:
   568  000A2A  EF21  F005         	goto	l1101
   569  000A2E                     u250:
   570  000A2E  1E04               	comf	(___almod@dividend+3)^0,f,c
   571  000A30  1E03               	comf	(___almod@dividend+2)^0,f,c
   572  000A32  1E02               	comf	(___almod@dividend+1)^0,f,c
   573  000A34  6C01               	negf	___almod@dividend^0,c
   574  000A36  0E00               	movlw	0
   575  000A38  2202               	addwfc	(___almod@dividend+1)^0,f,c
   576  000A3A  2203               	addwfc	(___almod@dividend+2)^0,f,c
   577  000A3C  2204               	addwfc	(___almod@dividend+3)^0,f,c
   578  000A3E  0E01               	movlw	1
   579  000A40  6E0A               	movwf	___almod@sign^0,c
   580  000A42                     l1101:
   581  000A42  BE08               	btfsc	(___almod@divisor+3)^0,7,c
   582  000A44  EF28  F005         	goto	u260
   583  000A48  EF26  F005         	goto	u261
   584  000A4C                     u261:
   585  000A4C  EF30  F005         	goto	l1105
   586  000A50                     u260:
   587  000A50  1E08               	comf	(___almod@divisor+3)^0,f,c
   588  000A52  1E07               	comf	(___almod@divisor+2)^0,f,c
   589  000A54  1E06               	comf	(___almod@divisor+1)^0,f,c
   590  000A56  6C05               	negf	___almod@divisor^0,c
   591  000A58  0E00               	movlw	0
   592  000A5A  2206               	addwfc	(___almod@divisor+1)^0,f,c
   593  000A5C  2207               	addwfc	(___almod@divisor+2)^0,f,c
   594  000A5E  2208               	addwfc	(___almod@divisor+3)^0,f,c
   595  000A60                     l1105:
   596  000A60  5005               	movf	___almod@divisor^0,w,c
   597  000A62  1006               	iorwf	(___almod@divisor+1)^0,w,c
   598  000A64  1007               	iorwf	(___almod@divisor+2)^0,w,c
   599  000A66  1008               	iorwf	(___almod@divisor+3)^0,w,c
   600  000A68  B4D8               	btfsc	status,2,c
   601  000A6A  EF39  F005         	goto	u271
   602  000A6E  EF3B  F005         	goto	u270
   603  000A72                     u271:
   604  000A72  EF6B  F005         	goto	l1121
   605  000A76                     u270:
   606  000A76  0E01               	movlw	1
   607  000A78  6E09               	movwf	___almod@counter^0,c
   608  000A7A  EF45  F005         	goto	l1111
   609  000A7E                     l1109:
   610  000A7E  90D8               	bcf	status,0,c
   611  000A80  3605               	rlcf	___almod@divisor^0,f,c
   612  000A82  3606               	rlcf	(___almod@divisor+1)^0,f,c
   613  000A84  3607               	rlcf	(___almod@divisor+2)^0,f,c
   614  000A86  3608               	rlcf	(___almod@divisor+3)^0,f,c
   615  000A88  2A09               	incf	___almod@counter^0,f,c
   616  000A8A                     l1111:
   617  000A8A  AE08               	btfss	(___almod@divisor+3)^0,7,c
   618  000A8C  EF4A  F005         	goto	u281
   619  000A90  EF4C  F005         	goto	u280
   620  000A94                     u281:
   621  000A94  EF3F  F005         	goto	l1109
   622  000A98                     u280:
   623  000A98                     l1113:
   624  000A98  5005               	movf	___almod@divisor^0,w,c
   625  000A9A  5C01               	subwf	___almod@dividend^0,w,c
   626  000A9C  5006               	movf	(___almod@divisor+1)^0,w,c
   627  000A9E  5802               	subwfb	(___almod@dividend+1)^0,w,c
   628  000AA0  5007               	movf	(___almod@divisor+2)^0,w,c
   629  000AA2  5803               	subwfb	(___almod@dividend+2)^0,w,c
   630  000AA4  5008               	movf	(___almod@divisor+3)^0,w,c
   631  000AA6  5804               	subwfb	(___almod@dividend+3)^0,w,c
   632  000AA8  A0D8               	btfss	status,0,c
   633  000AAA  EF59  F005         	goto	u291
   634  000AAE  EF5B  F005         	goto	u290
   635  000AB2                     u291:
   636  000AB2  EF63  F005         	goto	l1117
   637  000AB6                     u290:
   638  000AB6  5005               	movf	___almod@divisor^0,w,c
   639  000AB8  5E01               	subwf	___almod@dividend^0,f,c
   640  000ABA  5006               	movf	(___almod@divisor+1)^0,w,c
   641  000ABC  5A02               	subwfb	(___almod@dividend+1)^0,f,c
   642  000ABE  5007               	movf	(___almod@divisor+2)^0,w,c
   643  000AC0  5A03               	subwfb	(___almod@dividend+2)^0,f,c
   644  000AC2  5008               	movf	(___almod@divisor+3)^0,w,c
   645  000AC4  5A04               	subwfb	(___almod@dividend+3)^0,f,c
   646  000AC6                     l1117:
   647  000AC6  90D8               	bcf	status,0,c
   648  000AC8  3208               	rrcf	(___almod@divisor+3)^0,f,c
   649  000ACA  3207               	rrcf	(___almod@divisor+2)^0,f,c
   650  000ACC  3206               	rrcf	(___almod@divisor+1)^0,f,c
   651  000ACE  3205               	rrcf	___almod@divisor^0,f,c
   652  000AD0  2E09               	decfsz	___almod@counter^0,f,c
   653  000AD2  EF4C  F005         	goto	l1113
   654  000AD6                     l1121:
   655  000AD6  500A               	movf	___almod@sign^0,w,c
   656  000AD8  B4D8               	btfsc	status,2,c
   657  000ADA  EF71  F005         	goto	u301
   658  000ADE  EF73  F005         	goto	u300
   659  000AE2                     u301:
   660  000AE2  EF7B  F005         	goto	l1125
   661  000AE6                     u300:
   662  000AE6  1E04               	comf	(___almod@dividend+3)^0,f,c
   663  000AE8  1E03               	comf	(___almod@dividend+2)^0,f,c
   664  000AEA  1E02               	comf	(___almod@dividend+1)^0,f,c
   665  000AEC  6C01               	negf	___almod@dividend^0,c
   666  000AEE  0E00               	movlw	0
   667  000AF0  2202               	addwfc	(___almod@dividend+1)^0,f,c
   668  000AF2  2203               	addwfc	(___almod@dividend+2)^0,f,c
   669  000AF4  2204               	addwfc	(___almod@dividend+3)^0,f,c
   670  000AF6                     l1125:
   671  000AF6  C001  F001         	movff	___almod@dividend,?___almod
   672  000AFA  C002  F002         	movff	___almod@dividend+1,?___almod+1
   673  000AFE  C003  F003         	movff	___almod@dividend+2,?___almod+2
   674  000B02  C004  F004         	movff	___almod@dividend+3,?___almod+3
   675  000B06  0012               	return		;funcret
   676  000B08                     __end_of___almod:
   677                           	opt callstack 0
   678                           
   679 ;; *************** function ___aldiv *****************
   680 ;; Defined at:
   681 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\aldiv.c"
   682 ;; Parameters:    Size  Location     Type
   683 ;;  dividend        4    0[COMRAM] long 
   684 ;;  divisor         4    4[COMRAM] long 
   685 ;; Auto vars:     Size  Location     Type
   686 ;;  quotient        4   10[COMRAM] long 
   687 ;;  sign            1    9[COMRAM] unsigned char 
   688 ;;  counter         1    8[COMRAM] unsigned char 
   689 ;; Return value:  Size  Location     Type
   690 ;;                  4    0[COMRAM] long 
   691 ;; Registers used:
   692 ;;		wreg, status,2, status,0
   693 ;; Tracked objects:
   694 ;;		On entry : 0/0
   695 ;;		On exit  : 0/0
   696 ;;		Unchanged: 0/0
   697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   698 ;;      Params:         8       0       0       0       0       0       0       0       0
   699 ;;      Locals:         6       0       0       0       0       0       0       0       0
   700 ;;      Temps:          0       0       0       0       0       0       0       0       0
   701 ;;      Totals:        14       0       0       0       0       0       0       0       0
   702 ;;Total ram usage:       14 bytes
   703 ;; Hardware stack levels used:    1
   704 ;; This function calls:
   705 ;;		Nothing
   706 ;; This function is called by:
   707 ;;		_printCalcResult
   708 ;; This function uses a non-reentrant model
   709 ;;
   710                           
   711                           	psect	text3
   712  00080C                     __ptext3:
   713                           	opt callstack 0
   714  00080C                     ___aldiv:
   715                           	opt callstack 29
   716  00080C  0E00               	movlw	0
   717  00080E  6E0A               	movwf	___aldiv@sign^0,c
   718  000810  BE08               	btfsc	(___aldiv@divisor+3)^0,7,c
   719  000812  EF0F  F004         	goto	u190
   720  000816  EF0D  F004         	goto	u191
   721  00081A                     u191:
   722  00081A  EF19  F004         	goto	l1057
   723  00081E                     u190:
   724  00081E  1E08               	comf	(___aldiv@divisor+3)^0,f,c
   725  000820  1E07               	comf	(___aldiv@divisor+2)^0,f,c
   726  000822  1E06               	comf	(___aldiv@divisor+1)^0,f,c
   727  000824  6C05               	negf	___aldiv@divisor^0,c
   728  000826  0E00               	movlw	0
   729  000828  2206               	addwfc	(___aldiv@divisor+1)^0,f,c
   730  00082A  2207               	addwfc	(___aldiv@divisor+2)^0,f,c
   731  00082C  2208               	addwfc	(___aldiv@divisor+3)^0,f,c
   732  00082E  0E01               	movlw	1
   733  000830  6E0A               	movwf	___aldiv@sign^0,c
   734  000832                     l1057:
   735  000832  BE04               	btfsc	(___aldiv@dividend+3)^0,7,c
   736  000834  EF20  F004         	goto	u200
   737  000838  EF1E  F004         	goto	u201
   738  00083C                     u201:
   739  00083C  EF2A  F004         	goto	l1063
   740  000840                     u200:
   741  000840  1E04               	comf	(___aldiv@dividend+3)^0,f,c
   742  000842  1E03               	comf	(___aldiv@dividend+2)^0,f,c
   743  000844  1E02               	comf	(___aldiv@dividend+1)^0,f,c
   744  000846  6C01               	negf	___aldiv@dividend^0,c
   745  000848  0E00               	movlw	0
   746  00084A  2202               	addwfc	(___aldiv@dividend+1)^0,f,c
   747  00084C  2203               	addwfc	(___aldiv@dividend+2)^0,f,c
   748  00084E  2204               	addwfc	(___aldiv@dividend+3)^0,f,c
   749  000850  0E01               	movlw	1
   750  000852  1A0A               	xorwf	___aldiv@sign^0,f,c
   751  000854                     l1063:
   752  000854  0E00               	movlw	0
   753  000856  6E0B               	movwf	___aldiv@quotient^0,c
   754  000858  0E00               	movlw	0
   755  00085A  6E0C               	movwf	(___aldiv@quotient+1)^0,c
   756  00085C  0E00               	movlw	0
   757  00085E  6E0D               	movwf	(___aldiv@quotient+2)^0,c
   758  000860  0E00               	movlw	0
   759  000862  6E0E               	movwf	(___aldiv@quotient+3)^0,c
   760  000864  5005               	movf	___aldiv@divisor^0,w,c
   761  000866  1006               	iorwf	(___aldiv@divisor+1)^0,w,c
   762  000868  1007               	iorwf	(___aldiv@divisor+2)^0,w,c
   763  00086A  1008               	iorwf	(___aldiv@divisor+3)^0,w,c
   764  00086C  B4D8               	btfsc	status,2,c
   765  00086E  EF3B  F004         	goto	u211
   766  000872  EF3D  F004         	goto	u210
   767  000876                     u211:
   768  000876  EF73  F004         	goto	l1085
   769  00087A                     u210:
   770  00087A  0E01               	movlw	1
   771  00087C  6E09               	movwf	___aldiv@counter^0,c
   772  00087E  EF47  F004         	goto	l1071
   773  000882                     l1069:
   774  000882  90D8               	bcf	status,0,c
   775  000884  3605               	rlcf	___aldiv@divisor^0,f,c
   776  000886  3606               	rlcf	(___aldiv@divisor+1)^0,f,c
   777  000888  3607               	rlcf	(___aldiv@divisor+2)^0,f,c
   778  00088A  3608               	rlcf	(___aldiv@divisor+3)^0,f,c
   779  00088C  2A09               	incf	___aldiv@counter^0,f,c
   780  00088E                     l1071:
   781  00088E  AE08               	btfss	(___aldiv@divisor+3)^0,7,c
   782  000890  EF4C  F004         	goto	u221
   783  000894  EF4E  F004         	goto	u220
   784  000898                     u221:
   785  000898  EF41  F004         	goto	l1069
   786  00089C                     u220:
   787  00089C                     l1073:
   788  00089C  90D8               	bcf	status,0,c
   789  00089E  360B               	rlcf	___aldiv@quotient^0,f,c
   790  0008A0  360C               	rlcf	(___aldiv@quotient+1)^0,f,c
   791  0008A2  360D               	rlcf	(___aldiv@quotient+2)^0,f,c
   792  0008A4  360E               	rlcf	(___aldiv@quotient+3)^0,f,c
   793  0008A6  5005               	movf	___aldiv@divisor^0,w,c
   794  0008A8  5C01               	subwf	___aldiv@dividend^0,w,c
   795  0008AA  5006               	movf	(___aldiv@divisor+1)^0,w,c
   796  0008AC  5802               	subwfb	(___aldiv@dividend+1)^0,w,c
   797  0008AE  5007               	movf	(___aldiv@divisor+2)^0,w,c
   798  0008B0  5803               	subwfb	(___aldiv@dividend+2)^0,w,c
   799  0008B2  5008               	movf	(___aldiv@divisor+3)^0,w,c
   800  0008B4  5804               	subwfb	(___aldiv@dividend+3)^0,w,c
   801  0008B6  A0D8               	btfss	status,0,c
   802  0008B8  EF60  F004         	goto	u231
   803  0008BC  EF62  F004         	goto	u230
   804  0008C0                     u231:
   805  0008C0  EF6B  F004         	goto	l1081
   806  0008C4                     u230:
   807  0008C4  5005               	movf	___aldiv@divisor^0,w,c
   808  0008C6  5E01               	subwf	___aldiv@dividend^0,f,c
   809  0008C8  5006               	movf	(___aldiv@divisor+1)^0,w,c
   810  0008CA  5A02               	subwfb	(___aldiv@dividend+1)^0,f,c
   811  0008CC  5007               	movf	(___aldiv@divisor+2)^0,w,c
   812  0008CE  5A03               	subwfb	(___aldiv@dividend+2)^0,f,c
   813  0008D0  5008               	movf	(___aldiv@divisor+3)^0,w,c
   814  0008D2  5A04               	subwfb	(___aldiv@dividend+3)^0,f,c
   815  0008D4  800B               	bsf	___aldiv@quotient^0,0,c
   816  0008D6                     l1081:
   817  0008D6  90D8               	bcf	status,0,c
   818  0008D8  3208               	rrcf	(___aldiv@divisor+3)^0,f,c
   819  0008DA  3207               	rrcf	(___aldiv@divisor+2)^0,f,c
   820  0008DC  3206               	rrcf	(___aldiv@divisor+1)^0,f,c
   821  0008DE  3205               	rrcf	___aldiv@divisor^0,f,c
   822  0008E0  2E09               	decfsz	___aldiv@counter^0,f,c
   823  0008E2  EF4E  F004         	goto	l1073
   824  0008E6                     l1085:
   825  0008E6  500A               	movf	___aldiv@sign^0,w,c
   826  0008E8  B4D8               	btfsc	status,2,c
   827  0008EA  EF79  F004         	goto	u241
   828  0008EE  EF7B  F004         	goto	u240
   829  0008F2                     u241:
   830  0008F2  EF83  F004         	goto	l1089
   831  0008F6                     u240:
   832  0008F6  1E0E               	comf	(___aldiv@quotient+3)^0,f,c
   833  0008F8  1E0D               	comf	(___aldiv@quotient+2)^0,f,c
   834  0008FA  1E0C               	comf	(___aldiv@quotient+1)^0,f,c
   835  0008FC  6C0B               	negf	___aldiv@quotient^0,c
   836  0008FE  0E00               	movlw	0
   837  000900  220C               	addwfc	(___aldiv@quotient+1)^0,f,c
   838  000902  220D               	addwfc	(___aldiv@quotient+2)^0,f,c
   839  000904  220E               	addwfc	(___aldiv@quotient+3)^0,f,c
   840  000906                     l1089:
   841  000906  C00B  F001         	movff	___aldiv@quotient,?___aldiv
   842  00090A  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
   843  00090E  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
   844  000912  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
   845  000916  0012               	return		;funcret
   846  000918                     __end_of___aldiv:
   847                           	opt callstack 0
   848                           
   849 ;; *************** function _LCD_writeChar *****************
   850 ;; Defined at:
   851 ;;		line 128 in file "./lcd.h"
   852 ;; Parameters:    Size  Location     Type
   853 ;;  data            1    wreg     unsigned char 
   854 ;; Auto vars:     Size  Location     Type
   855 ;;  data            1    1[COMRAM] unsigned char 
   856 ;; Return value:  Size  Location     Type
   857 ;;                  1    wreg      void 
   858 ;; Registers used:
   859 ;;		wreg, status,2, status,0, cstack
   860 ;; Tracked objects:
   861 ;;		On entry : 0/0
   862 ;;		On exit  : 0/0
   863 ;;		Unchanged: 0/0
   864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   865 ;;      Params:         0       0       0       0       0       0       0       0       0
   866 ;;      Locals:         1       0       0       0       0       0       0       0       0
   867 ;;      Temps:          0       0       0       0       0       0       0       0       0
   868 ;;      Totals:         1       0       0       0       0       0       0       0       0
   869 ;;Total ram usage:        1 bytes
   870 ;; Hardware stack levels used:    1
   871 ;; Hardware stack levels required when called:    1
   872 ;; This function calls:
   873 ;;		_LCD_rdy
   874 ;; This function is called by:
   875 ;;		_printCalcResult
   876 ;; This function uses a non-reentrant model
   877 ;;
   878                           
   879                           	psect	text4
   880  000D26                     __ptext4:
   881                           	opt callstack 0
   882  000D26                     _LCD_writeChar:
   883                           	opt callstack 28
   884                           
   885                           ;incstack = 0
   886                           ;LCD_writeChar@data stored from wreg
   887  000D26  6E02               	movwf	LCD_writeChar@data^0,c
   888  000D28                     
   889                           ;./lcd.h: 129:     LCD_rdy();
   890  000D28  EC3E  F006         	call	_LCD_rdy	;wreg free
   891  000D2C                     
   892                           ;./lcd.h: 130:     PORTCbits.RC2 = 1;
   893  000D2C  8482               	bsf	130,2,c	;volatile
   894  000D2E                     
   895                           ;./lcd.h: 131:     PORTCbits.RC1 = 0;
   896  000D2E  9282               	bcf	130,1,c	;volatile
   897  000D30                     
   898                           ;./lcd.h: 133:     PORTCbits.RC0 = 1;
   899  000D30  8082               	bsf	130,0,c	;volatile
   900  000D32                     
   901                           ;./lcd.h: 134:     __nop();
   902  000D32  F000               	nop	
   903  000D34                     
   904                           ;./lcd.h: 135:     LATD = data;
   905  000D34  C002  FF8C         	movff	LCD_writeChar@data,3980	;volatile
   906  000D38                     
   907                           ;./lcd.h: 136:     __nop();
   908  000D38  F000               	nop	
   909  000D3A                     
   910                           ;./lcd.h: 137:     PORTCbits.RC0 = 0;
   911  000D3A  9082               	bcf	130,0,c	;volatile
   912  000D3C                     
   913                           ;./lcd.h: 138:     __nop();
   914  000D3C  F000               	nop	
   915  000D3E  0012               	return		;funcret
   916  000D40                     __end_of_LCD_writeChar:
   917                           	opt callstack 0
   918                           
   919 ;; *************** function _LCD_cursor *****************
   920 ;; Defined at:
   921 ;;		line 67 in file "./lcd.h"
   922 ;; Parameters:    Size  Location     Type
   923 ;;  SC              2    2[COMRAM] short 
   924 ;;  RL              2    4[COMRAM] short 
   925 ;; Auto vars:     Size  Location     Type
   926 ;;		None
   927 ;; Return value:  Size  Location     Type
   928 ;;                  1    wreg      void 
   929 ;; Registers used:
   930 ;;		wreg, status,2, status,0, cstack
   931 ;; Tracked objects:
   932 ;;		On entry : 0/0
   933 ;;		On exit  : 0/0
   934 ;;		Unchanged: 0/0
   935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   936 ;;      Params:         4       0       0       0       0       0       0       0       0
   937 ;;      Locals:         0       0       0       0       0       0       0       0       0
   938 ;;      Temps:          1       0       0       0       0       0       0       0       0
   939 ;;      Totals:         5       0       0       0       0       0       0       0       0
   940 ;;Total ram usage:        5 bytes
   941 ;; Hardware stack levels used:    1
   942 ;; Hardware stack levels required when called:    2
   943 ;; This function calls:
   944 ;;		_LCD_cmd
   945 ;; This function is called by:
   946 ;;		_printCalcResult
   947 ;; This function uses a non-reentrant model
   948 ;;
   949                           
   950                           	psect	text5
   951  000D0A                     __ptext5:
   952                           	opt callstack 0
   953  000D0A                     _LCD_cursor:
   954                           	opt callstack 27
   955  000D0A                     
   956                           ;./lcd.h: 68:     LCD_cmd(0b00010000 | SC << 3 | RL << 2);
   957  000D0A  C005  F007         	movff	LCD_cursor@RL,??_LCD_cursor
   958  000D0E  90D8               	bcf	status,0,c
   959  000D10  3607               	rlcf	??_LCD_cursor^0,f,c
   960  000D12  90D8               	bcf	status,0,c
   961  000D14  3607               	rlcf	??_LCD_cursor^0,f,c
   962  000D16  3803               	swapf	LCD_cursor@SC^0,w,c
   963  000D18  42E8               	rrncf	wreg,f,c
   964  000D1A  0BF8               	andlw	248
   965  000D1C  1007               	iorwf	??_LCD_cursor^0,w,c
   966  000D1E  0910               	iorlw	16
   967  000D20  ECA0  F006         	call	_LCD_cmd
   968  000D24  0012               	return		;funcret
   969  000D26                     __end_of_LCD_cursor:
   970                           	opt callstack 0
   971                           
   972 ;; *************** function _ports_init *****************
   973 ;; Defined at:
   974 ;;		line 48 in file "main.c"
   975 ;; Parameters:    Size  Location     Type
   976 ;;		None
   977 ;; Auto vars:     Size  Location     Type
   978 ;;		None
   979 ;; Return value:  Size  Location     Type
   980 ;;                  1    wreg      void 
   981 ;; Registers used:
   982 ;;		wreg, status,2
   983 ;; Tracked objects:
   984 ;;		On entry : 0/0
   985 ;;		On exit  : 0/0
   986 ;;		Unchanged: 0/0
   987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   988 ;;      Params:         0       0       0       0       0       0       0       0       0
   989 ;;      Locals:         0       0       0       0       0       0       0       0       0
   990 ;;      Temps:          0       0       0       0       0       0       0       0       0
   991 ;;      Totals:         0       0       0       0       0       0       0       0       0
   992 ;;Total ram usage:        0 bytes
   993 ;; Hardware stack levels used:    1
   994 ;; This function calls:
   995 ;;		Nothing
   996 ;; This function is called by:
   997 ;;		_main
   998 ;; This function uses a non-reentrant model
   999 ;;
  1000                           
  1001                           	psect	text6
  1002  000C12                     __ptext6:
  1003                           	opt callstack 0
  1004  000C12                     _ports_init:
  1005                           	opt callstack 30
  1006  000C12                     
  1007                           ;main.c: 49:     ANSELA = 0;
  1008  000C12  0E00               	movlw	0
  1009  000C14  010F               	movlb	15	; () banked
  1010  000C16  6F5B               	movwf	91,b	;volatile
  1011                           
  1012                           ;main.c: 50:     TRISA = 0;
  1013  000C18  0E00               	movlw	0
  1014  000C1A  6E92               	movwf	146,c	;volatile
  1015                           
  1016                           ;main.c: 51:     LATA = 0;
  1017  000C1C  0E00               	movlw	0
  1018  000C1E  6E89               	movwf	137,c	;volatile
  1019                           
  1020                           ;main.c: 53:     ANSELB = 0;
  1021  000C20  0E00               	movlw	0
  1022  000C22  6F5C               	movwf	92,b	;volatile
  1023                           
  1024                           ;main.c: 54:     TRISB = 0b00001111;
  1025  000C24  0E0F               	movlw	15
  1026  000C26  6E93               	movwf	147,c	;volatile
  1027                           
  1028                           ;main.c: 55:     LATB = 0;
  1029  000C28  0E00               	movlw	0
  1030  000C2A  6E8A               	movwf	138,c	;volatile
  1031                           
  1032                           ;main.c: 57:     ANSELC = 0;
  1033  000C2C  0E00               	movlw	0
  1034  000C2E  6F5D               	movwf	93,b	;volatile
  1035  000C30                     
  1036                           ; BSR set to: 15
  1037                           ;main.c: 58:     TRISCbits.TRISC0=0;
  1038  000C30  9094               	bcf	148,0,c	;volatile
  1039  000C32                     
  1040                           ; BSR set to: 15
  1041                           ;main.c: 59:     TRISCbits.TRISC2=0;
  1042  000C32  9494               	bcf	148,2,c	;volatile
  1043  000C34                     
  1044                           ; BSR set to: 15
  1045                           ;main.c: 60:     TRISCbits.TRISC1=0;
  1046  000C34  9294               	bcf	148,1,c	;volatile
  1047                           
  1048                           ;main.c: 61:     LATC = 0;
  1049  000C36  0E00               	movlw	0
  1050  000C38  6E8B               	movwf	139,c	;volatile
  1051                           
  1052                           ;main.c: 63:     ANSELD = 0;
  1053  000C3A  0E00               	movlw	0
  1054  000C3C  6F5E               	movwf	94,b	;volatile
  1055                           
  1056                           ;main.c: 64:     TRISD = 0;
  1057  000C3E  0E00               	movlw	0
  1058  000C40  6E95               	movwf	149,c	;volatile
  1059                           
  1060                           ;main.c: 65:     LATD = 0;
  1061  000C42  0E00               	movlw	0
  1062  000C44  6E8C               	movwf	140,c	;volatile
  1063  000C46                     
  1064                           ; BSR set to: 15
  1065  000C46  0012               	return		;funcret
  1066  000C48                     __end_of_ports_init:
  1067                           	opt callstack 0
  1068                           
  1069 ;; *************** function _LCD_writeStr *****************
  1070 ;; Defined at:
  1071 ;;		line 110 in file "./lcd.h"
  1072 ;; Parameters:    Size  Location     Type
  1073 ;;  data            2    4[COMRAM] PTR unsigned char 
  1074 ;;		 -> STR_1(10), 
  1075 ;; Auto vars:     Size  Location     Type
  1076 ;;  i               2   10[COMRAM] int 
  1077 ;;  length          2    8[COMRAM] short 
  1078 ;; Return value:  Size  Location     Type
  1079 ;;                  1    wreg      void 
  1080 ;; Registers used:
  1081 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1082 ;; Tracked objects:
  1083 ;;		On entry : 0/0
  1084 ;;		On exit  : 0/0
  1085 ;;		Unchanged: 0/0
  1086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1087 ;;      Params:         2       0       0       0       0       0       0       0       0
  1088 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1089 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1090 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1091 ;;Total ram usage:        8 bytes
  1092 ;; Hardware stack levels used:    1
  1093 ;; Hardware stack levels required when called:    1
  1094 ;; This function calls:
  1095 ;;		_LCD_rdy
  1096 ;;		_strlen
  1097 ;; This function is called by:
  1098 ;;		_main
  1099 ;; This function uses a non-reentrant model
  1100 ;;
  1101                           
  1102                           	psect	text7
  1103  000B08                     __ptext7:
  1104                           	opt callstack 0
  1105  000B08                     _LCD_writeStr:
  1106                           	opt callstack 29
  1107  000B08                     
  1108                           ;./lcd.h: 111:     LCD_rdy();
  1109  000B08  EC3E  F006         	call	_LCD_rdy	;wreg free
  1110  000B0C                     
  1111                           ;./lcd.h: 112:     PORTCbits.RC2 = 1;
  1112  000B0C  8482               	bsf	130,2,c	;volatile
  1113  000B0E                     
  1114                           ;./lcd.h: 113:     PORTCbits.RC1 = 0;
  1115  000B0E  9282               	bcf	130,1,c	;volatile
  1116  000B10                     
  1117                           ;./lcd.h: 116:     short int length = strlen(data);
  1118  000B10  C005  F001         	movff	LCD_writeStr@data,strlen@s
  1119  000B14  C006  F002         	movff	LCD_writeStr@data+1,strlen@s+1
  1120  000B18  ECEC  F005         	call	_strlen	;wreg free
  1121  000B1C  C001  F009         	movff	?_strlen,LCD_writeStr@length
  1122  000B20  C002  F00A         	movff	?_strlen+1,LCD_writeStr@length+1
  1123  000B24                     
  1124                           ;./lcd.h: 117:     for (int i = 0; i < length; i++){
  1125  000B24  0E00               	movlw	0
  1126  000B26  6E0C               	movwf	(LCD_writeStr@i+1)^0,c
  1127  000B28  0E00               	movlw	0
  1128  000B2A  6E0B               	movwf	LCD_writeStr@i^0,c
  1129  000B2C  EFB3  F005         	goto	l1153
  1130  000B30                     l87:
  1131                           
  1132                           ;./lcd.h: 118:         PORTCbits.RC0 = 1;
  1133  000B30  8082               	bsf	130,0,c	;volatile
  1134                           
  1135                           ;./lcd.h: 119:         __nop();
  1136  000B32  F000               	nop	
  1137  000B34                     
  1138                           ;./lcd.h: 120:         LATD = data[i];
  1139  000B34  500B               	movf	LCD_writeStr@i^0,w,c
  1140  000B36  2405               	addwf	LCD_writeStr@data^0,w,c
  1141  000B38  6E07               	movwf	??_LCD_writeStr^0,c
  1142  000B3A  500C               	movf	(LCD_writeStr@i+1)^0,w,c
  1143  000B3C  2006               	addwfc	(LCD_writeStr@data+1)^0,w,c
  1144  000B3E  6E08               	movwf	(??_LCD_writeStr+1)^0,c
  1145  000B40  C007  FFF6         	movff	??_LCD_writeStr,tblptrl
  1146  000B44  C008  FFF7         	movff	??_LCD_writeStr+1,tblptrh
  1147  000B48                     	if	0	;tblptru may be non-zero
  1148  000B48                     	endif
  1149  000B48                     	if	0	;tblptru may be non-zero
  1150  000B48                     	endif
  1151  000B48  0008               	tblrd		*
  1152  000B4A  CFF5 FF8C          	movff	tablat,3980	;volatile
  1153  000B4E                     
  1154                           ;./lcd.h: 121:         __nop();
  1155  000B4E  F000               	nop	
  1156  000B50                     
  1157                           ;./lcd.h: 122:         PORTCbits.RC0 = 0;
  1158  000B50  9082               	bcf	130,0,c	;volatile
  1159  000B52                     
  1160                           ;./lcd.h: 123:         __nop();
  1161  000B52  F000               	nop	
  1162  000B54                     
  1163                           ;./lcd.h: 124:         _delay((unsigned long)((250)*(1000000/4000.0)));
  1164  000B54  0E52               	movlw	82
  1165  000B56  6E07               	movwf	??_LCD_writeStr^0,c
  1166  000B58  0E2A               	movlw	42
  1167  000B5A                     u357:
  1168  000B5A  2EE8               	decfsz	wreg,f,c
  1169  000B5C  D7FE               	bra	u357
  1170  000B5E  2E07               	decfsz	??_LCD_writeStr^0,f,c
  1171  000B60  D7FC               	bra	u357
  1172  000B62                     
  1173                           ;./lcd.h: 125:     }
  1174  000B62  4A0B               	infsnz	LCD_writeStr@i^0,f,c
  1175  000B64  2A0C               	incf	(LCD_writeStr@i+1)^0,f,c
  1176  000B66                     l1153:
  1177  000B66  5009               	movf	LCD_writeStr@length^0,w,c
  1178  000B68  5C0B               	subwf	LCD_writeStr@i^0,w,c
  1179  000B6A  500C               	movf	(LCD_writeStr@i+1)^0,w,c
  1180  000B6C  0A80               	xorlw	128
  1181  000B6E  6E07               	movwf	??_LCD_writeStr^0,c
  1182  000B70  500A               	movf	(LCD_writeStr@length+1)^0,w,c
  1183  000B72  0A80               	xorlw	128
  1184  000B74  5807               	subwfb	??_LCD_writeStr^0,w,c
  1185  000B76  A0D8               	btfss	status,0,c
  1186  000B78  EFC0  F005         	goto	u311
  1187  000B7C  EFC2  F005         	goto	u310
  1188  000B80                     u311:
  1189  000B80  EF98  F005         	goto	l87
  1190  000B84                     u310:
  1191  000B84  0012               	return		;funcret
  1192  000B86                     __end_of_LCD_writeStr:
  1193                           	opt callstack 0
  1194                           
  1195 ;; *************** function _strlen *****************
  1196 ;; Defined at:
  1197 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strlen.c"
  1198 ;; Parameters:    Size  Location     Type
  1199 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1200 ;;		 -> STR_1(10), 
  1201 ;; Auto vars:     Size  Location     Type
  1202 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1203 ;;		 -> STR_1(10), 
  1204 ;; Return value:  Size  Location     Type
  1205 ;;                  2    0[COMRAM] unsigned int 
  1206 ;; Registers used:
  1207 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  1208 ;; Tracked objects:
  1209 ;;		On entry : 0/0
  1210 ;;		On exit  : 0/0
  1211 ;;		Unchanged: 0/0
  1212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1213 ;;      Params:         2       0       0       0       0       0       0       0       0
  1214 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1215 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1216 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1217 ;;Total ram usage:        4 bytes
  1218 ;; Hardware stack levels used:    1
  1219 ;; This function calls:
  1220 ;;		Nothing
  1221 ;; This function is called by:
  1222 ;;		_LCD_writeStr
  1223 ;; This function uses a non-reentrant model
  1224 ;;
  1225                           
  1226                           	psect	text8
  1227  000BD8                     __ptext8:
  1228                           	opt callstack 0
  1229  000BD8                     _strlen:
  1230                           	opt callstack 29
  1231  000BD8  C001  F003         	movff	strlen@s,strlen@a
  1232  000BDC  C002  F004         	movff	strlen@s+1,strlen@a+1
  1233  000BE0  EFF4  F005         	goto	l1043
  1234  000BE4                     l1041:
  1235  000BE4  4A01               	infsnz	strlen@s^0,f,c
  1236  000BE6  2A02               	incf	(strlen@s+1)^0,f,c
  1237  000BE8                     l1043:
  1238  000BE8  C001  FFF6         	movff	strlen@s,tblptrl
  1239  000BEC  C002  FFF7         	movff	strlen@s+1,tblptrh
  1240  000BF0                     	if	0	;tblptru may be non-zero
  1241  000BF0                     	endif
  1242  000BF0                     	if	0	;tblptru may be non-zero
  1243  000BF0                     	endif
  1244  000BF0  0008               	tblrd		*
  1245  000BF2  50F5               	movf	tablat,w,c
  1246  000BF4  0900               	iorlw	0
  1247  000BF6  A4D8               	btfss	status,2,c
  1248  000BF8  EF00  F006         	goto	u181
  1249  000BFC  EF02  F006         	goto	u180
  1250  000C00                     u181:
  1251  000C00  EFF2  F005         	goto	l1041
  1252  000C04                     u180:
  1253  000C04  5003               	movf	strlen@a^0,w,c
  1254  000C06  5C01               	subwf	strlen@s^0,w,c
  1255  000C08  6E01               	movwf	?_strlen^0,c
  1256  000C0A  5004               	movf	(strlen@a+1)^0,w,c
  1257  000C0C  5802               	subwfb	(strlen@s+1)^0,w,c
  1258  000C0E  6E02               	movwf	(?_strlen+1)^0,c
  1259  000C10  0012               	return		;funcret
  1260  000C12                     __end_of_strlen:
  1261                           	opt callstack 0
  1262                           
  1263 ;; *************** function _LCD_newLine *****************
  1264 ;; Defined at:
  1265 ;;		line 75 in file "./lcd.h"
  1266 ;; Parameters:    Size  Location     Type
  1267 ;;		None
  1268 ;; Auto vars:     Size  Location     Type
  1269 ;;		None
  1270 ;; Return value:  Size  Location     Type
  1271 ;;                  1    wreg      void 
  1272 ;; Registers used:
  1273 ;;		wreg, status,2, status,0, cstack
  1274 ;; Tracked objects:
  1275 ;;		On entry : 0/0
  1276 ;;		On exit  : 0/0
  1277 ;;		Unchanged: 0/0
  1278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1279 ;;      Params:         0       0       0       0       0       0       0       0       0
  1280 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1281 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1282 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1283 ;;Total ram usage:        0 bytes
  1284 ;; Hardware stack levels used:    1
  1285 ;; Hardware stack levels required when called:    2
  1286 ;; This function calls:
  1287 ;;		_LCD_cmd
  1288 ;; This function is called by:
  1289 ;;		_main
  1290 ;; This function uses a non-reentrant model
  1291 ;;
  1292                           
  1293                           	psect	text9
  1294  000D90                     __ptext9:
  1295                           	opt callstack 0
  1296  000D90                     _LCD_newLine:
  1297                           	opt callstack 28
  1298  000D90                     
  1299                           ;./lcd.h: 76:     LCD_cmd(0xC0);
  1300  000D90  0EC0               	movlw	192
  1301  000D92  ECA0  F006         	call	_LCD_cmd
  1302  000D96  0012               	return		;funcret
  1303  000D98                     __end_of_LCD_newLine:
  1304                           	opt callstack 0
  1305                           
  1306 ;; *************** function _LCD_init *****************
  1307 ;; Defined at:
  1308 ;;		line 44 in file "./lcd.h"
  1309 ;; Parameters:    Size  Location     Type
  1310 ;;		None
  1311 ;; Auto vars:     Size  Location     Type
  1312 ;;		None
  1313 ;; Return value:  Size  Location     Type
  1314 ;;                  1    wreg      void 
  1315 ;; Registers used:
  1316 ;;		wreg, status,2, status,0, cstack
  1317 ;; Tracked objects:
  1318 ;;		On entry : 0/0
  1319 ;;		On exit  : 0/0
  1320 ;;		Unchanged: 0/0
  1321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1322 ;;      Params:         0       0       0       0       0       0       0       0       0
  1323 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1324 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1325 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1326 ;;Total ram usage:        0 bytes
  1327 ;; Hardware stack levels used:    1
  1328 ;; Hardware stack levels required when called:    3
  1329 ;; This function calls:
  1330 ;;		_LCD_clear
  1331 ;;		_LCD_dispControl
  1332 ;;		_LCD_entryMode
  1333 ;;		_LCD_functionSet
  1334 ;; This function is called by:
  1335 ;;		_main
  1336 ;; This function uses a non-reentrant model
  1337 ;;
  1338                           
  1339                           	psect	text10
  1340  000B86                     __ptext10:
  1341                           	opt callstack 0
  1342  000B86                     _LCD_init:
  1343                           	opt callstack 27
  1344  000B86                     
  1345                           ;./lcd.h: 45:     LCD_clear();
  1346  000B86  ECCC  F006         	call	_LCD_clear	;wreg free
  1347                           
  1348                           ;./lcd.h: 46:     LCD_functionSet(1, 1, 0);
  1349  000B8A  0E00               	movlw	0
  1350  000B8C  6E04               	movwf	(LCD_functionSet@DL+1)^0,c
  1351  000B8E  0E01               	movlw	1
  1352  000B90  6E03               	movwf	LCD_functionSet@DL^0,c
  1353  000B92  0E00               	movlw	0
  1354  000B94  6E06               	movwf	(LCD_functionSet@N+1)^0,c
  1355  000B96  0E01               	movlw	1
  1356  000B98  6E05               	movwf	LCD_functionSet@N^0,c
  1357  000B9A  0E00               	movlw	0
  1358  000B9C  6E08               	movwf	(LCD_functionSet@F+1)^0,c
  1359  000B9E  0E00               	movlw	0
  1360  000BA0  6E07               	movwf	LCD_functionSet@F^0,c
  1361  000BA2  EC6F  F006         	call	_LCD_functionSet	;wreg free
  1362                           
  1363                           ;./lcd.h: 47:     LCD_dispControl(1, 1, 1);
  1364  000BA6  0E00               	movlw	0
  1365  000BA8  6E04               	movwf	(LCD_dispControl@D+1)^0,c
  1366  000BAA  0E01               	movlw	1
  1367  000BAC  6E03               	movwf	LCD_dispControl@D^0,c
  1368  000BAE  0E00               	movlw	0
  1369  000BB0  6E06               	movwf	(LCD_dispControl@C+1)^0,c
  1370  000BB2  0E01               	movlw	1
  1371  000BB4  6E05               	movwf	LCD_dispControl@C^0,c
  1372  000BB6  0E00               	movlw	0
  1373  000BB8  6E08               	movwf	(LCD_dispControl@B+1)^0,c
  1374  000BBA  0E01               	movlw	1
  1375  000BBC  6E07               	movwf	LCD_dispControl@B^0,c
  1376  000BBE  ECAD  F006         	call	_LCD_dispControl	;wreg free
  1377                           
  1378                           ;./lcd.h: 48:     LCD_entryMode(1, 0);
  1379  000BC2  0E00               	movlw	0
  1380  000BC4  6E04               	movwf	(LCD_entryMode@ID+1)^0,c
  1381  000BC6  0E01               	movlw	1
  1382  000BC8  6E03               	movwf	LCD_entryMode@ID^0,c
  1383  000BCA  0E00               	movlw	0
  1384  000BCC  6E06               	movwf	(LCD_entryMode@SH+1)^0,c
  1385  000BCE  0E00               	movlw	0
  1386  000BD0  6E05               	movwf	LCD_entryMode@SH^0,c
  1387  000BD2  ECC1  F006         	call	_LCD_entryMode	;wreg free
  1388  000BD6  0012               	return		;funcret
  1389  000BD8                     __end_of_LCD_init:
  1390                           	opt callstack 0
  1391                           
  1392 ;; *************** function _LCD_functionSet *****************
  1393 ;; Defined at:
  1394 ;;		line 71 in file "./lcd.h"
  1395 ;; Parameters:    Size  Location     Type
  1396 ;;  DL              2    2[COMRAM] short 
  1397 ;;  N               2    4[COMRAM] short 
  1398 ;;  F               2    6[COMRAM] short 
  1399 ;; Auto vars:     Size  Location     Type
  1400 ;;		None
  1401 ;; Return value:  Size  Location     Type
  1402 ;;                  1    wreg      void 
  1403 ;; Registers used:
  1404 ;;		wreg, status,2, status,0, cstack
  1405 ;; Tracked objects:
  1406 ;;		On entry : 0/0
  1407 ;;		On exit  : 0/0
  1408 ;;		Unchanged: 0/0
  1409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1410 ;;      Params:         6       0       0       0       0       0       0       0       0
  1411 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1412 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1413 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1414 ;;Total ram usage:        8 bytes
  1415 ;; Hardware stack levels used:    1
  1416 ;; Hardware stack levels required when called:    2
  1417 ;; This function calls:
  1418 ;;		_LCD_cmd
  1419 ;; This function is called by:
  1420 ;;		_LCD_init
  1421 ;; This function uses a non-reentrant model
  1422 ;;
  1423                           
  1424                           	psect	text11
  1425  000CDE                     __ptext11:
  1426                           	opt callstack 0
  1427  000CDE                     _LCD_functionSet:
  1428                           	opt callstack 27
  1429  000CDE                     
  1430                           ;./lcd.h: 72:     LCD_cmd(0b00100000 | DL << 4 | N << 3 | F << 2);
  1431  000CDE  C007  F009         	movff	LCD_functionSet@F,??_LCD_functionSet
  1432  000CE2  90D8               	bcf	status,0,c
  1433  000CE4  3609               	rlcf	??_LCD_functionSet^0,f,c
  1434  000CE6  90D8               	bcf	status,0,c
  1435  000CE8  3609               	rlcf	??_LCD_functionSet^0,f,c
  1436  000CEA  C005  F00A         	movff	LCD_functionSet@N,??_LCD_functionSet+1
  1437  000CEE  90D8               	bcf	status,0,c
  1438  000CF0  360A               	rlcf	(??_LCD_functionSet+1)^0,f,c
  1439  000CF2  90D8               	bcf	status,0,c
  1440  000CF4  360A               	rlcf	(??_LCD_functionSet+1)^0,f,c
  1441  000CF6  90D8               	bcf	status,0,c
  1442  000CF8  360A               	rlcf	(??_LCD_functionSet+1)^0,f,c
  1443  000CFA  3803               	swapf	LCD_functionSet@DL^0,w,c
  1444  000CFC  0BF0               	andlw	240
  1445  000CFE  100A               	iorwf	(??_LCD_functionSet+1)^0,w,c
  1446  000D00  1009               	iorwf	??_LCD_functionSet^0,w,c
  1447  000D02  0920               	iorlw	32
  1448  000D04  ECA0  F006         	call	_LCD_cmd
  1449  000D08  0012               	return		;funcret
  1450  000D0A                     __end_of_LCD_functionSet:
  1451                           	opt callstack 0
  1452                           
  1453 ;; *************** function _LCD_entryMode *****************
  1454 ;; Defined at:
  1455 ;;		line 59 in file "./lcd.h"
  1456 ;; Parameters:    Size  Location     Type
  1457 ;;  ID              2    2[COMRAM] short 
  1458 ;;  SH              2    4[COMRAM] short 
  1459 ;; Auto vars:     Size  Location     Type
  1460 ;;		None
  1461 ;; Return value:  Size  Location     Type
  1462 ;;                  1    wreg      void 
  1463 ;; Registers used:
  1464 ;;		wreg, status,2, status,0, cstack
  1465 ;; Tracked objects:
  1466 ;;		On entry : 0/0
  1467 ;;		On exit  : 0/0
  1468 ;;		Unchanged: 0/0
  1469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1470 ;;      Params:         4       0       0       0       0       0       0       0       0
  1471 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1472 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1473 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1474 ;;Total ram usage:        4 bytes
  1475 ;; Hardware stack levels used:    1
  1476 ;; Hardware stack levels required when called:    2
  1477 ;; This function calls:
  1478 ;;		_LCD_cmd
  1479 ;; This function is called by:
  1480 ;;		_LCD_init
  1481 ;;		_printCalcResult
  1482 ;; This function uses a non-reentrant model
  1483 ;;
  1484                           
  1485                           	psect	text12
  1486  000D82                     __ptext12:
  1487                           	opt callstack 0
  1488  000D82                     _LCD_entryMode:
  1489                           	opt callstack 27
  1490  000D82                     
  1491                           ;./lcd.h: 60:     LCD_cmd(0b00000100 | ID << 1 | SH);
  1492  000D82  5003               	movf	LCD_entryMode@ID^0,w,c
  1493  000D84  2403               	addwf	LCD_entryMode@ID^0,w,c
  1494  000D86  1005               	iorwf	LCD_entryMode@SH^0,w,c
  1495  000D88  0904               	iorlw	4
  1496  000D8A  ECA0  F006         	call	_LCD_cmd
  1497  000D8E  0012               	return		;funcret
  1498  000D90                     __end_of_LCD_entryMode:
  1499                           	opt callstack 0
  1500                           
  1501 ;; *************** function _LCD_dispControl *****************
  1502 ;; Defined at:
  1503 ;;		line 63 in file "./lcd.h"
  1504 ;; Parameters:    Size  Location     Type
  1505 ;;  D               2    2[COMRAM] short 
  1506 ;;  C               2    4[COMRAM] short 
  1507 ;;  B               2    6[COMRAM] short 
  1508 ;; Auto vars:     Size  Location     Type
  1509 ;;		None
  1510 ;; Return value:  Size  Location     Type
  1511 ;;                  1    wreg      void 
  1512 ;; Registers used:
  1513 ;;		wreg, status,2, status,0, cstack
  1514 ;; Tracked objects:
  1515 ;;		On entry : 0/0
  1516 ;;		On exit  : 0/0
  1517 ;;		Unchanged: 0/0
  1518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1519 ;;      Params:         6       0       0       0       0       0       0       0       0
  1520 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1521 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1522 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1523 ;;Total ram usage:        7 bytes
  1524 ;; Hardware stack levels used:    1
  1525 ;; Hardware stack levels required when called:    2
  1526 ;; This function calls:
  1527 ;;		_LCD_cmd
  1528 ;; This function is called by:
  1529 ;;		_LCD_init
  1530 ;;		_printCalcResult
  1531 ;; This function uses a non-reentrant model
  1532 ;;
  1533                           
  1534                           	psect	text13
  1535  000D5A                     __ptext13:
  1536                           	opt callstack 0
  1537  000D5A                     _LCD_dispControl:
  1538                           	opt callstack 27
  1539  000D5A                     
  1540                           ;./lcd.h: 64:     LCD_cmd(0b00001000 | D << 2 | C << 1 | B);
  1541  000D5A  90D8               	bcf	status,0,c
  1542  000D5C  3405               	rlcf	LCD_dispControl@C^0,w,c
  1543  000D5E  6E09               	movwf	??_LCD_dispControl^0,c
  1544  000D60  4403               	rlncf	LCD_dispControl@D^0,w,c
  1545  000D62  46E8               	rlncf	wreg,f,c
  1546  000D64  0BFC               	andlw	252
  1547  000D66  1009               	iorwf	??_LCD_dispControl^0,w,c
  1548  000D68  1007               	iorwf	LCD_dispControl@B^0,w,c
  1549  000D6A  0908               	iorlw	8
  1550  000D6C  ECA0  F006         	call	_LCD_cmd
  1551  000D70  0012               	return		;funcret
  1552  000D72                     __end_of_LCD_dispControl:
  1553                           	opt callstack 0
  1554                           
  1555 ;; *************** function _LCD_clear *****************
  1556 ;; Defined at:
  1557 ;;		line 51 in file "./lcd.h"
  1558 ;; Parameters:    Size  Location     Type
  1559 ;;		None
  1560 ;; Auto vars:     Size  Location     Type
  1561 ;;		None
  1562 ;; Return value:  Size  Location     Type
  1563 ;;                  1    wreg      void 
  1564 ;; Registers used:
  1565 ;;		wreg, status,2, status,0, cstack
  1566 ;; Tracked objects:
  1567 ;;		On entry : 0/0
  1568 ;;		On exit  : 0/0
  1569 ;;		Unchanged: 0/0
  1570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1571 ;;      Params:         0       0       0       0       0       0       0       0       0
  1572 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1573 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1574 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1575 ;;Total ram usage:        0 bytes
  1576 ;; Hardware stack levels used:    1
  1577 ;; Hardware stack levels required when called:    2
  1578 ;; This function calls:
  1579 ;;		_LCD_cmd
  1580 ;; This function is called by:
  1581 ;;		_LCD_init
  1582 ;; This function uses a non-reentrant model
  1583 ;;
  1584                           
  1585                           	psect	text14
  1586  000D98                     __ptext14:
  1587                           	opt callstack 0
  1588  000D98                     _LCD_clear:
  1589                           	opt callstack 27
  1590  000D98                     
  1591                           ;./lcd.h: 52:     LCD_cmd(0b00000001);
  1592  000D98  0E01               	movlw	1
  1593  000D9A  ECA0  F006         	call	_LCD_cmd
  1594  000D9E  0012               	return		;funcret
  1595  000DA0                     __end_of_LCD_clear:
  1596                           	opt callstack 0
  1597                           
  1598 ;; *************** function _LCD_cmd *****************
  1599 ;; Defined at:
  1600 ;;		line 79 in file "./lcd.h"
  1601 ;; Parameters:    Size  Location     Type
  1602 ;;  cmd             1    wreg     unsigned char 
  1603 ;; Auto vars:     Size  Location     Type
  1604 ;;  cmd             1    1[COMRAM] unsigned char 
  1605 ;; Return value:  Size  Location     Type
  1606 ;;                  1    wreg      void 
  1607 ;; Registers used:
  1608 ;;		wreg, status,2, status,0, cstack
  1609 ;; Tracked objects:
  1610 ;;		On entry : 0/0
  1611 ;;		On exit  : 0/0
  1612 ;;		Unchanged: 0/0
  1613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1614 ;;      Params:         0       0       0       0       0       0       0       0       0
  1615 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1616 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1617 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1618 ;;Total ram usage:        1 bytes
  1619 ;; Hardware stack levels used:    1
  1620 ;; Hardware stack levels required when called:    1
  1621 ;; This function calls:
  1622 ;;		_LCD_rdy
  1623 ;; This function is called by:
  1624 ;;		_LCD_clear
  1625 ;;		_LCD_entryMode
  1626 ;;		_LCD_dispControl
  1627 ;;		_LCD_cursor
  1628 ;;		_LCD_functionSet
  1629 ;;		_LCD_newLine
  1630 ;;		_LCD_returnHome
  1631 ;; This function uses a non-reentrant model
  1632 ;;
  1633                           
  1634                           	psect	text15
  1635  000D40                     __ptext15:
  1636                           	opt callstack 0
  1637  000D40                     _LCD_cmd:
  1638                           	opt callstack 27
  1639                           
  1640                           ;incstack = 0
  1641                           ;LCD_cmd@cmd stored from wreg
  1642  000D40  6E02               	movwf	LCD_cmd@cmd^0,c
  1643  000D42                     
  1644                           ;./lcd.h: 80:     LCD_rdy();
  1645  000D42  EC3E  F006         	call	_LCD_rdy	;wreg free
  1646  000D46                     
  1647                           ;./lcd.h: 81:     PORTCbits.RC2=0;
  1648  000D46  9482               	bcf	130,2,c	;volatile
  1649  000D48                     
  1650                           ;./lcd.h: 82:     PORTCbits.RC1=0;
  1651  000D48  9282               	bcf	130,1,c	;volatile
  1652  000D4A                     
  1653                           ;./lcd.h: 83:     PORTCbits.RC0=1;
  1654  000D4A  8082               	bsf	130,0,c	;volatile
  1655  000D4C                     
  1656                           ;./lcd.h: 84:     __nop();
  1657  000D4C  F000               	nop	
  1658  000D4E                     
  1659                           ;./lcd.h: 85:     LATD = cmd;
  1660  000D4E  C002  FF8C         	movff	LCD_cmd@cmd,3980	;volatile
  1661  000D52                     
  1662                           ;./lcd.h: 86:     __nop();
  1663  000D52  F000               	nop	
  1664  000D54                     
  1665                           ;./lcd.h: 87:     PORTCbits.RC0=0;
  1666  000D54  9082               	bcf	130,0,c	;volatile
  1667  000D56                     
  1668                           ;./lcd.h: 88:     __nop();
  1669  000D56  F000               	nop	
  1670  000D58  0012               	return		;funcret
  1671  000D5A                     __end_of_LCD_cmd:
  1672                           	opt callstack 0
  1673                           
  1674 ;; *************** function _LCD_rdy *****************
  1675 ;; Defined at:
  1676 ;;		line 91 in file "./lcd.h"
  1677 ;; Parameters:    Size  Location     Type
  1678 ;;		None
  1679 ;; Auto vars:     Size  Location     Type
  1680 ;;  busy            1    0[COMRAM] unsigned char 
  1681 ;; Return value:  Size  Location     Type
  1682 ;;                  1    wreg      void 
  1683 ;; Registers used:
  1684 ;;		wreg, status,2, status,0
  1685 ;; Tracked objects:
  1686 ;;		On entry : 0/0
  1687 ;;		On exit  : 0/0
  1688 ;;		Unchanged: 0/0
  1689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1690 ;;      Params:         0       0       0       0       0       0       0       0       0
  1691 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1692 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1693 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1694 ;;Total ram usage:        1 bytes
  1695 ;; Hardware stack levels used:    1
  1696 ;; This function calls:
  1697 ;;		Nothing
  1698 ;; This function is called by:
  1699 ;;		_LCD_cmd
  1700 ;;		_LCD_writeStr
  1701 ;;		_LCD_writeChar
  1702 ;; This function uses a non-reentrant model
  1703 ;;
  1704                           
  1705                           	psect	text16
  1706  000C7C                     __ptext16:
  1707                           	opt callstack 0
  1708  000C7C                     _LCD_rdy:
  1709                           	opt callstack 28
  1710  000C7C                     
  1711                           ;./lcd.h: 92:     char busy = 0x80;
  1712  000C7C  0E80               	movlw	128
  1713  000C7E  6E01               	movwf	LCD_rdy@busy^0,c
  1714  000C80                     
  1715                           ;./lcd.h: 93:     TRISD = 0b11111111;
  1716  000C80  6895               	setf	149,c	;volatile
  1717  000C82                     
  1718                           ;./lcd.h: 94:     PORTCbits.RC2 = 0;
  1719  000C82  9482               	bcf	130,2,c	;volatile
  1720  000C84                     
  1721                           ;./lcd.h: 95:     PORTCbits.RC1 = 1;
  1722  000C84  8282               	bsf	130,1,c	;volatile
  1723                           
  1724                           ;./lcd.h: 98:     while (busy) {
  1725  000C86  EF4D  F006         	goto	l811
  1726  000C8A                     l81:
  1727                           
  1728                           ;./lcd.h: 99:         PORTCbits.RC0 = 1;
  1729  000C8A  8082               	bsf	130,0,c	;volatile
  1730                           
  1731                           ;./lcd.h: 100:         __nop();
  1732  000C8C  F000               	nop	
  1733  000C8E                     
  1734                           ;./lcd.h: 101:         busy = PORTD & 0x80;
  1735  000C8E  5083               	movf	131,w,c	;volatile
  1736  000C90  0B80               	andlw	128
  1737  000C92  6E01               	movwf	LCD_rdy@busy^0,c
  1738  000C94                     
  1739                           ;./lcd.h: 102:         __nop();
  1740  000C94  F000               	nop	
  1741  000C96                     
  1742                           ;./lcd.h: 103:         PORTCbits.RC0 = 0;
  1743  000C96  9082               	bcf	130,0,c	;volatile
  1744  000C98                     
  1745                           ;./lcd.h: 104:         __nop();
  1746  000C98  F000               	nop	
  1747  000C9A                     l811:
  1748                           
  1749                           ;./lcd.h: 98:     while (busy) {
  1750  000C9A  5001               	movf	LCD_rdy@busy^0,w,c
  1751  000C9C  A4D8               	btfss	status,2,c
  1752  000C9E  EF53  F006         	goto	u11
  1753  000CA2  EF55  F006         	goto	u10
  1754  000CA6                     u11:
  1755  000CA6  EF45  F006         	goto	l81
  1756  000CAA                     u10:
  1757  000CAA                     
  1758                           ;./lcd.h: 107:     TRISD = 0b00000000;
  1759  000CAA  0E00               	movlw	0
  1760  000CAC  6E95               	movwf	149,c	;volatile
  1761  000CAE  0012               	return		;funcret
  1762  000CB0                     __end_of_LCD_rdy:
  1763                           	opt callstack 0
  1764                           
  1765                           	psect	rparam
  1766  0000                     tosu	equ	0xFFF
  1767                           tosh	equ	0xFFE
  1768                           tosl	equ	0xFFD
  1769                           stkptr	equ	0xFFC
  1770                           pclatu	equ	0xFFB
  1771                           pclath	equ	0xFFA
  1772                           pcl	equ	0xFF9
  1773                           tblptru	equ	0xFF8
  1774                           tblptrh	equ	0xFF7
  1775                           tblptrl	equ	0xFF6
  1776                           tablat	equ	0xFF5
  1777                           prodh	equ	0xFF4
  1778                           prodl	equ	0xFF3
  1779                           indf0	equ	0xFEF
  1780                           postinc0	equ	0xFEE
  1781                           postdec0	equ	0xFED
  1782                           preinc0	equ	0xFEC
  1783                           plusw0	equ	0xFEB
  1784                           fsr0h	equ	0xFEA
  1785                           fsr0l	equ	0xFE9
  1786                           wreg	equ	0xFE8
  1787                           indf1	equ	0xFE7
  1788                           postinc1	equ	0xFE6
  1789                           postdec1	equ	0xFE5
  1790                           preinc1	equ	0xFE4
  1791                           plusw1	equ	0xFE3
  1792                           fsr1h	equ	0xFE2
  1793                           fsr1l	equ	0xFE1
  1794                           bsr	equ	0xFE0
  1795                           indf2	equ	0xFDF
  1796                           postinc2	equ	0xFDE
  1797                           postdec2	equ	0xFDD
  1798                           preinc2	equ	0xFDC
  1799                           plusw2	equ	0xFDB
  1800                           fsr2h	equ	0xFDA
  1801                           fsr2l	equ	0xFD9
  1802                           status	equ	0xFD8


Data Sizes:
    Strings     10
    Constant    0
    Data        16
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     27      43
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_1(CODE[10]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_1(CODE[10]), 

    LCD_writeStr@data	PTR unsigned char  size(2) Largest target is 10
		 -> STR_1(CODE[10]), 


Critical Paths under _main in COMRAM

    _main->_printCalcResult
    _printCalcResult->___aldiv
    _LCD_writeChar->_LCD_rdy
    _LCD_cursor->_LCD_cmd
    _LCD_writeStr->_strlen
    _LCD_newLine->_LCD_cmd
    _LCD_init->_LCD_functionSet
    _LCD_functionSet->_LCD_cmd
    _LCD_entryMode->_LCD_cmd
    _LCD_dispControl->_LCD_cmd
    _LCD_clear->_LCD_cmd
    _LCD_cmd->_LCD_rdy

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    4006
                                             23 COMRAM     4     4      0
                           _LCD_init
                        _LCD_newLine
                       _LCD_writeStr
                         _ports_init
                    _printCalcResult
 ---------------------------------------------------------------------------------
 (1) _printCalcResult                                      9     5      4    2299
                                             14 COMRAM     9     5      4
                         _LCD_cursor
                    _LCD_dispControl
                      _LCD_entryMode
                      _LCD_writeChar
                            ___aldiv
                            ___almod
 ---------------------------------------------------------------------------------
 (2) ___almod                                             10     2      8     448
                                              0 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     452
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (2) _LCD_writeChar                                        1     1      0      30
                                              1 COMRAM     1     1      0
                            _LCD_rdy
 ---------------------------------------------------------------------------------
 (2) _LCD_cursor                                           5     1      4     226
                                              2 COMRAM     5     1      4
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (1) _ports_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_writeStr                                         8     6      2     370
                                              4 COMRAM     8     6      2
                            _LCD_rdy
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _LCD_newLine                                          0     0      0      30
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             0     0      0    1284
                          _LCD_clear
                    _LCD_dispControl
                      _LCD_entryMode
                    _LCD_functionSet
 ---------------------------------------------------------------------------------
 (2) _LCD_functionSet                                      8     2      6     324
                                              2 COMRAM     8     2      6
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_entryMode                                        4     0      4     378
                                              2 COMRAM     4     0      4
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_dispControl                                      7     1      6     552
                                              2 COMRAM     7     1      6
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_clear                                            0     0      0      30
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (3) _LCD_cmd                                              1     1      0      30
                                              1 COMRAM     1     1      0
                            _LCD_rdy
 ---------------------------------------------------------------------------------
 (3) _LCD_rdy                                              1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_init
     _LCD_clear
       _LCD_cmd
         _LCD_rdy
     _LCD_dispControl
       _LCD_cmd
         _LCD_rdy
     _LCD_entryMode
       _LCD_cmd
         _LCD_rdy
     _LCD_functionSet
       _LCD_cmd
         _LCD_rdy
   _LCD_newLine
     _LCD_cmd
       _LCD_rdy
   _LCD_writeStr
     _LCD_rdy
     _strlen
   _ports_init
   _printCalcResult
     _LCD_cursor
       _LCD_cmd
         _LCD_rdy
     _LCD_dispControl
       _LCD_cmd
         _LCD_rdy
     _LCD_entryMode
       _LCD_cmd
         _LCD_rdy
     _LCD_writeChar
       _LCD_rdy
     ___aldiv
     ___almod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     1B      2B       1       45.3%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      2B       6        0.0%
DATA                 0      0      2B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sun Nov 29 12:59:33 2020

                      l53 0BD6                        l62 0D8E                        l71 0D08  
                      l56 0D9E                        l81 0C8A                        l65 0D70  
                      l74 0D96                        l83 0CAE                        l68 0D24  
                      l92 0D3E                        l77 0D58                        l87 0B30  
                      l89 0B84                        u10 0CAA                        u11 0CA6  
            __CFG_CP0$OFF 000000              __CFG_CP1$OFF 000000              __CFG_CP2$OFF 000000  
            __CFG_CP3$OFF 000000               __CFG_LVP$ON 000000                       l105 0C46  
                     l113 0A1A                       l208 0B06                       l195 0916  
                     l801 0C84                       l803 0C8E                       l811 0C9A  
                     l813 0CAA                       l805 0C94                       l821 0D4A  
                     l807 0C96                       l831 0D56                       l823 0D4C  
                     l815 0D42                       l809 0C98                       l825 0D4E  
                     l817 0D46                       l833 0D98                       l827 0D52  
                     l819 0D48                       l829 0D54                       l861 0D32  
                     l853 0D28                       l863 0D34                       l855 0D2C  
                     l953 0D90                       l793 0C10                       l865 0D38  
                     l857 0D2E                       l795 0C7C                       l867 0D3A  
                     l859 0D30                       l797 0C80                       l981 0C30  
                     l869 0D3C                       l799 0C82                       l983 0C32  
                     l985 0C34                       l979 0C12              __CFG_CPB$OFF 000000  
                     u200 0840                       u201 083C                       u210 087A  
                     u211 0876                       u220 089C                       u300 0AE6  
                     u221 0898                       u301 0AE2                       u310 0B84  
                     u230 08C4                       u311 0B80                       u231 08C0  
                     u240 08F6                       u320 0954                       u241 08F2  
                     u321 0950                       u250 0A2E                       u330 09E8  
                     u251 0A2A                       u331 09E4                       u180 0C04  
                     u260 0A50                       u181 0C00                       u261 0A4C  
                     u190 081E                       u270 0A76                       u191 081A  
                     u271 0A72                       u280 0A98                       u281 0A94  
                     u290 0AB6              __CFG_CPD$OFF 000000                       u291 0AB2  
                     u347 0A0E                       u357 0B5A               ?_LCD_cursor 0003  
                     wreg 000FE8    __size_of_LCD_entryMode 000E  __size_of_LCD_dispControl 0018  
         __end_of_LCD_cmd 0D5A           __end_of_LCD_rdy 0CB0                      l1101 0A42  
                    l1031 0CDE                      l1111 0A8A                      l1103 0A50  
                    l1033 0D5A                      l1041 0BE4                      l1113 0A98  
                    l1121 0AD6                      l1105 0A60                      l1035 0D82  
                    l1043 0BE8                      l1131 0B08                      l1051 0810  
                    l1123 0AE6                      l1115 0AB6                      l1107 0A76  
                    l1045 0C04                      l1141 0B34                      l1133 0B0C  
                    l1037 0D0A                      l1061 0850                      l1053 081E  
                    l1125 0AF6                      l1117 0AC6                      l1109 0A7E  
                    l1039 0BD8                      l1151 0B62                      l1143 0B4E  
                    l1135 0B0E                      l1071 088E                      l1063 0854  
                    l1055 082E                      l1119 0AD0                      l1129 0B86  
                    l1145 0B50                      l1153 0B66                      l1137 0B10  
                    l1081 08D6                      l1073 089C                      l1065 0864  
                    l1057 0832                      l1049 080C                      l1161 0920  
                    l1147 0B52                      l1139 0B24                      l1083 08E0  
                    l1075 08A6                      l1067 087A                      l1059 0840  
                    l1171 0994                      l1163 0934                      l1155 0918  
                    l1149 0B54                      l1077 08C4                      l1069 0882  
                    l1085 08E6                      l1093 0A1C                      l1181 0A04  
                    l1173 0998                      l1165 0938                      l1087 08F6  
                    l1079 08D4                      l1095 0A20                      l1175 099E  
                    l1167 0954                      l1191 0C60                      l1183 0C48  
                    l1089 0906                      l1097 0A2E                      l1169 096C  
                    l1177 09D2                      l1193 0C60                      l1185 0C4C  
                    l1099 0A3E                      l1179 09E8                      l1187 0C50  
                    l1189 0C5C                      STR_1 0801                      _LATA 000F89  
                    _LATB 000F8A                      _LATC 000F8B                      _LATD 000F8C  
__size_of_printCalcResult 0104              ?_LCD_newLine 0001                      _main 0C48  
                    fsr1l 000FE1             __CFG_BORV$190 000000                      start 0000  
           __CFG_IESO$OFF 000000        __size_of_LCD_clear 0008             __CFG_MCLRE$ON 000000  
            ___param_bank 000000          __end_of_LCD_init 0BD8           __end_of___aldiv 0918  
         __end_of___almod 0B08                     ?_main 0001                     _PORTD 000F83  
                   _TRISA 000F92                     _TRISB 000F93                     _TRISD 000F95  
            main@key_vals 0018             __CFG_WRT0$OFF 000000             __CFG_WRT1$OFF 000000  
           __CFG_WRT2$OFF 000000             __CFG_WRT3$OFF 000000            __CFG_EBTR0$OFF 000000  
          __CFG_FCMEN$OFF 000000            __CFG_EBTR1$OFF 000000            __CFG_EBTR2$OFF 000000  
          __CFG_EBTR3$OFF 000000             __CFG_WRTB$OFF 000000             __CFG_WRTC$OFF 000000  
           __CFG_WRTD$OFF 000000    __size_of_LCD_writeChar 001A            __CFG_EBTRB$OFF 000000  
                   tablat 000FF5                     status 000FD8            __CFG_T3CMX$RC0 000000  
          __CFG_ICPRT$OFF 000000            __CFG_PBADEN$ON 000000       __size_of_LCD_cursor 001C  
           ?_LCD_writeStr 0005             _LCD_entryMode 0D82           __initialization 0CB0  
            __end_of_main 0C7C               LCD_rdy@busy 0001            __CFG_PCLKEN$ON 000000  
         LCD_entryMode@ID 0003           LCD_entryMode@SH 0005                    ??_main 0018  
           __activetblptr 000001                 ??_LCD_cmd 0002                 ??_LCD_rdy 0001  
       __end_of_LCD_clear 0DA0            __CFG_SDOMX$RB3 000000           __CFG_CCP2MX$RC1 000000  
__size_of_LCD_functionSet 002C                    _ANSELA 000F5B                    _ANSELB 000F5C  
                  _ANSELC 000F5D                    _ANSELD 000F5E            __CFG_WDTEN$OFF 000000  
       ??_LCD_dispControl 0009         ??_printCalcResult 0013            ??_LCD_writeStr 0007  
          ?_LCD_entryMode 0003            __CFG_XINST$OFF 000000             _LCD_writeChar 0D26  
               ??___aldiv 0009                 ??___almod 0009            __CFG_STVREN$ON 000000  
                  _strlen 0BD8              __pdataCOMRAM 0018              __mediumconst 0000  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
    __CFG_LS48MHZ$SYS24X4 000000                __accesstop 0060   __end_of__initialization 0CD0  
               ?_LCD_init 0001             ___rparam_used 000001      __size_of_LCD_newLine 0008  
          ?_LCD_writeChar 0001            __pcstackCOMRAM 0001          __CFG_nPWRTEN$OFF 000000  
            LCD_cursor@SC 0003              LCD_cursor@RL 0005              ??_LCD_cursor 0007  
       ??_LCD_functionSet 0009                ??_LCD_init 000B           ??_LCD_entryMode 0007  
      __end_of_LCD_cursor 0D26         __CFG_PLLSEL$PLL4X 000000                   ?_strlen 0001  
                 _LCD_cmd 0D40                   _LCD_rdy 0C7C      __end_of_LCD_writeStr 0B86  
         ??_LCD_writeChar 0002                   __Hparam 0000                   __Lparam 0000  
                 ___aldiv 080C                   ___almod 0A1C              __psmallconst 0800  
        LCD_functionSet@F 0007          LCD_functionSet@N 0005                   __pcinit 0CB0  
        LCD_writeStr@data 0005                   __ramtop 0800                   __ptext0 0C48  
                 __ptext1 0918                   __ptext2 0A1C                   __ptext3 080C  
                 __ptext4 0D26                   __ptext5 0D0A                   __ptext6 0C12  
                 __ptext7 0B08                   __ptext8 0BD8                   __ptext9 0D90  
         __size_of_strlen 003A          ___aldiv@dividend 0001           _LCD_dispControl 0D5A  
         _printCalcResult 0918                 _LCD_clear 0D98      end_of_initialization 0CD0  
   printCalcResult@modulo 0015     printCalcResult@result 000F          ___aldiv@quotient 000B  
                 postdec1 000FE5                   postinc0 000FEE                   strlen@a 0003  
                 strlen@s 0001                 _PORTCbits 000F82                 _TRISCbits 000F94  
              _ports_init 0C12                ?_LCD_clear 0001         __size_of_LCD_init 0052  
 __end_of_LCD_dispControl 0D72             __pidataCOMRAM 0D72     __size_of_LCD_writeStr 007E  
              LCD_cmd@cmd 0002   __end_of_printCalcResult 0A1C            __end_of_strlen 0C12  
     start_initialization 0CB0           _LCD_functionSet 0CDE             ??_LCD_newLine 0003  
         __CFG_nLPBOR$OFF 000000              _LCD_writeStr 0B08                  ??_strlen 0003  
                ?_LCD_cmd 0001                  ?_LCD_rdy 0001               ?_ports_init 0001  
             ??_LCD_clear 0003     __end_of_LCD_entryMode 0D90       __end_of_LCD_newLine 0D98  
      LCD_writeStr@length 0009                  ?___aldiv 0001                  ?___almod 0001  
           LCD_writeStr@i 000B   __end_of_LCD_functionSet 0D0A          ?_LCD_dispControl 0003  
        ___almod@dividend 0001               __smallconst 0800          ?_printCalcResult 000F  
         ___aldiv@divisor 0005           ___aldiv@counter 0009                  _LCD_init 0B86  
   __end_of_LCD_writeChar 0D40          __CFG_WDTPS$32768 000000         LCD_writeChar@data 0002  
     __size_of_ports_init 0036         __CFG_CFGPLLEN$OFF 000000          __size_of_LCD_cmd 001A  
        __size_of_LCD_rdy 0034                 copy_data0 0CC4               _LCD_newLine 0D90  
                __Hrparam 0000                  __Lrparam 0000              __Lsmallconst 0800  
      __CFG_BOREN$SBORDIS 000000          __size_of___aldiv 010C          __size_of___almod 00EC  
        ?_LCD_functionSet 0003         LCD_functionSet@DL 0003                  __ptext10 0B86  
                __ptext11 0CDE                  __ptext12 0D82                  __ptext13 0D5A  
                __ptext14 0D98                  __ptext15 0D40                  __ptext16 0C7C  
         ___almod@divisor 0005           ___almod@counter 0009             __size_of_main 0034  
        LCD_dispControl@B 0007          LCD_dispControl@C 0005          LCD_dispControl@D 0003  
              _LCD_cursor 0D0A              ??_ports_init 0001          printCalcResult@i 0016  
    __CFG_CPUDIV$NOCLKDIV 000000        __end_of_ports_init 0C48              ___aldiv@sign 000A  
      __CFG_FOSC$INTOSCIO 000000              ___almod@sign 000A  
